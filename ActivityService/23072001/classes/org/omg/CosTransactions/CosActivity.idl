
// File: CosActivity




//#include <orb.idl>


/*
 * Copyright (C) 1996, 1997, 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: CosTransactions.tmpl,v 1.2 2000/03/16 16:17:14 nmcl Exp $
 */





#pragma prefix "omg.org"



#pragma javaPackage "org.omg"


//
// If Draft3 is defined includes most (but not all of the features
// of the revised OTS spec at Draft3 (Nov 22, 96).
// Those missing generally need support from other services or the ORB
// itself
//

/*
 * We provide minimal support for drafts before 3.
 * Because some systems (e.g., Orbix) do their own parsing and
 * can't cope with '#if defined' statements, we have some "extended"
 * conditional compilation lines!
 */

















module CosTransactions
{
    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
		  StatusCommitted, StatusRolledBack, StatusUnknown,

		  StatusPreparing, StatusCommitting, StatusRollingBack,

		  StatusNoTransaction };

    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };














	exception WrongTransaction {};


    // Heuristic exceptions

    exception HeuristicRollback {};
    exception HeuristicCommit {};
    exception HeuristicMixed {};
    exception HeuristicHazard {};

    // Other transaction related exceptions
    
    exception SubtransactionsUnavailable {};
    exception NotSubtransaction {};
    exception Inactive {};
    exception NotPrepared {};
    exception NoTransaction {};
    exception InvalidControl {};
    exception Unavailable {};
    exception SynchronizationUnavailable {};

    // Forward references for later interfaces
	
    interface Control;
    interface Terminator;
    interface Coordinator;
    interface Resource;
    interface RecoveryCoordinator;

    interface SubtransactionAwareResource;

    interface TransactionFactory;

    interface TransactionalObject;

    interface Current;
    

    interface Synchronization;
    
    // Formally part of CosTSInteroperation





    struct otid_t
    {
	long formatID;
	long bequal_length;

	sequence <octet> tid;



    };

    struct TransIdentity
    {
	Coordinator coord;
	Terminator term;
	otid_t otid;
    };





    struct PropagationContext
    {
	unsigned long timeout;
	TransIdentity currentTransaction;

	sequence <TransIdentity> parents;



	any implementation_specific_data;
    };

    



    interface Current

    {
	void begin () raises (SubtransactionsUnavailable);



	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);

	void rollback () raises (NoTransaction);
	void rollback_only () raises (NoTransaction);

	Status get_status ();
	string get_transaction_name ();
	void set_timeout (in unsigned long seconds);

	Control get_control ();
	Control suspend ();
	void resume (in Control which) raises (InvalidControl);
    };
    
    interface TransactionFactory
    {
	Control create (in unsigned long time_out);

	Control recreate (in PropagationContext ctx);

    };

    interface Control
    {
	Terminator get_terminator () raises (Unavailable);
	Coordinator get_coordinator () raises (Unavailable);
    };

    interface Terminator
    {



	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);

	void rollback ();
    };

    interface Coordinator
    {
	Status get_status ();
	Status get_parent_status ();
	Status get_top_level_status ();
    
	boolean is_same_transaction (in Coordinator tc);
	boolean is_related_transaction (in Coordinator tc);
	boolean is_ancestor_transaction (in Coordinator tc);
	boolean is_descendant_transaction (in Coordinator tc);
	boolean is_top_level_transaction ();

	unsigned long hash_transaction ();
	unsigned long hash_top_level_tran ();


	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);





	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);



	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);




	void rollback_only () raises (Inactive);

	string get_transaction_name ();

	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);





	PropagationContext get_txcontext () raises (Unavailable);

    };

    interface RecoveryCoordinator
    {

	Status replay_completion (in Resource r) raises (NotPrepared);



    };
    
    interface Resource
    {



	Vote prepare () raises (HeuristicMixed, HeuristicHazard);

	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);




	void commit_one_phase () raises (HeuristicHazard);








	void forget ();
    };


    interface SubtransactionAwareResource : Resource
    {
	void commit_subtransaction (in Coordinator parent);
	void rollback_subtransaction ();
    };
    
    interface TransactionalObject
    {
    };



    interface Synchronization : TransactionalObject
    {
	void before_completion ();
	void after_completion (in Status s);
    };

    
};





















#pragma prefix "omg.org"



#pragma javaPackage "org.omg"


module CosActivity
{
    exception NoActivity {};
    exception ActivityPending {};
    exception InvalidToken {};
    exception InvalidState {};
    exception ActionError {};
    exception AlreadyDestroyed {};
    exception ActionNotFound {};
    exception ChildScopePending {};
    exception InvalidParentScope {};
    exception SignalSetUnknown {};
    exception SignalSetAlreadyRegistered {};
    exception SignalSetActive {};
    exception TimeoutOutOfRange {};
    exception PropertyGroupUnknown {};

// The following system exceptions are added to support the Activity
// service

//   INVALID_ACTIVITY
//   ACTIVITY_COMPLETED
//   ACTIVITY_REQUIRED

    enum Status
    {
        StatusActive,
        StatusCompleting,
        StatusCompleted,
        StatusNoActivity,
        StatusUnknown
    };

    enum CompletionStatus
    {
        CompletionStatusSuccess,
        CompletionStatusFail,
        CompletionStatusFailOnly
    };

    interface PropertyGroup
    {
        readonly attribute string property_group_name;

        void completed();
        void suspended();
        void resumed();

        void destroy() raises(AlreadyDestroyed);
    };

    struct Signal
    {
        string signal_name;
        string signal_set_name;
        any    implementation_specific_data;
    };

    struct Outcome
    {
        string outcome_name;
        any implementation_specific_data;
    };

    struct PropertyGroupIdentity
    {
        string property_group_name;
        any implementation_specific_data;
    };

    interface SignalSet   
    {
        readonly attribute string signal_set_name;

        Signal get_signal (inout boolean lastSignal);
        Outcome get_outcome () raises(SignalSetActive);

        boolean set_response (in Outcome response, out boolean nextSignal); 
        void set_completion_status (in CompletionStatus cs) 
	    raises(SignalSetActive);

        void destroy() raises(AlreadyDestroyed);
    };

    interface Action
    {
        Outcome process_signal(in Signal sig) raises(ActionError);
 
        void destroy() raises(AlreadyDestroyed);
    };
    typedef sequence<Action> ActionSeq;

    interface ActivityCoordinator
    {
        void process_signal(in string signal_set_name)
	    raises(SignalSetUnknown);

        void add_signal_set (in SignalSet signal_set)
	    raises(SignalSetAlreadyRegistered);

        void add_action(in Action act, in string signal_set_name,
                        in long priority);
        void remove_action(in Action act) raises(ActionNotFound);

        void add_actions(in ActionSeq acts, in string signal_set_name,
                         in long priority);
        void remove_actions(in ActionSeq acts) raises(ActionNotFound);

        long get_number_registered_actions(in string signal_set_name);
        ActionSeq get_actions(in string signal_set_name);

        ActivityCoordinator get_parent_coordinator ();

        Status get_status ();
        Status get_parent_status ();
        string get_activity_name ();

        boolean is_same_activity (in ActivityCoordinator ac);

        unsigned long hash_activity ();

        void destroy() raises(AlreadyDestroyed);
    };

    struct ActivityIdentity
    {
        long type;
        long timeout;
        ActivityCoordinator coord;
        sequence <octet> ctxId;
        sequence <PropertyGroupIdentity> pgCtx;
        any implementation_specific_data;
    };

    struct ActivityContext
    {
        sequence <ActivityIdentity> hierarchy;    
        any implementation_specific_data;
    };

    interface ActivityToken
    {
        ActivityContext get_context ();
        void destroy() raises(AlreadyDestroyed);
    };

    interface Current// : CORBA::Current
    {
        void begin(in long timeout) raises(InvalidState, TimeoutOutOfRange);
        Outcome complete() raises (NoActivity,
                                   ActivityPending, ChildScopePending);
        Outcome complete_with_status(in CompletionStatus cs)
	    raises (NoActivity, ActivityPending, ChildScopePending);

        void set_completion_status (in CompletionStatus cs)
	    raises (NoActivity, InvalidState);
        CompletionStatus get_completion_status () raises(NoActivity);

        void set_completion_signalset (in string signal_set_name)
	    raises (NoActivity, SignalSetUnknown, InvalidState);
        string get_completion_signalset () raises(NoActivity);

        ActivityToken suspend();
        void resume(in ActivityToken at)
	    raises (InvalidToken, InvalidParentScope);

        ActivityToken suspend_all();
        void resume_all(in ActivityToken at)
	    raises (InvalidToken, InvalidParentScope);

        Status get_status();
        string get_activity_name ();

        void set_timeout (in long seconds) raises(TimeoutOutOfRange);
        long get_timeout ();

        ActivityContext get_context();
        void recreate_context(in ActivityContext ctx);

        ActivityCoordinator get_coordinator();
        ActivityCoordinator get_parent_coordinator();

        ActivityIdentity get_identity();
        ActivityToken get_token ();

        PropertyGroup get_property_group(in string name)
	    raises(PropertyGroupUnknown);
    };
};

module CosActivityAdministration
{
    exception PropertyGroupAlreadyRegistered {}; 
    exception PropertyGroupNotRegistered {};

    interface PropertyGroupAttributes
    {
        string get_attribute (in string name);
        void set_attribute (in string name, in string value);
    };

    interface PropertyGroupManager
    {
        CosActivity::PropertyGroup create(in CosActivity::PropertyGroup parent);

        CosActivity::PropertyGroupIdentity marshal_request(in CosActivity::PropertyGroup pg);
        CosActivity::PropertyGroupIdentity marshal_response(in CosActivity::PropertyGroup pg);

        CosActivity::PropertyGroup unmarshal_request(in CosActivity::PropertyGroupIdentity mpg);
        void unmarshal_response(in CosActivity::PropertyGroupIdentity mpg,
                                in CosActivity::PropertyGroup pg);

        void destroy() raises(CosActivity::AlreadyDestroyed);
    };

    interface Current : CosActivity::Current
    {

        void register_property_group(in string property_group_name,
                                     in PropertyGroupManager manager,
                                     in PropertyGroupAttributes attributes)
	    raises(PropertyGroupAlreadyRegistered);
        void unregister_property_group(in string property_group_name)
	    raises(CosActivity::PropertyGroupUnknown);
    };
};

module CosActivityCoordination
{
    interface Current : CosActivityAdministration::Current
    {
        void broadcast(in string signal_set_name) 
	    raises(CosActivity::SignalSetUnknown,
		   CosActivity::NoActivity);

        void add_signal_set(in CosActivity::SignalSet signal_set)
	    raises(CosActivity::SignalSetAlreadyRegistered);

        void add_action(in CosActivity::Action act, in string signal_set_name,
                        in long priority);
        void remove_action(in CosActivity::Action act)
	    raises(CosActivity::ActionNotFound);

        void add_actions(in CosActivity::ActionSeq acts,
			 in string signal_set_name, in long priority);
        CosActivity::ActionSeq remove_actions(in CosActivity::ActionSeq acts) 
	    raises(CosActivity::ActionNotFound);

        long get_number_registered_actions(in string signal_set_name);
        CosActivity::ActionSeq get_actions(in string signal_set_name);
    };
};


