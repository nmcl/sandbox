/*
 * Copyright (C) 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: ActivityTokenImple.javatmpl,v 1.1 2001/07/23 13:44:50 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.Activity;

import com.arjuna.Activity.ActivityCoordinator.ActivityCoordinatorWrapper;
import com.arjuna.OrbCommon.*;
import com.arjuna.CosTransactions.*;
import com.arjuna.Activity.Signals.*;
import com.arjuna.Activity.SignalSets.*;
import com.arjuna.ArjunaOTS.*;
import org.omg.CosTransactions.*;
import org.omg.CosActivity.CompletionStatus;
import org.omg.CosActivity.*;
import org.omg.CORBA.*;
import java.util.*;
import java.lang.System;

import org.omg.CosActivity.SignalSetAlreadyRegistered;
import org.omg.CosActivity.SignalSetUnknown;
import org.omg.CosActivity.ActionNotFound;
import org.omg.CosTransactions.Unavailable;
import org.omg.CosTransactions.NotSubtransaction;
import org.omg.CORBA.BAD_PARAM;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.SystemException;
import java.util.NoSuchElementException;

/*
 * The ActivityToken is meant to encapsulate the context of activities and
 * transactions. A context may have activities and transactions arbitrarily
 * nested, and we must also cater for the fact that there may be no activities
 * involved at all! So, an ActivityToken should be capable of being used to
 * suspend and resume transactions if that is all that is associated with a
 * thread.
 */

/*
 * ActivityTokens were never intended to be remote objects, but
 * since we have to specify them in idl we cannot prevent references
 * from being shipped around. However, they won't work if that
 * happens!
 */

/*
 * We also rely upon destroy being called eventually to tidy things up.
 * Otherwise implementations will never be garbage collected!
 */

class ActivityTokenImple extends SCOPED_SKEL_(org.omg.CosActivity,ActivityToken)
{

    /*
     * From the ActivityCoordinatorWrapper we get the ActivityCoordinator
     * and any nested transactions.
     * This is always a local class and is designed accordingly.
     */

public ActivityTokenImple (ActivityCoordinatorWrapper coordinator,
			   boolean fromSuspend)
    {
	_activityContext = null;
	_valid = createContext(coordinator, fromSuspend);
	_reference = null;
	_destroyed = false;
	_current = new ActivityContextElement(coordinator, ActivityContextElement.ACTIVITY_COORDINATOR);
	_fromSuspend = fromSuspend;
    }

/*
 * This token represents only a transaction context, i.e., there are no
 * activities involved at all.
 */

public ActivityTokenImple (Control tx, boolean fromSuspend)
    {
	_activityContext = null;
	_valid = createContext(tx);
	_reference = null;
	_destroyed = false;
	_current = new ActivityContextElement(tx, ActivityContextElement.TRANSACTION);
	_fromSuspend = fromSuspend;
    }
	
public final ActivityToken getReference ()
    {
	if (_reference == null)
	{
	    READY_IMPL_(this);
	    
	    _reference = CORBA_REF_(this,org.omg.CosActivity.ActivityToken);

	    /*
	     * Only add to list if a CORBA reference is obtained from
	     * the implementation.
	     */

	    _tokens.put(_reference, this);
	}
	
	return _reference;
    }

public ActivityContext get_context () throws SystemException
    {
	if (_valid)
	    return ActivityHierarchy.getContext(_activityContext);
	else
	    throw new BAD_OPERATION();
    }
 
public synchronized void destroy () throws AlreadyDestroyed, SystemException
    {
	if (!_destroyed)
	{
	    _destroyed = true;

	    if (_reference != null)
	    {
		_tokens.remove(_reference);
		_reference = null;

		DESTROY_IMPL_(this);
	    }
	}
	else
	    throw new AlreadyDestroyed();
    }

final boolean fromSuspend ()
    {
	return _fromSuspend;
    }

final int size ()
    {
	if (_activityContext == null)
	    return 0;
	else
	    return _activityContext.size();
    }
 
final ActivityContextElement getElement (int index) throws NoSuchElementException
    {
	if (_activityContext == null)
	    throw new NoSuchElementException();
	else
	{
	    try
	    {
		ActivityContextElement e = (ActivityContextElement) _activityContext.elementAt(index);

		if (e != null)
		    return e;
		else
		    throw new NoSuchElementException();
	    }
	    catch (NoSuchElementException e1)
	    {
		throw e1;
	    }
	    catch (Exception e2)
	    {
		throw new NoSuchElementException(e2.toString());
	    }
	}
    }

final boolean isSameParentActivity (ActivityCoordinatorWrapper aw)
    {
	if (_current.isActivity())
	{
	    ActivityCoordinatorWrapper act = (ActivityCoordinatorWrapper) _current.getEntity();
	    ActivityCoordinatorWrapper parent = act.getParentCoordinator();
	    
	    if ((aw == null) && (parent == null))
		return true;
	    else
	    {
		if (parent != null)
		    return parent.equals(aw);
	    }
	}
	
	return false;
    }

final boolean isSameParentTransaction (Control cont)
    {
	Control ec = null;
	
	if (_current.isActivity())
	{
	    ActivityCoordinatorWrapper act = (ActivityCoordinatorWrapper) _current.getEntity();
	    ec = act.getEnclosingTransaction();
	}
	else
	{
	    /*
	     * To have an enclosing transaction there must be an activity.
	     */

	    return false;
	}
	    
	if ((ec == null) && (cont == null))
	    return true;
	    
	if (ec != null)
	{
	    try
	    {
		Coordinator ecCoord = ec.get_coordinator();
		Coordinator checkCoord = cont.get_coordinator();
		    
		if (ecCoord.is_same_transaction(checkCoord))
		    return true;
	    }
	    catch (Exception e)
	    {
	    }
	}
	
	return false;
    }

final boolean isSameTransaction (Control cont)
    {
	Control ec = null;
	
	if (_current.isActivity())
	{
	    ActivityCoordinatorWrapper act = (ActivityCoordinatorWrapper) _current.getEntity();
	    
	    ec = act.getEnclosingTransaction();
	}
	else
	    ec = (Control) _current.getEntity();

	if ((ec == null) && (cont == null))
	    return true;
	    
	if (ec != null)
	{
	    try
	    {
		Coordinator ecCoord = ec.get_coordinator();
		Coordinator checkCoord = cont.get_coordinator();
		    
		if (ecCoord.is_same_transaction(checkCoord))
		    return true;
	    }
	    catch (Exception e)
	    {
	    }
	}
	
	return false;
    }
 
static final ActivityTokenImple getImplementation (ActivityToken ref)
    {
	/*
	 * Should probably do is_equivalent.
	 */

	return (ActivityTokenImple) _tokens.get(ref);
    }
	 
/*
 * Create the activity hierarchy structure, containing activities and
 * transactions.
 */

private final boolean createContext (Control tx)
    {
	/*
	 * We don't have any activities, only transactions.
	 */

	if (tx == null)
	    return false;

	_activityContext = new ActivityContextStructure();
	    
	_activityContext.addElement(new ActivityContextElement(tx, ActivityContextElement.TRANSACTION));

	return true;
    }

/*
 * The first element in the context vector is the current activity or
 * transaction.
 */
 
private final boolean createContext (ActivityCoordinatorWrapper coord,
				     boolean fromSuspend)
    {
	if (coord == null)
	    return false;
	
	ActivityCoordinatorWrapper theCoordinator = coord;
	
	/*
	 * Each entry within the context will be of the following structure
	 * and order:
	 *
	 * (i)   any enclosed transaction (Control)
	 * (ii)  an ActivityCoordinator
	 * (iii) any enclosing transaction (Control)
	 *
	 * Of the above, (i) and (iii) are optional, i.e., may not exist
	 * for a given activity.
	 */

	_activityContext = new ActivityContextStructure();

	/*
	 * First deal with enclosed transactions.
	 */

	try
	{
	    if (OTS.current().get_status() == org.omg.CosTransactions.Status.StatusActive)
	    {
		Control currentTx = OTS.current().get_control();
		Control enclosedTx = getNextTransaction(theCoordinator);
		boolean finished = false;

	        _activityContext.addElement(new ActivityContextElement(currentTx, ActivityContextElement.TRANSACTION));

		while (!finished)
		{
		    try
		    {
		    	currentTx = getParentTransaction(currentTx, enclosedTx);

		        _activityContext.addElement(new ActivityContextElement(currentTx, ActivityContextElement.TRANSACTION));
		    }
		    catch (NoSuchElementException ex)
		    {
			/*
			 * No more parents.
			 */

			finished = true;
		    }
		}
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	    
	    return false;
	}

	if (fromSuspend)
	{
	    _activityContext.addElement(new ActivityContextElement(theCoordinator, ActivityContextElement.ACTIVITY_COORDINATOR));
	}
	else
	{
	    while (theCoordinator != null)
	    {
		_activityContext.addElement(new ActivityContextElement(theCoordinator, ActivityContextElement.ACTIVITY_COORDINATOR));

		Control tx = theCoordinator.getEnclosingTransaction();
		Control enclosedTx = getNextTransaction(theCoordinator.getParentCoordinator());

		if (tx != null)
		{
		    _activityContext.addElement(new ActivityContextElement(tx, ActivityContextElement.TRANSACTION));

		    boolean finished = false;
	
		    while (!finished)
		    {
			try
			{
			    tx = getParentTransaction(tx, enclosedTx);

		            _activityContext.addElement(new ActivityContextElement(tx, ActivityContextElement.TRANSACTION));
			}
			catch (NoSuchElementException ex)
			{
			    finished = true;
			}
		    }
		}

		theCoordinator = theCoordinator.getParentCoordinator();
	    }
	}

	return true;
    }

    /*
     * JTSArjuna specific way of getting the parent of a given control.
     * If we are to use another OTS implementation then this will have to
     * be re-implemented accordingly.
     */

private final Control getParentTransaction (Control tx, Control enclosedTx) throws NoSuchElementException, SystemException
    {
        com.arjuna.ArjunaOTS.ActionControl aCont = null;

	try
	{
	    aCont = SCOPED_NARROW_(com.arjuna.ArjunaOTS,ActionControl,tx);

	    if (aCont == null)
		throw new BAD_PARAM();
	}
	catch (BAD_PARAM e)
	{
	    /*
	     * Not an Arjuna transaction!
	     */

	    throw new BAD_OPERATION();
        }

	Control cont = null;

	try
	{
	    cont = aCont.getParentControl();
	}
	catch (Unavailable e1)
	{
	    throw new NoSuchElementException();
	}
	catch (SystemException e2)
	{
	    throw new BAD_OPERATION(e2.toString());
	}

	if (cont == null)  // no parent
       	    throw new NoSuchElementException();

	/*
	 * If the parent transaction is the enclosed transaction then
	 * stop.
	 * 
	 * If there is no enclosed transaction, then keep going until
	 * the root, i.e., all transactions are within this activity.
	 */

	if (enclosedTx != null)
	{
	    try
	    {
	    	Coordinator coord1 = cont.get_coordinator();
	    	Coordinator coord2 = enclosedTx.get_coordinator();

	    	if (coord1.is_same_transaction(coord2))
	    	    throw new NoSuchElementException();
	    }
	    catch (Exception e)
	    {
	    	throw new BAD_OPERATION(e.toString());
	    }
	}

	return cont;
    }

/*
 * An Activity only has an enclosing transaction set if it is different from
 * its parent's enclosing transaction (otherwise we cannot tell which
 * transaction the activity was actually within when it was created.)
 * This routine scans the activity hierarchy until it finds the next
 * non-null enclosing transaction (if any).
 */

private final Control getNextTransaction (ActivityCoordinatorWrapper aw)
    {
	if (aw != null)
	{
	    ActivityCoordinatorWrapper act = aw;

	    while ((act != null) && (act.getEnclosingTransaction() == null))
		act = act.getParentCoordinator();

	    if (act != null)
		return act.getEnclosingTransaction();
	}

	return null;
    }
	
    /*
     * Local representation of the activity hierarchy.
     */

private ActivityContextStructure _activityContext;
private boolean                  _valid;
private ActivityToken            _reference;
private boolean                  _destroyed;
private ActivityContextElement   _current;
private boolean                  _fromSuspend;

private static Hashtable _tokens = new Hashtable();
 
};
