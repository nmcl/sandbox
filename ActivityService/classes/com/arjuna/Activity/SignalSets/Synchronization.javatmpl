/*
 * Copyright (C) 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: Synchronization.javatmpl,v 1.2 2002/02/28 11:43:36 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.Activity.SignalSets;

import com.arjuna.ArjunaCommon.Common.Uid;
import com.arjuna.OrbCommon.*;
import com.arjuna.Activity.Signals.*;
import org.omg.CosActivity.CompletionStatus;
import org.omg.CosActivity.*;
import org.omg.CORBA.*;

import org.omg.CosActivity.SignalSetInactive;
import org.omg.CosActivity.SignalSetActive;
import org.omg.CosActivity.AlreadyDestroyed;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.BAD_PARAM;

public class Synchronization extends SCOPED_SKEL_(org.omg.CosActivity,SignalSet)
{

public Synchronization (java.lang.Object[] params)
    {
	_reference = null;
	_signalCount = 0;
	_active = false;
	_completed = false;
	_completionStatus = CompletionStatus.CompletionStatusFail;
	_destroyed = false;

	boolean problem = false;
	
	if (params != null)
	{
	    try
	    {
		_activityId = ((Uid) params[0]).stringForm().getBytes();
	    }
	    catch (Exception e)
	    {
		String s = new String("Unknown activity");
		
		_activityId = s.getBytes();
		problem = true;
	    }
	}
	
	if (problem)
	    _completionStatus = CompletionStatus.CompletionStatusFailOnly;
    }

public final SignalSet getReference ()
    {
	if (_reference == null)
	{
	    READY_IMPL_(this);
	    
	    _reference = CORBA_REF_(this,org.omg.CosActivity.SignalSet);
	}
	
	return _reference;
    }

public String signal_set_name () throws SystemException
    {
	return SystemDefined.Synchronization;
    }

public synchronized Signal get_signal (BooleanHolder lastSignal) throws SystemException
    {
	_active = true;
	
	if (!_completed)
	{
	    lastSignal.value = false;
	
	    switch (++_signalCount)
	    {
	    case 1:
		return PreCompletion.getSignal(_activityId, _completionStatus);
	    case 2:
		lastSignal.value = true;
		_completed = true;
		return PostCompletion.getSignal(_activityId, _completionStatus);
	    case 3:
		return null;
	    }
	}

	return null;
    }
 
/*
 * If Outcome is Failed, then ActivityCoordinator will not
 * all any other SignalSet(s).
 *
 * If an Activity Service implementation chooses to allow multiple
 * SignalSets to be called upon termination (e.g., a Synchronization
 * SignalSet that provides only the preCompletion Signal, followed by
 * an application SignalSet, followed by another Synchronization SignalSet
 * which provides the postCompletion Signal), then it is implementation
 * specific as to whether failure outcomes from prior SignalSets will
 * prevent future SignalSets from being called. However, the Synchronization
 * SignalSet should be completed regardless.
 *
 * postCompletion with outcome
 * and preCompletion
 */
 
public synchronized Outcome get_outcome () throws SignalSetActive, SystemException
    {
	if (!_completed)
	    throw new SignalSetActive();
	else
	    return null;
    }

public boolean set_response (Outcome response,
			     BooleanHolder nextSignal) throws SignalSetInactive, SystemException
    {
	if (response == null)
	    return true;
	
	/*
	 * If response indicates failure, then move on to final Signal, and
	 * force ActivityCoordinator to not call other, application
	 * specific, SignalSet(s).
	 */

	if (!_active)
	    throw new SignalSetInactive();
	
	if (response == null)
	    throw new BAD_PARAM();
	else
	{
	    /*
	     * If there is an error then don't bother sending this
	     * Action any further Signals.
	     */

	    if (response.outcome_name.equals("ActionError") ||
		response.outcome_name.equals("ActionSystemException"))
	    {
		if (!_completed)
		{
		    /*
		     * An error has occurred, so tell ActivityCoordinator
		     * to send the next Signal.
		     */

		    _completionStatus = CompletionStatus.CompletionStatusFailOnly;
		    nextSignal.value = true;

		    if (response.outcome_name.equals("ActionSystemException"))
			return false;
		    else
			return true;
		}
		else
		{
		    /*
		     * Otherwise, ignore as we have no other Signal to
		     * send, and postCompletion is the last Signal ever
		     * in an Activity's lifetime.
		     *
		     * Make sure the coordinator sends the same signal to
		     * any other Actions, though.
		     */

		    return true;
		}
	    }
	    else
	    {
		/*
		 * No error has occurred, so don't change the completion
		 * status, and allow the ActivityCoordinator to keep sending
		 * the same signal to the other Actions.
		 */

		nextSignal.value = false;

		return true;
	    }
	}
    }
 
public void set_completion_status (CompletionStatus cs) throws SystemException
    {
	_completionStatus = cs;

	/*
	 * If completion status indicates a failure, then we
	 * do not send preCompletion, only postCompletion.
	 */

	if (_completionStatus != CompletionStatus.CompletionStatusSuccess)
	    _signalCount = 1;
    }
 
public CompletionStatus get_completion_status () throws SystemException
    {
	return _completionStatus;
    }

/*
 * In case we need the reference. We don't, so ignore. But throw an
 * exception if we are used invalidly.
 */
 
public void set_activity_coordinator (ActivityCoordinator coord) throws SignalSetActive, SystemException
    {
	if (_active)
	    throw new SignalSetActive();
    }
 
public synchronized void destroy () throws AlreadyDestroyed, SystemException
    {
	if (!_destroyed)
	{
	    _destroyed = true;
	    _reference = null;
	    DESTROY_IMPL_(this);
	}
	else
	    throw new AlreadyDestroyed();
    }
 
private SignalSet        _reference;
private int              _signalCount;
private boolean          _active;
private boolean          _completed;
private CompletionStatus _completionStatus;
private boolean          _destroyed;
private byte[]           _activityId;
 
};
