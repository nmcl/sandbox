/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: Debug.n,v 1.3 1993/04/02 10:09:50 ngdp Exp $
 */

#if defined(NO_INLINES) && !defined(DEBUG_CC_)

extern Dbg_Ostream& operator<< (Dbg_Ostream&, FacilityCode);
extern Dbg_Ostream& operator<< (Dbg_Ostream&, DebugLevel);
extern Dbg_Ostream& operator<< (Dbg_Ostream&, VisibilityLevel);

#else

#ifndef NO_INLINES
#  define INLINEF inline
#else
#  define INLINEF
#endif

INLINEF Dbg_Ostream& DebugController::stream ()
{
    return *dbg_stream;
}

INLINEF int Dbg_Ostream::fac () const
{
    return dbgFac[currentNestLevel];
}

INLINEF int Dbg_Ostream::lvl () const
{
    return dbgLevel[currentNestLevel];
}

INLINEF int Dbg_Ostream::vis () const
{
    return dbgVis[currentNestLevel];
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm, FacilityCode fac )
{
    strm.set_fac(fac);
    return strm;
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm, DebugLevel lvl )
{
    strm.set_lvl(lvl);
    return strm;
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm,  VisibilityLevel vis )
{
    strm.set_vis(vis);
    return strm;
}

#ifdef INLINEF
#  undef INLINEF
#endif

#endif
