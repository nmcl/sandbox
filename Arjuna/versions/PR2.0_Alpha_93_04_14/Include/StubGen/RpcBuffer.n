/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: RpcBuffer.n,v 1.4 1993/03/22 09:38:37 ngdp Exp $
 */

#if defined(NO_INLINES) && !defined(RPCBUFFER_CC_)

#else

#ifndef NO_INLINES
#  define INLINEF inline
#else
#  define INLINEF
#endif

INLINEF const void *RpcBuffer::pointerAt ( long index ) const
{
    return ptrMapping[index];
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const char c )
{
    pack(c);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const unsigned char u_c )
{
    pack(u_c);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const short s )
{
    pack(s);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const unsigned short u_s )
{
    pack(u_s);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const int i )
{
    pack(i);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const unsigned int u_i )
{
    pack(u_i);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const long l )
{
    pack(l);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const unsigned long u_l )
{
    pack(u_l);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const float f )
{
    pack(f);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator<< ( const double d )
{
    pack(d);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( char& c )
{
    unpack(c);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( unsigned char& u_c )
{
    unpack(u_c);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( int& i )
{
    unpack(i);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( unsigned int& u_i )
{
    unpack(u_i);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( short& s )
{
    unpack(s);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( unsigned short& u_s )
{
    unpack(u_s);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( long& l )
{
    unpack(l);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( unsigned long& u_l )
{
    unpack(u_l);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( float& f )
{
    unpack(f);
    return *this;
}

INLINEF RpcBuffer& RpcBuffer::operator>> ( double& d )
{
    unpack(d);
    return *this;
}


/* Externally callable operators for some Arjuna classes */

INLINEF RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const Buffer& buff )
{
    return rpcbuff << &buff;
}

INLINEF RpcBuffer& operator<<  ( RpcBuffer& rpcbuff, const Uid& topack )
{
    return rpcbuff << &topack;
}

INLINEF RpcBuffer& operator>>  ( RpcBuffer& rpcbuff, Buffer& buff )
{
    Buffer *ptr = &buff;
    return rpcbuff >> ptr;
}

INLINEF RpcBuffer& operator>>  ( RpcBuffer& rpcbuff, ObjectState& buff )
{
    ObjectState *ptr = &buff;
    return rpcbuff >> ptr;
}

INLINEF RpcBuffer& operator>>  ( RpcBuffer& rpcbuff, Uid& topack )
{
    Uid *ptr = &topack;
    return rpcbuff >> ptr;
}

#ifdef INLINEF
#  undef INLINEF
#endif

#endif
