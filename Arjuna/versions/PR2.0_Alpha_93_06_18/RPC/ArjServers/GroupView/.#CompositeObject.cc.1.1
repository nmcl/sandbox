/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */

/*
 * $Id: CompositeObject.cc,v
 */


#ifndef BOOLEAN_H_
#  include <Common/Boolean.h>
#endif

#ifndef BUFFER_H_
#  include <Common/Buffer.h>
#endif

#ifndef COMPOBJECT_H_
#  include "CompositeObject.h"
#endif

#ifndef GROUPDATA_H_
#  include "GroupData.h"
#endif

#ifndef REPDESC_H_
#  include "RepDesc_stub.h"
#endif

#include "NameServ_stub.h"

#ifndef GROUPVIEW_H_
#  include "GroupView.h"
#endif

#ifndef REPLICALIST_H_
#  include "ReplicaList.h"
#endif

#ifndef DEBUG_H_
#  include <Common/Debug.h>
#endif


CompositeObject::CompositeObject ()
                                  : next(0)
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "CompositeObject::CompositeObject ()" << endl;
#endif

    subObject = new Uid(NIL_UID);
}

CompositeObject::CompositeObject (const Uid& u)
                                              : next(0)
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "CompositeObject::CompositeObject ( " << u << " )" << endl;
#endif

    subObject = new Uid(u);
}

CompositeObject::~CompositeObject ()
{
#ifdef DEBUG
    debug_stream << DESTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "CompositeObject::~CompositeObject ()" << endl;
#endif

    if (subObject)
        delete subObject;
}

Boolean CompositeObject::isSubObject (const Uid& u) const
{
#ifdef DEBUG
    debug_stream << DESTRUCTORS << FAC_USER1 << VIS_PRIVATE;
    debug_stream << "Boolean CompositeObject::isSubObject ( " << u << " ) const" << endl;
#endif

    Boolean found = FALSE;
    
    if (u == *subObject)
        found = TRUE;
    else
        if (next)
	    found = next->isSubObject(u);

    return found;
}

GroupData* CompositeObject::getList (const char* hostName, pid_t pID) const
{
#ifdef DEBUG
    debug_stream << DESTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "GroupData* CompositeObject::getList ( " << hostName << ", " << pID << " ) const" << endl;
#endif

    GroupData* gd = 0;
    int res = -1;
    unsigned long dummy = 0;
    
    ReplicaList* rl = ReplicaList::create(*subObject, res);
    
    if (res != 0)
	return 0;
    else
	gd = rl->getList(hostName, pID, dummy);
    
    if (next)
	*gd += *next->getList(hostName, pID);

    return gd;
}

void CompositeObject::addObject (const Uid& u)
{
#ifdef DEBUG
    debug_stream << DESTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "void CompositeObject::addObject ( " << u << " )" << endl;
#endif

    if (*subObject == u)
        return;
    else
    {
        if (next)
	    next->addObject(u);
	else
	    next = new CompositeObject(u);
    }
}

void CompositeObject::removeObject (const Uid& u)
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "void CompositeObject::removeObject ( " << u << " )" << endl;
#endif

    // deal with head of list separately

    if (next)
    {
        if (next->getSubObject() == u)
	{
	    CompositeObject* coPtr = next;
	    next = coPtr->getNext();
	    delete coPtr;
	}
	else
	    next->removeObject(u);
    }
}

const Uid& CompositeObject::getSubObject () const
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "const Uid& CompositeObject::getSubObject () const" << endl;
#endif

    return *subObject;
}

CompositeObject* CompositeObject::getNext () const
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "CompositeObject* CompositeObject::getNext () const" << endl;
#endif

    return next;
}

Boolean CompositeObject::pack (Buffer& packInto, int number) const
{
    Boolean result = TRUE;
    
    if (number == -1)
    {
	const CompositeObject* coPtr = this;
	number = 0;

	while (coPtr)
	{
	    number++;
	    coPtr = coPtr->next;
	}
	result = packInto.pack(number);
    }
    
    result = result && subObject->pack(packInto);
    if (next)
	result = result && next->pack(packInto, 0);
	
    return result;
}

Boolean CompositeObject::unpack (Buffer& unpackFrom, int number)
{
    Boolean result = TRUE;
    
    if (number == -1)
	result = unpackFrom.unpack(number);

    if (subObject == 0)
	subObject = new Uid;
    result = result && subObject->unpack(unpackFrom);
    number--;

    if (number > 0)
    {
	if (next == 0)
	    next = new CompositeObject;
	
	result = result && next->unpack(unpackFrom, number);
    }
    
    if ((number == 0) && (next))
    {
	CompositeObject *coPtr = next, *indx;
	next = 0;
	while (coPtr)
	{
	    indx = coPtr->next;
	    delete coPtr;
	    coPtr = indx;
	}
    }
    
    return result;
}

ostream& CompositeObject::print (ostream& strm) const
{
    strm << "Sub-object Uid : " << *subObject << endl;
    if (next)
        strm << *next;
    return strm;
}

ostream& operator<< (ostream& strm, const CompositeObject& co)
{
    return co.print(strm);
}

void CompositeObject::deleteAll (CompositeObject*& co)
{
#ifdef DEBUG
    debug_stream << CONSTRUCTORS << FAC_USER1 << VIS_PUBLIC;
    debug_stream << "void CompositeObject::deleteAll (CompositeObject*& co)" << endl;
#endif

    CompositeObject *coPtr = co, *indx;
    
    while (coPtr)
    {
        indx = coPtr->getNext();
	delete coPtr;
	coPtr = indx;
    }
    co = 0;
}


