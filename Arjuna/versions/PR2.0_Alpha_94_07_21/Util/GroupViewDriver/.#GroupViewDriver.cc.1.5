/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */

/*
 * $Id: GroupViewDriver.cc,v
 */


#ifndef IOSTREAM_H_
#  include <System/iostream.h>
#endif

#ifndef MEMORY_H_
#  include <System/memory.h>
#endif

#ifndef STRING_H_
#  include <System/string.h>
#endif

#ifndef UNISTD_H_
#  include <System/unistd.h>
#endif

#ifndef SYS_PARAM_H_
#  include <System/sys/param.h>
#endif

#ifndef SYS_TYPES_H_
#  include <System/sys/types.h>
#endif

#ifndef PROTOS_H_
#  include <System/protos.h>
#endif

#ifndef ATOMICA_H_
#  include <Arjuna/AtomicA.h>
#endif

#ifndef NSINTERFACE_H_
#  include <RPC/ArjServers/NSInterface.h>
#endif

#ifndef CONFIGURE_H_
#  include <Configure.h>
#endif

#ifndef DEBUG_H_
#  include <Common/Debug.h>
#endif


const int uidSize = 80; // ??
const int hostSize = 400; // ??

void getUid (ReplicaDescriptor& rd)
{
    char* u_id = new char[uidSize];
    ::memset(u_id, '\0', uidSize);

    cin >> u_id;
    Uid u(u_id);
    rd.setUid(u_id);
}

#if RPC_SYSTEM_TYPE == RPC_ANSAAction_ || RPC_SYSTEM_TYPE == RPC_ANSA_
int mainbody(int argc, char** argv)
#else
int main(int argc, char** argv)
#endif
{
    Boolean finished = FALSE;
    OutCome result = NotDone;
    Boolean done = FALSE;
    int res = -1;
    pid_t pid;
    Uid* group = 0;
    NSInterface* GV = 0;
    char myHostName[MAXHOSTNAMELEN];
    
    if (argc == 2)
    {
	if (strcmp(argv[1], "-new") == 0)
	{
	    GV = new NSInterface(done); // create new nameserver
	    
	    if (done)
		res = 0;
	}
    }
    else
    {
	GV = new NSInterface(res); // use old nameserver
    }

    cout << "\nGroupView Database Editor\n" << flush;

    if (res != 0)
    {
	cerr << "**Error while creating GroupView Database**\n" << flush;
	if (GV)
	    delete GV;
	return -1;
    }
    else
    {
	cout << "Created GroupView Database\n" << endl;
	::memset(myHostName, '\0', MAXHOSTNAMELEN);
	(void) ::gethostname(myHostName, MAXHOSTNAMELEN);
	pid = getpid();
    }

    while (!finished)
    {
	char opt;
	cout << "\n1: Inspect Database\n" << flush;
	cout << "2: Get Replica Group View\n" << flush;
	cout << "3: Create Replica Group View\n" << flush;
	cout << "4: Delete Replica Group View\n" << flush;
	cout << "5: Add Replica to Group\n" << flush;
	cout << "6: Delete Replica from Group\n" << flush;
	cout << "7: Exclude Replica\n" << flush;
	cout << "8: Include Replica\n" << flush;
	cout << "9: Recover Node" << endl;
	cout << "\nQ/q: Quit\n" << endl;
	cout << "****" << endl;

	cin >> opt;

	switch (opt)
	{
	case '1':
	{
	    ReplicaDescriptor rd(0);
	    AtomicAction A;
	    int position = 0;
	    Uid groupUID, u_id(NIL_UID);
	    long UseCount;
		
	    rd.setUid(u_id);
	    result = Done;

	    A.Begin();
	    
	    while (result == Done)
	    {
		result = ((GV->traverseDatabase(rd, groupUID, myHostName, position, pid) == TRUE) ? Done : NotDone);
		result = GV->releaseGroup(groupUID, myHostName, pid);
		UseCount = GV->getUseCount(groupUID);

		if (position == -1)
		{
		    cout << "\nEnd of database reached\n" << flush;
		    if (A.End() != COMMITTED)
			cerr << "**An error has occurred while committing action**\n" << flush;
		    break;
		}

		if (result != Done)
		{
		    cerr << "**An error has occurred while traversing the database**\n" << flush;
		    A.Abort();
		    break;
		}

		cout << "\n****\nEntry " << position << "\n" << flush;
		cout << "Replica group UID " << groupUID << " with the following members:\n" << endl;

		cout << rd;

		cout << "Use count is : " << UseCount << endl;
	    }
	}
	break;
	case '2':
	{
	    cout << "Give UID of group view to inspect\n" << flush;

	    long UseCount;
	    Uid old;
	    ReplicaDescriptor rd(0);
	    getUid(rd);
	    old = *rd.getUid();

	    cout << "Scanning for " << old << "\n" << endl;

	    AtomicAction A;

	    A.Begin();
	    
	    result = ((GV->getView(rd, old, myHostName, pid) == TRUE) ? Done : NotDone);
	    result = GV->releaseGroup(old, myHostName, pid);
	    UseCount = GV->getUseCount(old);
	    
	    if (result != Done)
	    {
		cerr << "**An error has occurred during getView**\n" << flush;
		A.Abort();
		break;
	    }
	    else
	    {
		if (A.End() != COMMITTED)
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}

		if (result == Done)
		{
		    cout << "The replica group with UID " << old << " has the following members:\n" << endl;

		    cout << rd;

		    cout << "Use count is : " << UseCount << endl;
		}
		else
		    cout << "Entry not found in database\n" << flush;
	    }
	}
	break;
        case '3':
        {
	    AtomicAction A;
	    char Name[hostSize];
	    ::memset(Name, '\0', hostSize);

	    if (group)
		delete group;

	    group = new Uid;

	    cout << "Group Uid will be " << *group << "\n" << flush;

	    cout << "Give the location of the object\n" << flush;
	    cin >> Name;
	    ReplicaDescriptor rd(Name);
	    rd.setGroupUid(*group);

	    cout << "Give the object's Uid\n" << flush;
	    getUid(rd);

	    A.Begin();

	    result = GV->addReplicas(rd, *group);
	    
	    if (result == Done)
	    {
		cout << "Added group view successfully\n" << flush;

		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error occurred while attempting to add group view**\n" << flush;
		A.Abort();
	    }
	}
	break;
        case '4':
        {
	    cout << "Give Uid of Replica Group to delete\n" << flush;

	    AtomicAction A;
	    ReplicaDescriptor rd(0);
	    Uid *uidDelete = 0, u(NIL_UID);
	    char* uidString = new char[uidSize];
	    ::memset(uidString, '\0', uidSize);

	    cin >> uidString;

	    uidDelete = new Uid(uidString);
	    rd.setUid(u);

	    A.Begin();

	    result = GV->deleteReplicas(rd, *uidDelete, TRUE);

	    delete uidDelete;

	    if (result == Done)
	    {
		cout << "Deleted group successfully\n" << flush;
		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error has occurred while attempting to delete group\n" << flush;
		A.Abort();
	    }
	}
	break;
        case '5': 
        {
	    AtomicAction A;
	    char *group_uid = new char[uidSize];
	    char Name[hostSize];

	    ::memset(group_uid, '\0', uidSize);
	    ::memset(Name, '\0', hostSize);

	    if (group)
		delete group;

	    cout << "Give Uid of Replica Group\n" << flush;
	    cin >> group_uid;

	    group = new Uid(group_uid);

	    cout << "Give the location of the object\n" << flush;
	    cin >> Name;
	    ReplicaDescriptor rd(Name);
	    rd.setGroupUid(group);

	    cout << "Give the object's Uid\n" << flush;
	    getUid(rd);

	    A.Begin();

	    result = GV->addReplicas(rd, *group);

	    if (result == Done)
	    {
		cout << "Added successfully\n" << flush;

		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error occurred while attempting to add entry**\n" << flush;
		A.Abort();
	    }
	}
	break;
        case '6':
        {
	    char *group_uid = new char[uidSize];
	    char Name[hostSize];
	    
	    ::memset(group_uid, '\0', uidSize);
	    ::memset(Name, '\0', hostSize);
	    
	    cout << "Give UID of group view to delete from\n" << flush;
	    cin >> group_uid;
	    group = new Uid(group_uid);

	    cout << "Give the location of the object to delete\n" << flush;
	    cin >> Name;
	    ReplicaDescriptor rd(Name);

	    cout << "Give the Uid of the replica to be deleted\n" << flush;
	    getUid(rd);

	    AtomicAction A;

	    A.Begin();

	    result = GV->deleteReplicas(rd, *group);

	    if (result == Done)
	    {
		cout << "Deleted entry successfully\n" << flush;
		    
		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error occurred while deleting entry**\n" << flush;
		A.Abort();
	    }
	}
	break;
        case '7':
        {
	    cout << "Give UID of group to exclude replica from\n" << flush;

	    char Name[hostSize];
	    ::memset(Name, '\0', hostSize);
	    Uid *ud;
	    ReplicaDescriptor rd(0);
	    getUid(rd);

	    ud = new Uid(NIL_UID);
	    *ud = *rd.getUid();

	    cout << "Give the UID of the object to exclude\n" << flush;
	    getUid(rd);

	    cout << "Give the location of the object to exclude\n" << flush;
	    cin >> Name;
	    rd.setHost(Name);
	    
	    AtomicAction A;

	    A.Begin();

	    rd.setActive(FALSE);
	    result = GV->exclude(rd, *ud);

	    if (result == Done)
	    {
		cout << "Excluded entry successfully\n" << flush;

		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error occurred while excluding**\n" << flush;
		A.Abort();
	    }
	}
	break;
        case '8':
        {
	    cout << "Give UID of group to include replica in\n" << flush;

	    char Name[hostSize];
	    ::memset(Name, '\0', hostSize);
	    Uid *ud;
	    ReplicaDescriptor rd(0);
	    getUid(rd);
	    
	    ud = new Uid(NIL_UID);
	    *ud = *rd.getUid();

	    cout << "Give the UID of the object to include\n" << flush;
	    getUid(rd);

	    cout << "Give the location of the object to include\n" << flush;
	    cin >> Name;
	    rd.setHost(Name);
	    
	    AtomicAction A;
	    
	    A.Begin();

	    rd.setActive(TRUE);
	    result = GV->include(rd, *ud);

	    if (result == Done)
	    {
		cout << "Included entry successfully\n" << flush;

		if (A.End() == COMMITTED)
		    break;
		else
		{
		    cerr << "**An error has occurred while committing the action**\n" << flush;
		    break;
		}
	    }
	    else
	    {
		cerr << "**An error occurred while including**\n" << flush;
		A.Abort();
	    }
	}
	break;
	case '9':
        {
	    OutCome result;
	    AtomicAction A;
	    char Name[hostSize];
	    ::memset(Name, '\0', hostSize);

	    cout << "What is the name of the recovering node?" << endl;
	    cin >> Name;
	    
	    A.Begin();
	    
	    result = GV->recover(Name);
	    
	    if (result == Done)
	    {
		if (A.End() != COMMITTED)
		    cerr << "**An error occurred while trying to commit action**" << endl;
		else
		    cout << "Operation performed successfully" << endl;
		
		break;
	    }
	    else
	    {
		A.Abort();
		cerr << "**An error occurred during the action**" << endl;
	    }
	}
	break;
        case 'Q':
	case 'q':
	finished = TRUE;
	break;
        default:
	break; }
    }

    if (GV)
	delete GV;

    return 0;
}
