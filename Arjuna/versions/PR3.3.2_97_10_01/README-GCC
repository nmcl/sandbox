/*
 * Copyright (C) 1994
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 *	
 * $Id: README-GCC,v 1.4 1996/03/04 14:36:08 ngdp Exp $
 */

We  recommend that if  you use gcc (g++) you  also use  flex and bison
instead of lex  and yacc.   This is  especially true on  Sun's running
SunOS 4.* where lex and yacc generate old  style C functions which gcc
cannot  handle.  These problems can   be fixed  by  editing the system
prototype files  in /usr/lib/ncform and /usr/lib/yacc/yaccpar  but use
of flex and bison obviates the need to change these files.

GCC like most  compilers has certain  bugs that the Arjuna system hits
at  various times. We have  attempted to compensate  for these bugs as
much as possible   in  our code  but  some have   impact at the   user
level. The bugs that impact Arjuna are specific to various versions of
GCC and are described below:

GCC-2.3.3:	
	GCC_ARRAY_DELETE_BUG :   The following    code causes  gcc  to
reference  the locations prior to the  start of the allocated block of
memory:

	char *p = new char[20];
	delete [] p;

depending upon machine this may cause a core dump. We have compensated
for  this  in our code but   users  should be  aware  of  the possible
problems.

	GCC_NESTED_TYPE_BUG : This version of  gcc has various bugs in
its handling of nested types. We believe we  have compensated for them
all in our code.
	
	
GCC-2.4.5:
	GCC_ARRAY_DELETE_BUG : As above

GCC-2.5.8:
	GCC_LINK_BUG :  Version 2.5.* of gcc  has a very problematical
bug that  fundamentally  affects the  linking  of Arjuna applications.
Consider this code:

	class X { virtual ~X(); };

	main () {}

Even though NO instances of  X are ever  created gcc insists that  the
code for the destructor is linked  into the executable. In Arjuna this
affects ALL applications since  the stub generator effectively creates
a header file containing:

	class RemoteX { virtual ~RemoteX(); };
	class LocalX { virtual ~LocalX(); };

for an  original  class X. Thus client  side  code  which  only really
references instances of RemoteX has to be linked with some server code
to resolve the unnecessary references to  LocalX. Similarly the server
code has to be linked  with parts of the client   code. The effect  is
that the resulting executables are far bigger than they need to be.

GCC-2.6.0:
	GCC_LINK_BUG: As for   version  2.5.* UNLESS  the  new  option
-fvtable-thunks is  used in which  case 2.6.0  behaves correctly. Note
that compiling  Arjuna with this option requires  a version  of libg++
also  compiled the same way otherwise  all applications will core dump
as soon as they try to do I/O.

GCC-2.7.0:
	MEMFNS_IN_STRING_H:   This version  of    gcc has  the  memcpy
etc. function prototypes in string.h. Furthermore the defintions there
conflict with those in memory.h. This attempts to compensate for this.
