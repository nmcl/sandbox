/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef LOCKMAN_STUB_H_
#define LOCKMAN_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;


#include <System/sys/types.h>

#include <System/sys/ipc.h>

#include <Arjuna/StateMan_stub.h>

#include <Arjuna/Lock_stub.h>
/* @AutoMarshall */ 
enum LockResult {GRANTED, REFUSED};

#ifndef STUB
extern RpcBuffer& operator<< ( RpcBuffer&, LockResult* );
extern RpcBuffer& operator>> ( RpcBuffer&, LockResult& );
extern RpcBuffer& operator>> ( RpcBuffer&, LockResult*&);
#endif
/* @AutoMarshall */ 
enum ConflictType {CONFLICT, COMPATIBLE, PRESENT};

#ifndef STUB
extern RpcBuffer& operator<< ( RpcBuffer&, ConflictType* );
extern RpcBuffer& operator>> ( RpcBuffer&, ConflictType& );
extern RpcBuffer& operator>> ( RpcBuffer&, ConflictType*&);
#endif
/* @NoRemote */ class LockList ;
/* @NoRemote */ class LockStore ;
/* @NoRemote */ class Semaphore ;
class LockDaemon ;

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const LockDaemon *);
extern RpcBuffer& operator>> ( RpcBuffer&, LockDaemon *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const LockDaemon& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, LockDaemon& tounpack);
#endif

#include "LockManager_stubclass.h"

#endif  /* LOCKMAN_STUB_H_ */
