/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ServerRpc.h>

#define STATEMANAGER_SERVER

#include "StateMan_stub.h"

ServerStateManager::ServerStateManager () : theRealObject(0),_constructArgs_(),_constructOpcode_(0),_constructRefCount_(0),_constructResult_()
{}

ServerStateManager::~ServerStateManager ()
{
}

void ServerStateManager::serve ( int argc, char **argv )
{
ServerRpc ServerRPC;
Int32 opcode, errcode;

ServerRPC.initialise(argc, argv);

for (;;)
{
RpcBuffer work;
RpcBuffer result;

ServerRPC.getWork(opcode, work);
errcode = dispatchToClass(theRealObject, opcode, work, result);
ServerRPC.sendResult(errcode, result);
}
}

Int32 ServerStateManager::dispatchToClass ( LocalStateManager * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
Int32 classCode;

work >> classCode;

switch (classCode)
{
case -1:
return dispatchToOper(theObject, funcCode, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerStateManager::dispatchToOper ( LocalStateManager * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
switch (funcCode)
{
case 90364694:
return get_uid90364694(theObject, work, result);
case 245110518:
return type245110518(theObject, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerStateManager::get_uid90364694 (LocalStateManager * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;

Uid _returnedValue_ = _theObject_->get_uid();
_rvBuffer_ << _returnedValue_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
return _errCode_;
}




Int32 ServerStateManager::type245110518 (LocalStateManager * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;

const TypeName _returnedValue_ = _theObject_->type();
_rvBuffer_ << _returnedValue_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
return _errCode_;
}


