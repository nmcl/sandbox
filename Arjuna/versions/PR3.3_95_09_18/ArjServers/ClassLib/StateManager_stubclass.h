/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef STUB
#include <StubGen/RpcBuffer.h>
#include <StubGen/ClientRpcMan.h>


#ifndef STATEMANAGER_SERVER
#undef StateManager
#define StateManager RemoteStateManager
#endif

class RemoteStateManager
{
public:
	Uid get_uid ( ) const ;
	virtual Boolean restore_state ( ObjectState& , ObjectType ) = 0;
	virtual Boolean save_state ( ObjectState& , ObjectType ) = 0;
	virtual const TypeName type ( ) const ;
protected:
	RemoteStateManager(const ClientRpcManager&, const RpcBuffer&);
	virtual ~RemoteStateManager ( );
private:
	ClientRpcManager _clientManager;
	RpcBuffer _myHashVal;
}
;


#ifdef STATEMANAGER_SERVER
#undef StateManager
#define StateManager LocalStateManager
#endif

class LocalStateManager;

class ServerStateManager
{

public:
	ServerStateManager ();
	~ServerStateManager ();

	void serve (int, char **);
	Int32 dispatchToClass (LocalStateManager*, Int32, RpcBuffer&, RpcBuffer&);

private:
	Int32 dispatchToOper (LocalStateManager *,Int32, RpcBuffer&, RpcBuffer&);

	Int32 get_uid90364694(LocalStateManager *, RpcBuffer&, RpcBuffer&);
	Int32 restore_state145694373(LocalStateManager *, RpcBuffer&, RpcBuffer&);
	Int32 save_state74579749(LocalStateManager *, RpcBuffer&, RpcBuffer&);
	Int32 type245110518(LocalStateManager *, RpcBuffer&, RpcBuffer&);

	LocalStateManager *theRealObject;
	RpcBuffer _constructArgs_;
	Int32 _constructOpcode_;
	Int32 _constructRefCount_;
	RpcBuffer _constructResult_;
};
#endif


#ifdef STUB
#  define LocalStateManager StateManager
#endif

/* @Remote, @NoMarshall */ class LocalStateManager
{
public:
	/* @NoRemote @NoMarshall */ Boolean activate ( const char*  = 0);
	/* @NoRemote @NoMarshall */ Boolean deactivate ( const char*  = 0, Boolean  = true);
	/* @NoRemote @NoMarshall */ Boolean resetState ( ObjectStatus );
	/* @NoRemote @NoMarshall */ ObjectStatus status ( ) const ;
	/* @NoRemote @NoMarshall */ void* operator new ( size_t );
	/* @NoRemote @NoMarshall */ void operator delete ( void* );
	/* @NoMarshall */ Uid get_uid ( ) const ;
	/* @NoRemote @NoMarshall */ ErrorList& getErrorList ( );
	/* @NoRemote @NoMarshall */ void clearErrorList ( );
	/* @NoRemote @NoMarshall */ virtual void destroy ( );
	/* @NoRemote @NoMarshall */ virtual void disable ( );
	/* @NoRemote @NoMarshall */ virtual ostream& print ( ostream& ) const ;
	/* @NoRemote @NoMarshall */ const char* getStoreRoot ( ) const ;
	/* @NoMarshall */ virtual Boolean restore_state ( ObjectState& , ObjectType ) = 0;
	/* @NoMarshall */ virtual Boolean save_state ( ObjectState& , ObjectType ) = 0;
	/* @NoMarshall */ virtual const TypeName type ( ) const ;
protected:
	/* @NoMarshall */ LocalStateManager ( ObjectType  = RECOVERABLE, Boolean  = false);
	/* @NoMarshall */ LocalStateManager ( const Uid& , ObjectType  = ANDPERSISTENT);
	/* @NoMarshall */ virtual ~LocalStateManager ( );
	/* @NoMarshall */ virtual void terminate ( );
	/* @NoMarshall */ Boolean addError ( Error* );
	/* @NoMarshall */ virtual Boolean hasRemoteState ( ) const ;
	/* @NoMarshall */ virtual Boolean useStoreLocation ( ) const ;
	/* @NoMarshall */ void setStoreInformation ( char** , int );
	/* @NoMarshall */ void modified ( );
	/* @NoMarshall */ void persist ( );
	/* @NoMarshall */ void setupStore ( const char*  = 0);
private:
	/* @NoMarshall */ void cleanup ( Boolean  = true);
	/* @NoMarshall */ void resetStore ( );
	Boolean activated;
	ObjectStatus currentStatus;
	ObjectType myType;
	ObjectStore* objectStore;
	char* storeRoot;
	const Uid objectUid;
	Boolean shareable;
	Uid usingAction;
	Boolean currentRemoteState;
	char** locationsOfStores;
	int storeNumbers;
	ErrorList lastError;
};

