/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ServerRpc.h>

#define NAMESERVER_SERVER

#include "NameServ_stub.h"

ServerNameServer::ServerNameServer () : theRealObject(0),_constructArgs_(),_constructOpcode_(0),_constructRefCount_(0),_constructResult_()
{}

ServerNameServer::~ServerNameServer ()
{
}

void ServerNameServer::serve ( int argc, char **argv )
{
ServerRpc ServerRPC;
Int32 opcode, errcode;

ServerRPC.initialise(argc, argv);

for (;;)
{
RpcBuffer work;
RpcBuffer result;

ServerRPC.getWork(opcode, work);
errcode = dispatchToClass(theRealObject, opcode, work, result);
ServerRPC.sendResult(errcode, result);
}
}

Int32 ServerNameServer::dispatchToClass ( LocalNameServer * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
Int32 classCode;

work >> classCode;

switch (classCode)
{
case -1:
return dispatchToOper(theObject, funcCode, work, result);
case 53946306:
return ServerLockManager::dispatchToClass(theObject, funcCode, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerNameServer::dispatchToOper ( LocalNameServer * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
switch (funcCode)
{
case 200632073:
return NameServer200632073(theObject, work, result);
case 238333945:
return NameServer238333945(theObject, work, result);
case 177161750:
return NameServer177161750(theObject, work, result);
case 189166844:
return getView189166844(theObject, work, result);
case 81205148:
return lockGroup81205148(theObject, work, result);
case 130535164:
return getUseCount130535164(theObject, work, result);
case 119504620:
return traverseDatabase119504620(theObject, work, result);
case 222535708:
return addReplicas222535708(theObject, work, result);
case 232059006:
return deleteReplicas232059006(theObject, work, result);
case 175794844:
return alterLocation175794844(theObject, work, result);
case 15081196:
return exclude15081196(theObject, work, result);
case 15073868:
return include15073868(theObject, work, result);
case 109857964:
return releaseGroup109857964(theObject, work, result);
case 75444940:
return groupAssociation75444940(theObject, work, result);
case 42677660:
return recover42677660(theObject, work, result);
case 262775036:
return testAndSet262775036(theObject, work, result);
case 82735980:
return needsUpdating82735980(theObject, work, result);
case 131495436:
return getNodeUpdateList131495436(theObject, work, result);
case 230028300:
return getGroupViewState230028300(theObject, work, result);
case 49971337:
return imposeNewGroupViewState49971337(theObject, work, result);
case 150067804:
return getReplicaState150067804(theObject, work, result);
case 229743500:
return imposeReplicaState229743500(theObject, work, result);
case 57558620:
return addTemplate57558620(theObject, work, result);
case 150841692:
return getTemplate150841692(theObject, work, result);
case 54505916:
return deleteTemplate54505916(theObject, work, result);
case 52922652:
return replaceTemplate52922652(theObject, work, result);
case 176394412:
return assignCompositeObject176394412(theObject, work, result);
case 57978364:
return assignCompositeObject57978364(theObject, work, result);
case 55701260:
return removeCompositeObject55701260(theObject, work, result);
case 17515596:
return removeCompositeObject17515596(theObject, work, result);
case 139252988:
return storeName139252988(theObject, work, result);
case 32268428:
return fetchName32268428(theObject, work, result);
case 234338428:
return removeName234338428(theObject, work, result);
case 14100364:
return replaceName14100364(theObject, work, result);
case 264496828:
return getNextName264496828(theObject, work, result);
case 20145801:
return reset20145801(theObject, work, result);
case 173681173:
return save_state173681173(theObject, work, result);
case 165059637:
return restore_state165059637(theObject, work, result);
case 152344342:
return type152344342(theObject, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerNameServer::NameServer200632073 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
int _constructedHere_ = 0;
RpcBuffer _savedArgs_ = _work_;
int* Par_0_ = 0;
_work_ >> Par_0_;
if (_work_.readState() == BUFFER_GOOD)
{
if ((_constructRefCount_ > 0) && ((_constructOpcode_ != 200632073) || (_constructArgs_ != _savedArgs_)))
_errCode_ = ALREADY_CONSTRUCTED;
else
{
if (_constructRefCount_ > 0)
{
_result_ = _constructResult_;
}
else
{
_constructedHere_ = 1;
theRealObject = new LocalNameServer(*Par_0_);
}
}
if (_constructedHere_)
{
_result_ << Par_0_;
}
if (_errCode_ == OPER_INVOKED_OK)
{
_constructRefCount_++;
if (_constructRefCount_ == 1)
{
_constructResult_ = _result_;
_constructArgs_ = _savedArgs_;
_constructOpcode_ = 200632073;
}
}
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerNameServer::NameServer238333945 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
int _constructedHere_ = 0;
RpcBuffer _savedArgs_ = _work_;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
int* Par_1_ = 0;
_work_ >> Par_1_;
if (_work_.readState() == BUFFER_GOOD)
{
if ((_constructRefCount_ > 0) && ((_constructOpcode_ != 238333945) || (_constructArgs_ != _savedArgs_)))
_errCode_ = ALREADY_CONSTRUCTED;
else
{
if (_constructRefCount_ > 0)
{
_result_ = _constructResult_;
}
else
{
_constructedHere_ = 1;
theRealObject = new LocalNameServer(*Par_0_, *Par_1_);
}
}
if (_constructedHere_)
{
_result_ << Par_1_;
}
if (_errCode_ == OPER_INVOKED_OK)
{
_constructRefCount_++;
if (_constructRefCount_ == 1)
{
_constructResult_ = _result_;
_constructArgs_ = _savedArgs_;
_constructOpcode_ = 238333945;
}
}
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
return _errCode_;
}


Int32 ServerNameServer::NameServer177161750 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;

if (--_constructRefCount_ == 0)
{
delete _theObject_;
_theObject_ = 0;
theRealObject = 0;
_constructOpcode_ = 0;
}

return _errCode_;
}


Int32 ServerNameServer::getView189166844 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->getView(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::lockGroup81205148 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
int Par_2_ = -1;
_work_ >> Par_2_;
unsigned  int Par_3_ = 0;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->lockGroup(*Par_0_, Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::getUseCount130535164 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
long* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
unsigned long* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->getUseCount(*Par_0_, *Par_1_, *Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerNameServer::traverseDatabase119504620 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int Par_4_ = -1;
_work_ >> Par_4_;
int* Par_5_ = 0;
_work_ >> Par_5_;
unsigned long* Par_6_ = 0;
_work_ >> Par_6_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->traverseDatabase(*Par_0_, *Par_1_, *Par_2_, Par_3_, Par_4_, *Par_5_, *Par_6_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_5_;
_result_ << Par_6_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
if(_work_.shouldPack(Par_6_))
delete Par_6_;
return _errCode_;
}


Int32 ServerNameServer::addReplicas222535708 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->addReplicas(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::deleteReplicas232059006 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
ReplicaDescriptor* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
bool* Par_6_ = 0;
_work_ >> Par_6_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->deleteReplicas(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_, *Par_6_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
if(_work_.shouldPack(Par_6_))
delete Par_6_;
return _errCode_;
}


Int32 ServerNameServer::alterLocation175794844 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int Par_4_ = -1;
_work_ >> Par_4_;
int* Par_5_ = 0;
_work_ >> Par_5_;
unsigned long* Par_6_ = 0;
_work_ >> Par_6_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->alterLocation(*Par_0_, *Par_1_, Par_2_, Par_3_, Par_4_, *Par_5_, *Par_6_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_5_;
_result_ << Par_6_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
if(_work_.shouldPack(Par_6_))
delete Par_6_;
return _errCode_;
}


Int32 ServerNameServer::exclude15081196 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->exclude(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::include15073868 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->include(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::releaseGroup109857964 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
int Par_2_ = -1;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->releaseGroup(*Par_0_, Par_1_, Par_2_, *Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::groupAssociation75444940 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
unsigned long* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->groupAssociation(*Par_0_, *Par_1_, *Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerNameServer::recover42677660 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
char* Par_0_ = 0;
_work_ >> Par_0_;
int* Par_1_ = 0;
_work_ >> Par_1_;
unsigned long* Par_2_ = 0;
_work_ >> Par_2_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->recover(Par_0_, *Par_1_, *Par_2_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
return _errCode_;
}


Int32 ServerNameServer::testAndSet262775036 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->testAndSet(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::needsUpdating82735980 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
bool* Par_1_ = 0;
_work_ >> Par_1_;
ReplicaDescriptor* Par_2_ = 0;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int Par_4_ = -1;
_work_ >> Par_4_;
int* Par_5_ = 0;
_work_ >> Par_5_;
unsigned long* Par_6_ = 0;
_work_ >> Par_6_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->needsUpdating(*Par_0_, *Par_1_, *Par_2_, Par_3_, Par_4_, *Par_5_, *Par_6_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_5_;
_result_ << Par_6_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
if(_work_.shouldPack(Par_6_))
delete Par_6_;
return _errCode_;
}


Int32 ServerNameServer::getNodeUpdateList131495436 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ReplicaDescriptor* Par_0_ = 0;
_work_ >> Par_0_;
ReplicaDescriptor* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->getNodeUpdateList(*Par_0_, *Par_1_, Par_2_, *Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_1_;
_result_ << Par_3_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::getGroupViewState230028300 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ObjectState* Par_0_ = 0;
_work_ >> Par_0_;
int* Par_1_ = 0;
_work_ >> Par_1_;
unsigned long* Par_2_ = 0;
_work_ >> Par_2_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->getGroupViewState(*Par_0_, *Par_1_, *Par_2_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_1_;
_result_ << Par_2_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
return _errCode_;
}


Int32 ServerNameServer::imposeNewGroupViewState49971337 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ObjectState* Par_0_ = 0;
_work_ >> Par_0_;
int* Par_1_ = 0;
_work_ >> Par_1_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->imposeNewGroupViewState(*Par_0_, *Par_1_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
_result_ << Par_1_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
return _errCode_;
}


Int32 ServerNameServer::getReplicaState150067804 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
ObjectState* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
unsigned long* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->getReplicaState(*Par_0_, *Par_1_, *Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerNameServer::imposeReplicaState229743500 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
ObjectState* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
unsigned long* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->imposeReplicaState(*Par_0_, *Par_1_, *Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerNameServer::addTemplate57558620 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Buffer* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->addTemplate(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::getTemplate150841692 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Buffer* Par_1_ = 0;
_work_ >> Par_1_;
unsigned  int Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->getTemplate(*Par_0_, *Par_1_, Par_2_, *Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_3_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::deleteTemplate54505916 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
int Par_2_ = -1;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->deleteTemplate(*Par_0_, Par_1_, Par_2_, *Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::replaceTemplate52922652 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Buffer* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->replaceTemplate(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::assignCompositeObject176394412 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->assignCompositeObject(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::assignCompositeObject57978364 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
ReplicaDescriptor* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->assignCompositeObject(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::removeCompositeObject55701260 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->removeCompositeObject(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::removeCompositeObject17515596 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
ReplicaDescriptor* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int Par_3_ = -1;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
unsigned long* Par_5_ = 0;
_work_ >> Par_5_;
if (_work_.readState() == BUFFER_GOOD)
{
OutCome _returnedValue_ = _theObject_->removeCompositeObject(*Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_, *Par_5_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
_result_ << Par_5_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
if(_work_.shouldPack(Par_5_))
delete Par_5_;
return _errCode_;
}


Int32 ServerNameServer::storeName139252988 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
bool* Par_0_ = 0;
_work_ >> Par_0_;
Buffer Par_1_;
_work_ >> Par_1_;
Buffer Par_2_;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->storeName(*Par_0_, Par_1_, Par_2_, *Par_3_, *Par_4_);
_result_ << Par_0_;
_result_ << Par_3_;
_result_ << Par_4_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::fetchName32268428 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
bool* Par_0_ = 0;
_work_ >> Par_0_;
Buffer Par_1_;
_work_ >> Par_1_;
Buffer* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->fetchName(*Par_0_, Par_1_, *Par_2_, *Par_3_, *Par_4_);
_result_ << Par_0_;
_result_ << Par_2_;
_result_ << Par_3_;
_result_ << Par_4_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::removeName234338428 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
bool* Par_0_ = 0;
_work_ >> Par_0_;
Buffer Par_1_;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
unsigned long* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->removeName(*Par_0_, Par_1_, *Par_2_, *Par_3_);
_result_ << Par_0_;
_result_ << Par_2_;
_result_ << Par_3_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerNameServer::replaceName14100364 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
bool* Par_0_ = 0;
_work_ >> Par_0_;
Buffer Par_1_;
_work_ >> Par_1_;
Buffer Par_2_;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->replaceName(*Par_0_, Par_1_, Par_2_, *Par_3_, *Par_4_);
_result_ << Par_0_;
_result_ << Par_3_;
_result_ << Par_4_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::getNextName264496828 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
bool* Par_0_ = 0;
_work_ >> Par_0_;
Buffer* Par_1_ = 0;
_work_ >> Par_1_;
int* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
unsigned long* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->getNextName(*Par_0_, *Par_1_, *Par_2_, *Par_3_, *Par_4_);
_result_ << Par_0_;
_result_ << Par_1_;
_result_ << Par_2_;
_result_ << Par_3_;
_result_ << Par_4_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerNameServer::reset20145801 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
int* Par_0_ = 0;
_work_ >> Par_0_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->reset(*Par_0_);
_result_ << Par_0_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerNameServer::save_state173681173 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ObjectState* Par_0_ = 0;
_work_ >> Par_0_;
ObjectType Par_1_;
_work_ >> Par_1_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->save_state(*Par_0_, Par_1_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerNameServer::restore_state165059637 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
ObjectState* Par_0_ = 0;
_work_ >> Par_0_;
ObjectType Par_1_;
_work_ >> Par_1_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->restore_state(*Par_0_, Par_1_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_0_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerNameServer::type152344342 (LocalNameServer * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;

const TypeName _returnedValue_ = _theObject_->type();
_rvBuffer_ << _returnedValue_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
return _errCode_;
}


