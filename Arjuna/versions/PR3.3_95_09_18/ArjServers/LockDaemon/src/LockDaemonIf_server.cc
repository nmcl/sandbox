/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ServerRpc.h>

#define LOCKDAEMONIF_SERVER

#include "LockDaemonIf_stub.h"

ServerLockDaemonIf::ServerLockDaemonIf () : theRealObject(0),_constructArgs_(),_constructOpcode_(0),_constructRefCount_(0),_constructResult_()
{}

ServerLockDaemonIf::~ServerLockDaemonIf ()
{
}

void ServerLockDaemonIf::serve ( int argc, char **argv )
{
ServerRpc ServerRPC;
Int32 opcode, errcode;

ServerRPC.initialise(argc, argv);

for (;;)
{
RpcBuffer work;
RpcBuffer result;

ServerRPC.getWork(opcode, work);
errcode = dispatchToClass(theRealObject, opcode, work, result);
ServerRPC.sendResult(errcode, result);
}
}

Int32 ServerLockDaemonIf::dispatchToClass ( LocalLockDaemonIf * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
Int32 classCode;

work >> classCode;

switch (classCode)
{
case -1:
return dispatchToOper(theObject, funcCode, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerLockDaemonIf::dispatchToOper ( LocalLockDaemonIf * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
switch (funcCode)
{
case 3587918:
return LockDaemonIf3587918(theObject, work, result);
case 75959190:
return LockDaemonIf75959190(theObject, work, result);
case 119239758:
return propagate119239758(theObject, work, result);
case 99837102:
return releaseAll99837102(theObject, work, result);
case 59903054:
return releaselock59903054(theObject, work, result);
case 246490452:
return setlock246490452(theObject, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerLockDaemonIf::LockDaemonIf3587918 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
int _constructedHere_ = 0;
RpcBuffer _savedArgs_ = _work_;
bool* Par_0_ = 0;
_work_ >> Par_0_;
if (_work_.readState() == BUFFER_GOOD)
{
if ((_constructRefCount_ > 0) && ((_constructOpcode_ != 3587918) || (_constructArgs_ != _savedArgs_)))
_errCode_ = ALREADY_CONSTRUCTED;
else
{
if (_constructRefCount_ > 0)
{
_result_ = _constructResult_;
}
else
{
_constructedHere_ = 1;
theRealObject = new LocalLockDaemonIf(*Par_0_);
}
}
if (_constructedHere_)
{
_result_ << Par_0_;
}
if (_errCode_ == OPER_INVOKED_OK)
{
_constructRefCount_++;
if (_constructRefCount_ == 1)
{
_constructResult_ = _result_;
_constructArgs_ = _savedArgs_;
_constructOpcode_ = 3587918;
}
}
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerLockDaemonIf::LockDaemonIf75959190 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;

if (--_constructRefCount_ == 0)
{
delete _theObject_;
_theObject_ = 0;
theRealObject = 0;
_constructOpcode_ = 0;
}

return _errCode_;
}


Int32 ServerLockDaemonIf::propagate119239758 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
bool* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->propagate(*Par_0_, *Par_1_, Par_2_, *Par_3_);
_result_ << Par_3_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerLockDaemonIf::releaseAll99837102 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
bool* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->releaseAll(*Par_0_, *Par_1_, Par_2_, *Par_3_);
_result_ << Par_3_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerLockDaemonIf::releaselock59903054 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
bool* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->releaselock(*Par_0_, *Par_1_, Par_2_, *Par_3_);
_result_ << Par_3_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerLockDaemonIf::setlock246490452 (LocalLockDaemonIf * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
Lock* Par_0_ = 0;
_work_ >> Par_0_;
Uid* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
LockResult* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
_theObject_->setlock(Par_0_, *Par_1_, Par_2_, *Par_3_);
_result_ << Par_3_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


