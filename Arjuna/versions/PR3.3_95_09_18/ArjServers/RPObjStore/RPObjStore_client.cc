/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ClientRpc.h>

#include "RPObjStore_stub.h"

RemoteRPObjStore::RemoteRPObjStore ( const ClientRpcManager& manager, const RpcBuffer& phv ): _clientManager(manager), _myHashVal(phv)
{
_myHashVal << 150987733 << -1;
}

RemoteRPObjStore::RemoteRPObjStore ( int& Par_0_, ClientRpcManager *_cRpcMan_ ): _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &Par_0_;

_rpcStatus_ = _clientManager.call(206025065, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteRPObjStore::~RemoteRPObjStore ( )
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;


_rpcStatus_ = _clientManager.call(143944566, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

Boolean RemoteRPObjStore::allObjUids ( const TypeName Par_0_, ObjectState& Par_1_, int Par_2_, const char* Par_3_, int& Par_4_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << Par_0_;
_callBuffer_ << &Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << Par_3_;
_callBuffer_ << &Par_4_;

_rpcStatus_ = _clientManager.call(83651065, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
ObjectState* Par_1_Ptr = &Par_1_;
_replyBuffer_ >> Par_1_Ptr;
int* Par_4_Ptr = &Par_4_;
_replyBuffer_ >> Par_4_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

int RemoteRPObjStore::currentState ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

int _returnedValue_ = -1;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(98205641, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::commit_state ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(57052841, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::hide_state ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(59461641, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::reveal_state ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(99040153, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

ObjectState* RemoteRPObjStore::read_committed ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

ObjectState* _returnedValue_ = 0;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(158164009, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

ObjectState* RemoteRPObjStore::read_uncommitted ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

ObjectState* _returnedValue_ = 0;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(210882841, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::remove_committed ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(233220729, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::remove_uncommitted ( const Uid& Par_0_, const TypeName Par_1_, const char* Par_2_, int& Par_3_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << Par_2_;
_callBuffer_ << &Par_3_;

_rpcStatus_ = _clientManager.call(262155673, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_3_Ptr = &Par_3_;
_replyBuffer_ >> Par_3_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::write_committed ( const Uid& Par_0_, const TypeName Par_1_, const ObjectState& Par_2_, const char* Par_3_, int& Par_4_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << &Par_2_;
_callBuffer_ << Par_3_;
_callBuffer_ << &Par_4_;

_rpcStatus_ = _clientManager.call(111631529, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_4_Ptr = &Par_4_;
_replyBuffer_ >> Par_4_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteRPObjStore::write_uncommitted ( const Uid& Par_0_, const TypeName Par_1_, const ObjectState& Par_2_, const char* Par_3_, int& Par_4_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;
_callBuffer_ << &Par_2_;
_callBuffer_ << Par_3_;
_callBuffer_ << &Par_4_;

_rpcStatus_ = _clientManager.call(263892825, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
int* Par_4_Ptr = &Par_4_;
_replyBuffer_ >> Par_4_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}
