/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ServerRpc.h>

#define RPOBJSTORE_SERVER

#include "RPObjStore_stub.h"

ServerRPObjStore::ServerRPObjStore () : theRealObject(0),_constructArgs_(),_constructOpcode_(0),_constructRefCount_(0),_constructResult_()
{}

ServerRPObjStore::~ServerRPObjStore ()
{
}

void ServerRPObjStore::serve ( int argc, char **argv )
{
ServerRpc ServerRPC;
Int32 opcode, errcode;

ServerRPC.initialise(argc, argv);

for (;;)
{
RpcBuffer work;
RpcBuffer result;

ServerRPC.getWork(opcode, work);
errcode = dispatchToClass(theRealObject, opcode, work, result);
ServerRPC.sendResult(errcode, result);
}
}

Int32 ServerRPObjStore::dispatchToClass ( LocalRPObjStore * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
Int32 classCode;

work >> classCode;

switch (classCode)
{
case -1:
return dispatchToOper(theObject, funcCode, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerRPObjStore::dispatchToOper ( LocalRPObjStore * theObject, Int32 funcCode, RpcBuffer& work, RpcBuffer& result)
{
switch (funcCode)
{
case 206025065:
return RPObjStore206025065(theObject, work, result);
case 143944566:
return RPObjStore143944566(theObject, work, result);
case 83651065:
return allObjUids83651065(theObject, work, result);
case 98205641:
return currentState98205641(theObject, work, result);
case 57052841:
return commit_state57052841(theObject, work, result);
case 59461641:
return hide_state59461641(theObject, work, result);
case 99040153:
return reveal_state99040153(theObject, work, result);
case 158164009:
return read_committed158164009(theObject, work, result);
case 210882841:
return read_uncommitted210882841(theObject, work, result);
case 233220729:
return remove_committed233220729(theObject, work, result);
case 262155673:
return remove_uncommitted262155673(theObject, work, result);
case 111631529:
return write_committed111631529(theObject, work, result);
case 263892825:
return write_uncommitted263892825(theObject, work, result);
default:
return DISPATCH_ERROR;
}
}

Int32 ServerRPObjStore::RPObjStore206025065 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;
int _constructedHere_ = 0;
RpcBuffer _savedArgs_ = _work_;
int* Par_0_ = 0;
_work_ >> Par_0_;
if (_work_.readState() == BUFFER_GOOD)
{
if ((_constructRefCount_ > 0) && ((_constructOpcode_ != 206025065) || (_constructArgs_ != _savedArgs_)))
_errCode_ = ALREADY_CONSTRUCTED;
else
{
if (_constructRefCount_ > 0)
{
_result_ = _constructResult_;
}
else
{
_constructedHere_ = 1;
theRealObject = new LocalRPObjStore(*Par_0_);
}
}
if (_constructedHere_)
{
_result_ << Par_0_;
}
if (_errCode_ == OPER_INVOKED_OK)
{
_constructRefCount_++;
if (_constructRefCount_ == 1)
{
_constructResult_ = _result_;
_constructArgs_ = _savedArgs_;
_constructOpcode_ = 206025065;
}
}
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
return _errCode_;
}


Int32 ServerRPObjStore::RPObjStore143944566 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
Int32 _errCode_ = OPER_INVOKED_OK;

if (--_constructRefCount_ == 0)
{
delete _theObject_;
_theObject_ = 0;
theRealObject = 0;
_constructOpcode_ = 0;
}

return _errCode_;
}


Int32 ServerRPObjStore::allObjUids83651065 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
char* Par_0_ = 0;
_work_ >> Par_0_;
ObjectState* Par_1_ = 0;
_work_ >> Par_1_;
int Par_2_ = -1;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->allObjUids(Par_0_, *Par_1_, Par_2_, Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_1_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerRPObjStore::currentState98205641 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
int _returnedValue_ = _theObject_->currentState(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::commit_state57052841 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->commit_state(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::hide_state59461641 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->hide_state(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::reveal_state99040153 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->reveal_state(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::read_committed158164009 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
ObjectState* _returnedValue_ = _theObject_->read_committed(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
delete _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::read_uncommitted210882841 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
ObjectState* _returnedValue_ = _theObject_->read_uncommitted(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
delete _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::remove_committed233220729 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->remove_committed(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::remove_uncommitted262155673 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
char* Par_2_ = 0;
_work_ >> Par_2_;
int* Par_3_ = 0;
_work_ >> Par_3_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->remove_uncommitted(*Par_0_, Par_1_, Par_2_, *Par_3_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_3_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
return _errCode_;
}


Int32 ServerRPObjStore::write_committed111631529 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
ObjectState* Par_2_ = 0;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->write_committed(*Par_0_, Par_1_, *Par_2_, Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


Int32 ServerRPObjStore::write_uncommitted263892825 (LocalRPObjStore * _theObject_, RpcBuffer& _work_, RpcBuffer& _result_)
{
RpcBuffer _rvBuffer_;
Int32 _errCode_ = OPER_INVOKED_OK;
Uid* Par_0_ = 0;
_work_ >> Par_0_;
char* Par_1_ = 0;
_work_ >> Par_1_;
ObjectState* Par_2_ = 0;
_work_ >> Par_2_;
char* Par_3_ = 0;
_work_ >> Par_3_;
int* Par_4_ = 0;
_work_ >> Par_4_;
if (_work_.readState() == BUFFER_GOOD)
{
Boolean _returnedValue_ = _theObject_->write_uncommitted(*Par_0_, Par_1_, *Par_2_, Par_3_, *Par_4_);
_rvBuffer_ << _returnedValue_;
_result_ << Par_4_;
if (_rvBuffer_.length() > 0)
_result_ << _rvBuffer_;
}
else
_errCode_ = PARAMETER_ERROR;

_work_.rewrite();

if(_work_.shouldPack(Par_0_))
delete Par_0_;
if(_work_.shouldPack(Par_1_))
delete Par_1_;
if(_work_.shouldPack(Par_2_))
delete Par_2_;
if(_work_.shouldPack(Par_3_))
delete Par_3_;
if(_work_.shouldPack(Par_4_))
delete Par_4_;
return _errCode_;
}


