/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef LOCK_STUB_H_
#define LOCK_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;


#include <Common/CommonT.h>

#include <Common/Uid_stub.h>

#include <Arjuna/StateMan_stub.h>

#include <Arjuna/ObjState_stub.h>
/* @NoRemote */ class ostream ;
/* @NoRemote */ class RpcBuffer ;
/* @NoRemote */ class ActionHierarchy ;
typedef unsigned  int LockMode;
extern const LockMode READ;
extern const LockMode WRITE;
/* @AutoMarshall */ 
enum LockStatus {LOCKFREE, LOCKHELD, LOCKRETAINED};

#ifndef STUB
extern RpcBuffer& operator<< ( RpcBuffer&, LockStatus* );
extern RpcBuffer& operator>> ( RpcBuffer&, LockStatus& );
extern RpcBuffer& operator>> ( RpcBuffer&, LockStatus*&);
#endif
/* @NoRemote, @UserMarshall */ class Lock: public LocalStateManager
{
	friend class LockList ;
	friend class LockListI ;
public:
	/* @NoMarshall */ Lock ( );
	/* @NoMarshall */ Lock ( LockMode );
	/* @NoMarshall */ Lock ( const Uid& );
	/* @NoMarshall */ virtual ~Lock ( );
	/* @NoMarshall */ LockMode getLockMode ( ) const ;
	/* @NoMarshall */ const Uid& getCurrentOwner ( ) const ;
	/* @NoMarshall */ const ActionHierarchy& getAllOwners ( ) const ;
	/* @NoMarshall */ LockStatus getCurrentStatus ( ) const ;
	/* @NoMarshall */ void marshall ( RpcBuffer& ) const ;
	/* @NoMarshall */ void unmarshall ( RpcBuffer& );
	/* @NoMarshall */ void changeHierarchy ( const ActionHierarchy& );
	/* @NoMarshall */ void propagate ( );
	/* @NoMarshall */ virtual Boolean conflictsWith ( const Lock& ) const ;
	/* @NoMarshall */ virtual Boolean modifiesObject ( ) const ;
	/* @NoMarshall */ virtual Boolean operator == ( const Lock& ) const ;
	/* @NoMarshall */ virtual ostream& print ( ostream& ) const ;
	/* @NoMarshall */ virtual Boolean restore_state ( ObjectState& , ObjectType );
	/* @NoMarshall */ virtual Boolean save_state ( ObjectState& , ObjectType );
	/* @NoMarshall */ virtual const TypeName type ( ) const ;
private:
	/* @NoMarshall */ Lock* getLink ( ) const ;
	/* @NoMarshall */ void setLink ( Lock* );
	LockStatus currentStatus;
	Lock* nextLock;
	LockMode lMode;
	ActionHierarchy* owners;
};

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const Lock *);
extern RpcBuffer& operator>> ( RpcBuffer&, Lock *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const Lock& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, Lock& tounpack);
#endif


#include <Arjuna/Lock.n>

#endif  /* LOCK_STUB_H_ */
