/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef BUFFER_STUB_H_
#define BUFFER_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;


#include <System/stddef.h>

#include <Common/PointerMap.h>
/* @NoMarshall */ 
enum BufferState {BUFFER_GOOD, BUFFER_BAD};
/* @NoRemote */ class ostream ;
/* @NoRemote */ class RpcBuffer ;
static const size_t DEFAULT_CHUNK_SIZE = 512;
/* @NoRemote, @UserMarshall */ class Buffer
{
public:
	/* @NoMarshall */ Buffer ( size_t  = DEFAULT_CHUNK_SIZE);
	/* @NoMarshall */ Buffer ( size_t , char* , Boolean  = true, Boolean  = true);
	/* @NoMarshall */ Buffer ( const Buffer& );
	/* @NoMarshall */ virtual ~Buffer ( );
	/* @NoMarshall */ Boolean sizeup ( size_t );
	/* @NoMarshall */ const char* buffer ( ) const ;
	/* @NoMarshall */ size_t length ( ) const ;
	/* @NoMarshall */ BufferState readState ( ) const ;
	/* @NoMarshall */ void reread ( );
	/* @NoMarshall */ void rewrite ( );
	/* @NoMarshall */ Boolean setBuffer ( size_t , void* , Boolean  = true, Boolean  = true);
	/* @NoMarshall */ void setState ( BufferState );
	/* @NoMarshall */ Boolean shouldPack ( const void* , Boolean  = false, Uint32  = 0);
	/* @NoMarshall */ Boolean saveUnpackedPtr ( const void* , Int32& );
	/* @NoMarshall */ Boolean unpackPtr ( const void*& , Int32& );
	/* @NoMarshall */ Boolean pack ( bool );
	/* @NoMarshall */ Boolean pack ( char );
	/* @NoMarshall */ Boolean pack ( unsigned  char );
	/* @NoMarshall */ Boolean pack ( short );
	/* @NoMarshall */ Boolean pack ( unsigned short );
	/* @NoMarshall */ Boolean pack ( int );
	/* @NoMarshall */ Boolean pack ( unsigned  int );
	/* @NoMarshall */ Boolean pack ( long );
	/* @NoMarshall */ Boolean pack ( unsigned long );
	/* @NoMarshall */ Boolean pack ( long long );
	/* @NoMarshall */ Boolean pack ( unsigned long long );
	/* @NoMarshall */ Boolean pack ( float );
	/* @NoMarshall */ Boolean pack ( double );
	/* @NoMarshall */ Boolean packMappedString ( const char* );
	/* @NoMarshall */ Boolean packNonMappedString ( const char* );
	/* @NoMarshall */ Boolean packMappedBlock ( const void* , const size_t );
	/* @NoMarshall */ Boolean packNonMappedBlock ( const void* , const size_t );
	/* @NoMarshall */ Boolean unpack ( bool& );
	/* @NoMarshall */ Boolean unpack ( char& );
	/* @NoMarshall */ Boolean unpack ( unsigned  char& );
	/* @NoMarshall */ Boolean unpack ( int& );
	/* @NoMarshall */ Boolean unpack ( unsigned  int& );
	/* @NoMarshall */ Boolean unpack ( long& );
	/* @NoMarshall */ Boolean unpack ( unsigned long& );
	/* @NoMarshall */ Boolean unpack ( long long& );
	/* @NoMarshall */ Boolean unpack ( unsigned long long& );
	/* @NoMarshall */ Boolean unpack ( short& );
	/* @NoMarshall */ Boolean unpack ( unsigned short& );
	/* @NoMarshall */ Boolean unpack ( float& );
	/* @NoMarshall */ Boolean unpack ( double& );
	/* @NoMarshall */ Boolean unpack ( char*& );
	/* @NoMarshall */ Boolean unpack ( void*& , size_t& );
	/* @NoMarshall */ Buffer& operator = ( const Buffer& );
	/* @NoMarshall */ Buffer& operator += ( const Buffer& );
	/* @NoMarshall */ Boolean operator == ( const Buffer& ) const ;
	/* @NoMarshall */ virtual Boolean packInto ( Buffer& ) const ;
	/* @NoMarshall */ virtual Boolean unpackFrom ( Buffer& );
	/* @NoMarshall */ virtual Boolean appendUnused ( const Buffer& );
	/* @NoMarshall */ virtual void marshall ( RpcBuffer& ) const ;
	/* @NoMarshall */ virtual void unmarshall ( RpcBuffer& );
	/* @NoMarshall */ virtual ostream& print ( ostream& ) const ;
private:
	/* @NoMarshall */ void copybuff ( const Buffer& );
	/* @NoMarshall */ Boolean initBuffer ( );
	/* @NoMarshall */ Boolean pack32bits ( Uint32 );
	/* @NoMarshall */ Boolean pack64bits ( Uint64 );
	/* @NoMarshall */ Boolean packBlock ( const void* , size_t , Boolean );
	/* @NoMarshall */ Boolean unpack32bits ( Uint32& );
	/* @NoMarshall */ Boolean unpack64bits ( Uint64& );
	/* @NoMarshall */ Boolean unpackBlock ( void*& , size_t& );
	/* @NoMarshall */ Boolean realign ( char*& );
	/* @NoMarshall */ void setLength ( size_t );
	/* @NoMarshall */ Boolean writeHeader ( );
	char shortSize;
	char intSize;
	char longSize;
	char longlongSize;
	BufferState buffState;
	char* bufferEnd;
	char* bufferStart;
	int rereadOffset;
	size_t chunkSize;
	char* packPoint;
	char* unpackPoint;
	Boolean shouldDelete;
	Boolean readOnly;
	PointerMap packPointers;
	PointerMap unpackPointers;
};

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const Buffer *);
extern RpcBuffer& operator>> ( RpcBuffer&, Buffer *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const Buffer& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, Buffer& tounpack);
#endif


#include <Common/Buffer.n>

#endif  /* BUFFER_STUB_H_ */
