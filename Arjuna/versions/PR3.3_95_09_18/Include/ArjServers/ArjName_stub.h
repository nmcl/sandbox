/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef ARJNAME_STUB_H_
#define ARJNAME_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;


#include <Common/Boolean.h>

#include <Common/Uid_stub.h>

#include <Common/Buffer_stub.h>

#include <Arjuna/StateMan_stub.h>
/* @NoRemote */ class ostream ;
/* @NoRemote */ class NSInterface ;
/* @NoRemote, @UserMarshall */ class ArjunaName
{
public:
	/* @NoMarshall */ ArjunaName ( );
	/* @NoMarshall */ ArjunaName ( const char* const  );
	/* @NoMarshall */ ~ArjunaName ( );
	/* @NoMarshall */ Boolean lookUp ( );
	/* @NoMarshall */ Boolean registerName ( );
	/* @NoMarshall */ Boolean registerName ( const char* const  , const LocalStateManager& );
	/* @NoMarshall */ void setObjectName ( const char* const  );
	/* @NoMarshall */ void setObjectUid ( const Uid& );
	/* @NoMarshall */ void setServiceName ( const char* const  );
	/* @NoMarshall */ void setHostName ( const char* const  );
	/* @NoMarshall */ void setObjectStoreRoot ( const char* const  );
	/* @NoMarshall */ Boolean valid ( ) const ;
	/* @NoMarshall */ Uid getObjectUid ( ) const ;
	/* @NoMarshall */ const char* const  getObjectName ( ) const ;
	/* @NoMarshall */ const char* const  getServiceName ( ) const ;
	/* @NoMarshall */ const char* const  getHostName ( ) const ;
	/* @NoMarshall */ const char* const  getObjStoreRoot ( ) const ;
	/* @NoMarshall */ Boolean pack ( Buffer& ) const ;
	/* @NoMarshall */ Boolean unpack ( Buffer& );
	/* @NoMarshall */ void marshall ( RpcBuffer& ) const ;
	/* @NoMarshall */ void unmarshall ( RpcBuffer& );
	/* @NoMarshall */ ostream& print ( ostream& ) const ;
private:
	char* objectName;
	Uid objectUid;
	char* serviceName;
	char* hostName;
	char* OSRoot;
	NSInterface* NShandle;
	Boolean _valid;
};

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const ArjunaName *);
extern RpcBuffer& operator>> ( RpcBuffer&, ArjunaName *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const ArjunaName& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, ArjunaName& tounpack);
#endif

extern ostream& operator << ( ostream& , const ArjunaName& );

#endif  /* ARJNAME_STUB_H_ */
