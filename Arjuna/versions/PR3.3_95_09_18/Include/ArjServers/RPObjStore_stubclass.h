/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef STUB
#include <StubGen/RpcBuffer.h>
#include <StubGen/ClientRpcMan.h>


#ifndef RPOBJSTORE_SERVER
#undef RPObjStore
#define RPObjStore RemoteRPObjStore
#endif

class RemoteRPObjStore
{
public:
	RemoteRPObjStore ( int& , ClientRpcManager *_cRpcMan_ = ClientRpcManager::createInstance("RPObjStore",1));
	virtual ~RemoteRPObjStore ( );
	Boolean allObjUids ( const TypeName , ObjectState& , int , const char* , int& );
	int currentState ( const Uid& , const TypeName , const char* , int& );
	Boolean commit_state ( const Uid& , const TypeName , const char* , int& );
	Boolean hide_state ( const Uid& , const TypeName , const char* , int& );
	Boolean reveal_state ( const Uid& , const TypeName , const char* , int& );
	ObjectState* read_committed ( const Uid& , const TypeName , const char* , int& );
	ObjectState* read_uncommitted ( const Uid& , const TypeName , const char* , int& );
	Boolean remove_committed ( const Uid& , const TypeName , const char* , int& );
	Boolean remove_uncommitted ( const Uid& , const TypeName , const char* , int& );
	Boolean write_committed ( const Uid& , const TypeName , const ObjectState& , const char* , int& );
	Boolean write_uncommitted ( const Uid& , const TypeName , const ObjectState& , const char* , int& );
protected:
	RemoteRPObjStore(const ClientRpcManager&, const RpcBuffer&);
private:
	ClientRpcManager _clientManager;
	RpcBuffer _myHashVal;
}
;


#ifdef RPOBJSTORE_SERVER
#undef RPObjStore
#define RPObjStore LocalRPObjStore
#endif

class LocalRPObjStore;

class ServerRPObjStore
{

public:
	ServerRPObjStore ();
	~ServerRPObjStore ();

	void serve (int, char **);
	Int32 dispatchToClass (LocalRPObjStore*, Int32, RpcBuffer&, RpcBuffer&);

private:
	Int32 dispatchToOper (LocalRPObjStore *,Int32, RpcBuffer&, RpcBuffer&);

	Int32 RPObjStore206025065(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 RPObjStore143944566(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 allObjUids83651065(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 currentState98205641(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 commit_state57052841(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 hide_state59461641(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 reveal_state99040153(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 read_committed158164009(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 read_uncommitted210882841(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 remove_committed233220729(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 remove_uncommitted262155673(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 write_committed111631529(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);
	Int32 write_uncommitted263892825(LocalRPObjStore *, RpcBuffer&, RpcBuffer&);

	LocalRPObjStore *theRealObject;
	RpcBuffer _constructArgs_;
	Int32 _constructOpcode_;
	Int32 _constructRefCount_;
	RpcBuffer _constructResult_;
};
#endif


#ifdef STUB
#  define LocalRPObjStore RPObjStore
#endif

/* @Remote, @NoMarshall */ class LocalRPObjStore
{
public:
	/* @NoMarshall */ LocalRPObjStore ( int& );
	/* @NoMarshall */ virtual ~LocalRPObjStore ( );
	/* @NoMarshall */ Boolean allObjUids ( const TypeName , ObjectState& , int , const char* , int& );
	/* @NoMarshall */ int currentState ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean commit_state ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean hide_state ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean reveal_state ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ ObjectState* read_committed ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ ObjectState* read_uncommitted ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean remove_committed ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean remove_uncommitted ( const Uid& , const TypeName , const char* , int& );
	/* @NoMarshall */ Boolean write_committed ( const Uid& , const TypeName , const ObjectState& , const char* , int& );
	/* @NoMarshall */ Boolean write_uncommitted ( const Uid& , const TypeName , const ObjectState& , const char* , int& );
private:
	/* @NoMarshall */ ObjectStore* addToList ( const char* );
	ObjectState* buff;
	ObjectStore* currentStore;
	static StoreManagerList* headOfList;
};

