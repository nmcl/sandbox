/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef STATEMAN_STUB_H_
#define STATEMAN_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;


#include <System/stddef.h>

#include <Common/Boolean.h>

#include <Common/CommonT.h>

#include <Common/Uid_stub.h>

#include <Common/Error.h>

#include <Common/ErrorList_stub.h>

#include <ObjectStore/ObjStore.h>
/* @NoRemote */ class ObjectState ;

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const ObjectState *);
extern RpcBuffer& operator>> ( RpcBuffer&, ObjectState *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const ObjectState& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, ObjectState& tounpack);
#endif

/* @NoRemote */ class ostream ;
/* @AutoMarshall */ 
enum ObjectStatus {PASSIVE, PASSIVE_NEW, ACTIVE, ACTIVE_NEW};

#ifndef STUB
extern RpcBuffer& operator<< ( RpcBuffer&, ObjectStatus* );
extern RpcBuffer& operator>> ( RpcBuffer&, ObjectStatus& );
extern RpcBuffer& operator>> ( RpcBuffer&, ObjectStatus*&);
#endif
/* @AutoMarshall */ 
enum ObjectType {RECOVERABLE, ANDPERSISTENT, NEITHER};

#ifndef STUB
extern RpcBuffer& operator<< ( RpcBuffer&, ObjectType* );
extern RpcBuffer& operator>> ( RpcBuffer&, ObjectType& );
extern RpcBuffer& operator>> ( RpcBuffer&, ObjectType*&);
#endif
extern ostream& operator << ( ostream& , ObjectType );
extern ostream& operator << ( ostream& , ObjectStatus );
#include <Arjuna/StateManager_stubclass.h>
extern ostream& operator << ( ostream& , const StateManager& );

#endif  /* STATEMAN_STUB_H_ */
