/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.89 96/05/25 21:02:21 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
static yyconst short int yy_accept[461] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      128,  122,    6,    7,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  118,  117,  122,  122,  122,  122,
      114,  114,  122,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  122,    2,  126,  123,  126,  124,
      126,    6,    8,  126,  117,  121,  122,    3,    6,  102,
        0,  116,    0,   13,  107,   10,  103,  110,    0,    0,
      105,   93,  108,   94,  109,   92,   89,    0,  120,    5,
        4,  106,  120,  118,    0,    0,  118,  118,    0,  117,

      117,  117,   90,   12,    9,   11,   96,   99,  101,  100,
       97,  114,    0,  111,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   41,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   51,  114,  114,  114,
      114,  114,  114,  114,   17,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  112,  104,    2,    0,    0,  125,  117,
      121,    3,    0,    0,  115,    0,   91,  113,    0,  120,
        0,  120,  118,  119,  117,   95,   98,  114,  114,   15,
       25,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       49,  114,  114,  114,   53,  114,  114,  114,   56,   23,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,   78,  114,
      114,  114,  114,  114,  114,  114,  114,  114,   18,    1,
        0,    0,    0,    0,  120,  119,  119,  114,  114,  114,
       26,  114,  114,   27,  114,   29,  114,   31,  114,  114,
      114,  114,  114,  114,  114,  114,   43,   45,  114,  114,
      114,  114,   50,  114,   54,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,   75,  114,   77,  114,  114,  114,  114,
      114,   86,  114,  114,  114,  114,    0,  119,  114,  114,
      114,  114,   16,   28,   30,   32,   19,   34,  114,  114,
      114,  114,  114,  114,   46,   47,  114,  114,  114,  114,
      114,  114,   21,  114,  114,  114,  114,  114,  114,   65,
      114,  114,  114,  114,  114,  114,   76,  114,  114,   81,
      114,   83,  114,  114,  114,   88,  114,  114,  114,   20,
       14,  114,  114,  114,   39,   40,  114,   44,   48,   52,
      114,  114,   24,  114,  114,  114,   61,  114,  114,   64,
       66,   69,   71,   72,   73,  114,  114,   80,  114,  114,

      114,  114,   22,   35,  114,  114,  114,   38,  114,   55,
      114,  114,   59,  114,  114,  114,  114,  114,   79,  114,
       84,  114,   87,  114,   67,  114,   37,  114,  114,   58,
      114,   62,  114,  114,   74,   82,   85,   36,  114,  114,
      114,   57,   60,  114,  114,   68,   33,  114,  114,  114,
      114,  114,   70,   42,  114,  114,  114,  114,   63,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    1,   20,
       21,   22,   23,   24,   25,   25,   25,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   28,   28,   28,   28,
       28,   28,   28,   28,   30,   28,   28,   31,   28,   28,
        1,   32,    1,   33,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   28,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,    1,   60,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    5,    1,
        1,    6,    1,    1,    1,    7,    7,    8,    1,    1,
        1,    1,    4,    1,    9,    9,    9,   10,   10,   10,
       10,    4,    1,   10,   11,   11,    9,    9,    9,   11,
       10,   10,   10,   10,   10,   10,   12,   10,   10,   10,
       12,   10,   12,   10,   12,   10,   10,   10,   10,    1
    } ;

static yyconst short int yy_base[474] =
    {   0,
        0,  732,   58,   59,   60,   61,   85,    0,   62,   63,
      737,  739,  734,  739,  714,  141,   53,   59,  702,  712,
      136,  137,  138,   58,  160,  204,  141,  146,  711,  140,
        0,  722,  709,  695,  117,  132,  137,  145,  147,  161,
      680,  141,  679,  672,  162,  100,  144,  686,  173,  186,
       29,  159,  171,  676,  179,    0,  739,  739,  721,  739,
      707,  719,  739,  206,  224,    0,  209,    0,  718,  739,
      218,  739,  229,  739,  739,  739,  739,  739,  710,  219,
      739,  739,  739,  739,  739,  708,  739,  703,  244,  739,
      739,  739,    0,  200,  249,  263,  197,  219,    0,    0,

      238,  227,  739,  739,  739,  739,  695,  739,  739,  739,
      694,    0,  682,  739,  245,  675,  666,  658,  657,  661,
      669,  233,  672,  671,  244,  207,  651,  657,  651,  648,
      648,  655,  651,  647,  654,  643,    0,  242,  648,  641,
      647,  636,  638,  651,  655,  250,  652,  253,  639,  218,
      264,  643,  639,  257,  247,  635,  259,  640,  631,  125,
      639,  637,  628,  739,  739,    0,  676,  301,  739,  300,
        0,    0,  302,  304,  739,  310,  739,  739,  322,  739,
      306,  326,  739,  302,  739,  739,  739,  629,  633,  641,
        0,  626,  277,  628,  637,  632,  633,  618,  616,  618,

      296,  631,  626,  628,  628,  623,  615,  621,  607,  623,
        0,  618,  608,  612,    0,  613,  618,  613,    0,  617,
      599,  610,  593,  594,  601,  602,  597,  589,  591,  594,
      601,  586,  584,  584,  587,  583,  586,  594,    0,  593,
      583,  587,  582,  575,  589,  591,  590,  579,  589,  739,
      348,  341,  352,  346,  358,  298,  336,  575,  580,  581,
        0,  572,  567,    0,  573,    0,  574,    0,  563,  569,
      560,  569,  557,  557,  564,  562,    0,    0,  556,  567,
      552,  557,    0,  556,    0,  566,  549,  561,  564,  548,
      562,  557,  552,  542,  540,  541,  538,  551,  541,  545,

      550,  549,  540,    0,  528,    0,  329,  536,  541,  540,
      526,    0,  526,  527,  538,  537,  305,  739,  523,  527,
      523,  534,    0,    0,    0,    0,    0,  537,  523,  524,
      529,  528,  523,  518,    0,    0,  526,  524,  517,  512,
      510,  506,    0,  505,  520,  519,  502,  515,  506,    0,
      514,  511,  513,  496,  506,  512,    0,  507,  507,    0,
      497,    0,  508,  499,  507,    0,  490,  486,  499,    0,
        0,  500,  482,  482,    0,    0,  497,    0,    0,    0,
      487,  490,    0,  473,  476,  461,    0,  474,  460,    0,
        0,    0,  472,    0,    0,  452,  464,    0,  463,  444,

      431,  422,    0,  440,  435,  437,  432,    0,  426,    0,
      407,  391,    0,  391,  351,  352,  363,  360,    0,  359,
        0,  357,    0,  361,  360,  341,    0,  355,  352,    0,
      352,    0,  338,  353,    0,    0,    0,    0,  352,  331,
      348,    0,    0,  343,  328,    0,    0,  327,  325,  324,
      317,  325,    0,    0,  304,  279,  203,  134,    0,  739,
      403,  415,  427,  439,  445,  457,  468,  474,  486,  496,
      505,  511,  521
    } ;

static yyconst short int yy_def[474] =
    {   0,
      460,    1,  461,  461,  461,  461,  460,    7,  462,  462,
      460,  460,  460,  460,  460,  463,  460,  460,  464,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      465,  465,  460,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  460,  466,  460,  460,  467,  460,
      460,  460,  460,  463,  460,  468,  460,  469,  460,  460,
      463,  460,  470,  460,  460,  460,  460,  460,  460,  471,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,   89,   25,  460,  460,  460,  460,  472,   26,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  465,  464,  460,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  460,  460,  466,  467,  473,  460,  460,
      468,  469,  463,  463,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  472,  460,  460,  460,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  460,
      473,  463,  460,  460,  460,  460,  460,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  463,  460,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,    0,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460
    } ;

static yyconst short int yy_nxt[800] =
    {   0,
       12,   13,   14,   15,   16,   12,   17,   18,   19,   20,
       21,   12,   22,   23,   24,   25,   26,   26,   27,   28,
       29,   30,   12,   12,   31,   31,   31,   31,   32,   31,
       31,   12,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   31,   42,   31,   43,   44,   45,   46,   47,   31,
       48,   49,   50,   51,   52,   53,   54,   31,   31,   55,
       58,   58,   60,   60,   63,   63,   77,   90,   68,   61,
       61,   74,   91,   75,   76,  157,   67,   67,   92,   78,
      158,   59,   59,   59,   59,   57,   62,   63,   57,   64,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   65,   65,   57,   57,   57,   57,   57,   59,   66,
       66,   66,   66,   66,   66,   66,   57,   57,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   57,   72,   82,   87,  144,   84,
      145,   88,  105,   89,   89,   89,   83,   85,   86,  103,
      110,  111,  104,  116,  106,  107,  108,  245,  117,  246,
      118,  122,   73,   93,  119,   94,   94,   95,  123,  120,
      137,  124,  121,  126,  125,   96,  459,  138,   97,   98,
       99,  129,  127,  130,  146,  132,  141,  147,   96,  164,

      142,  159,  128,  131,   97,  133,  160,  161,  134,  143,
       72,  135,  162,   98,  149,  150,   99,   93,   90,  100,
      100,  100,   72,   91,  153,  151,  183,  154,  152,   96,
      460,   71,  101,  102,  176,  176,  155,   73,  165,  170,
      170,  170,   96,  156,  174,  174,  202,  183,  101,   73,
      183,  203,  101,  102,  458,  185,  460,  102,  230,   89,
       89,   89,   93,  183,   95,   95,   95,  185,  101,  179,
      180,  185,  180,  181,   96,  181,  231,  102,  182,  182,
      182,  188,  179,  180,  196,  197,  214,   96,  180,  200,
      201,  185,  223,  226,  215,  227,  189,  224,  232,  236,

      238,  241,  250,  250,  239,  228,   72,  237,   72,   72,
      242,  262,  250,  457,  233,  170,  170,  170,  175,  252,
      252,  182,  182,  182,  263,  253,  253,  318,  101,  102,
      256,  257,  254,   73,  254,   73,   73,  255,  255,  255,
      456,  182,  182,  182,  101,   72,  256,  271,  272,  250,
      250,  318,  180,  102,  180,  257,  317,  317,  455,  250,
      175,  255,  255,  255,  318,  180,  358,   79,   79,  454,
      180,  359,   73,  255,  255,  255,  453,  452,  451,  450,
      318,  449,  448,  447,  180,  446,  180,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  180,  435,  434,

      433,  432,  180,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   71,   71,  431,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   79,
       79,  430,   79,  429,   79,   79,   79,   79,   79,   79,
       79,  112,  112,  112,  112,  112,  112,  166,  166,  428,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  168,
      427,  426,  425,  424,  423,  422,  168,  168,  168,  168,
      171,  171,  171,  171,  171,  171,  172,  172,  421,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  173,  173,

      173,  420,  173,  419,  418,  417,  173,  173,   79,   79,
      416,   79,  415,  414,  413,   79,   79,  184,  184,  184,
      412,  184,  251,  251,  411,  410,  251,  251,  251,  251,
      251,  251,  251,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,

      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  270,  269,  268,  267,
      266,  265,  264,  261,  260,  259,  258,  167,  249,  248,
      247,  244,  243,  240,  235,  234,  229,  225,  222,  221,
      220,  219,  218,  217,  216,  213,  212,  211,  210,  209,

      208,  207,  206,  205,  204,  199,  198,  195,  194,  193,
      192,  191,  190,   80,  187,  186,  178,  177,  175,   69,
       69,  169,  167,  163,  148,  140,  139,  136,  115,  114,
      113,  109,   81,   80,   70,   69,  460,   56,   11,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460

    } ;

static yyconst short int yy_chk[800] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    5,    6,    9,   10,   18,   24,   10,    5,
        6,   17,   24,   17,   17,   51,    9,   10,   24,   18,
       51,    3,    4,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   16,   21,   23,   46,   22,
       46,   23,   28,   23,   23,   23,   21,   22,   22,   27,
       30,   30,   27,   35,   28,   28,   28,  160,   35,  160,
       35,   37,   16,   25,   36,   25,   25,   25,   37,   36,
       42,   37,   36,   38,   37,   25,  458,   42,   25,   25,
       25,   39,   38,   39,   47,   40,   45,   47,   25,   55,

       45,   52,   38,   39,   25,   40,   52,   53,   40,   45,
       64,   40,   53,   25,   49,   49,   25,   26,   67,   26,
       26,   26,   71,   67,   50,   49,   97,   50,   49,   26,
       94,   73,   26,   26,   80,   80,   50,   64,   55,   65,
       65,   65,   26,   50,   73,   73,  126,   98,   26,   71,
       97,  126,   65,   65,  457,  102,   94,   26,  150,   89,
       89,   89,   95,   98,   95,   95,   95,  101,   65,   89,
       89,  102,   89,   96,   95,   96,  150,   65,   96,   96,
       96,  115,   89,   89,  122,  122,  138,   95,   89,  125,
      125,  101,  146,  148,  138,  148,  115,  146,  151,  154,

      155,  157,  168,  168,  155,  148,  173,  154,  174,  317,
      157,  193,  168,  456,  151,  170,  170,  170,  176,  174,
      174,  181,  181,  181,  193,  176,  176,  256,  170,  170,
      184,  184,  179,  173,  179,  174,  317,  179,  179,  179,
      455,  182,  182,  182,  170,  252,  184,  201,  201,  251,
      251,  256,  182,  170,  182,  184,  252,  252,  452,  251,
      253,  254,  254,  254,  257,  182,  307,  253,  253,  451,
      182,  307,  252,  255,  255,  255,  450,  449,  448,  445,
      257,  444,  441,  440,  255,  439,  255,  434,  433,  431,
      429,  428,  426,  425,  424,  422,  420,  255,  418,  417,

      416,  415,  255,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  414,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      464,  412,  464,  411,  464,  464,  464,  464,  464,  464,
      464,  465,  465,  465,  465,  465,  465,  466,  466,  409,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      407,  406,  405,  404,  402,  401,  467,  467,  467,  467,
      468,  468,  468,  468,  468,  468,  469,  469,  400,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  470,  470,

      470,  399,  470,  397,  396,  393,  470,  470,  471,  471,
      389,  471,  388,  386,  385,  471,  471,  472,  472,  472,
      384,  472,  473,  473,  382,  381,  473,  473,  473,  473,
      473,  473,  473,  377,  374,  373,  372,  369,  368,  367,
      365,  364,  363,  361,  359,  358,  356,  355,  354,  353,
      352,  351,  349,  348,  347,  346,  345,  344,  342,  341,
      340,  339,  338,  337,  334,  333,  332,  331,  330,  329,
      328,  322,  321,  320,  319,  316,  315,  314,  313,  311,
      310,  309,  308,  305,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,

      287,  286,  284,  282,  281,  280,  279,  276,  275,  274,
      273,  272,  271,  270,  269,  267,  265,  263,  262,  260,
      259,  258,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  218,  217,  216,  214,  213,  212,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  200,  199,  198,  197,
      196,  195,  194,  192,  190,  189,  188,  167,  163,  162,
      161,  159,  158,  156,  153,  152,  149,  147,  145,  144,
      143,  142,  141,  140,  139,  136,  135,  134,  133,  132,

      131,  130,  129,  128,  127,  124,  123,  121,  120,  119,
      118,  117,  116,  113,  111,  107,   88,   86,   79,   69,
       62,   61,   59,   54,   48,   44,   43,   41,   34,   33,
       32,   29,   20,   19,   15,   13,   11,    2,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "c++21.lex.l"
#define INITIAL 0
#line 2 "c++21.lex.l"
/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: c++21.lex.l,v 1.25 1996/01/10 15:09:52 ngdp Exp $
 */

/*
 * Lexer for stub generator.
 * Uses several states:
 *  INITIAL - Normal operation while processing
 * COM,MCOM - Active only during comment processing (looking for stub commands)
 *	      Only difference is what terminates the comment
 *      DIR - Used during processing of # directives
 *    INLIN - Used during inline function collection
 *
 */

#include <stdlib.h>
#include <strstream.h>

#ifdef MEMFNS_IN_STRING_H
#  include <string.h>
#else
#  include <memory.h>
#endif

#ifndef STCOMMONT_H_
#  include "StCommonT.h"
#endif

#ifndef ERROR_H_
#  include "Error.h"
#endif

#ifndef GLOBALINF_H_
#  include "GlobalInf.h"
#endif

#ifndef STRING_H_
#  include "String.h"
#endif

#ifndef VISSPEC_H_
#  include "VisSpec.h"
#endif

#ifndef TDESC_H_
#  include "TDesc.h"
#endif

#ifndef CLASST_H_
#  include "ClassT.h"
#endif

#ifndef FUNCT_H_
#  include "FuncT.h"
#endif

#ifndef POINTERT_H_
#  include "PointerT.h"
#endif

#ifndef BASECLASS_H_
#  include "BaseClass.h"
#endif

#ifndef DECL_H_
#  include "Decl.h"
#endif

#ifndef DECLSPEC_H_
#  include "DeclSpec.h"
#endif

#include "c++21.gram.h"

/*
 * Linkage between lex & yacc
 */

String tokenText;

/*
 * Helper routines included at end of lex file
 *
 */

Boolean doDirective (const String&);
Boolean obeyDirective (const String&);
int tokenType (const String&);
int tokenPeek ();
StubModifier stubCommand (const String&);
void remember ();

/*
 * Standard 'lex' routines
 */

#ifdef FLEX_SCANNER
#  define input yyinput
#else
extern "C" void yyunput (int);
extern "C" int yywrap ();
#endif

#ifndef input
#  define input lex_input
#endif

#ifndef yyless
#ifdef INT_YYLESS
extern "C" int yyless (int);
#else
extern "C" void yyless (int);
#endif
#endif

#ifdef _AIX
extern "C" void yymbunput(int c);
extern "C" void yymbreturn(int c);
#endif

extern "C" int yylex();

extern int yylook ();
extern int yyback (int *, int);

static const char RCSid[] = "$Id: c++21.lex.l,v 1.25 1996/01/10 15:09:52 ngdp Exp $";

static Boolean collectingInlines = FALSE;

static Boolean lookahead = FALSE;
static int lookaheadToken;
/* Helper definitions for certain regular expressions */
#define COM 1
#define MCOM 2
#define DIR 3
#define INLIN 4

#line 838 "c++21.lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 161 "c++21.lex.l"


#line 995 "c++21.lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 461 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 739 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 163 "c++21.lex.l"
{
                                yylval.stubcommand = stubCommand(yytext);
				if (yylval.stubcommand == STUB_DEFAULT)
                                {
                                    ostrstream errorStream;

				    errorStream << "Illegal stub generation option: ";
				    errorStream << yytext;
				    error(errorStream);
				} else
				return STUB_CMD;
			    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 176 "c++21.lex.l"
{ 
                            String s(yytext);
                            BEGIN(DIR);
                            yyless(1);
                            if (!doDirective(s))
                            {
                                GlobalInfo::addDirective(s);
			    }
			    BEGIN(INITIAL); 
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 186 "c++21.lex.l"
{  
                            String s(yytext);
                            BEGIN(DIR);
                            yyless(1);
                            if (!doDirective(s))
                            {
                                yylval.text = new String(s);
                                return DIRECTIVE;
                            }
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 196 "c++21.lex.l"
{ BEGIN(COM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 197 "c++21.lex.l"
{ BEGIN(MCOM); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 199 "c++21.lex.l"
{ ; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 201 "c++21.lex.l"
{ GlobalInfo::newLine(); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 202 "c++21.lex.l"
{ return (int)(yytext[0]); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 205 "c++21.lex.l"
{ return '{'; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 206 "c++21.lex.l"
{ return '}'; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 207 "c++21.lex.l"
{ return '['; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 208 "c++21.lex.l"
{ return ']'; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 209 "c++21.lex.l"
{ return '#'; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 210 "c++21.lex.l"
{ return '&'; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 211 "c++21.lex.l"
{ return (ANDAND); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 212 "c++21.lex.l"
{ return '|'; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 213 "c++21.lex.l"
{ return (OROR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 214 "c++21.lex.l"
{ return '^'; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 215 "c++21.lex.l"
{ return '~'; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 216 "c++21.lex.l"
{ return (ANDEQUAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 217 "c++21.lex.l"
{ return (OREQUAL); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 218 "c++21.lex.l"
{ return (XOREQUAL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 219 "c++21.lex.l"
{ return '!'; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 220 "c++21.lex.l"
{ return (NOTEQUAL); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 222 "c++21.lex.l"
{ return (ASM); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 223 "c++21.lex.l"
{ return (AUTO); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 225 "c++21.lex.l"
{ remember (); return (BOOL_TYPE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 226 "c++21.lex.l"
{ return (BREAK); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 228 "c++21.lex.l"
{ return (CASE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 229 "c++21.lex.l"
{ return (CATCH); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 230 "c++21.lex.l"
{ remember (); return (CHAR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 231 "c++21.lex.l"
{ remember (); return (CLASS); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 232 "c++21.lex.l"
{ return (CONST_CAST); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "c++21.lex.l"
{ remember (); return (CONST); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 234 "c++21.lex.l"
{ remember ();
#ifdef __GNUG__
                            return (CONST);
#else
			    return tokenType(yytext);
#endif
                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 241 "c++21.lex.l"
{ remember ();
#ifdef __GNUG__
                            return (CONST);
#else
			    return tokenType(yytext);
#endif
                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 248 "c++21.lex.l"
{ return (CONTINUE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 250 "c++21.lex.l"
{ return (DEFAULT); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 251 "c++21.lex.l"
{ return (DELETE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 252 "c++21.lex.l"
{ remember (); return (DOUBLE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 253 "c++21.lex.l"
{ return (DO); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 254 "c++21.lex.l"
{ return (DYNAMIC_CAST); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 256 "c++21.lex.l"
{ return (ELSE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 257 "c++21.lex.l"
{ remember (); return (EXTERN); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 258 "c++21.lex.l"
{ remember (); return (ENUM); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 260 "c++21.lex.l"
{ remember (); return (BOOL_FALSE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 261 "c++21.lex.l"
{ remember (); return (FLOAT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 262 "c++21.lex.l"
{ remember (); return (FRIEND); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 263 "c++21.lex.l"
{ return (FOR); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 265 "c++21.lex.l"
{ return (GOTO); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 267 "c++21.lex.l"
{ return (IF); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 268 "c++21.lex.l"
{ remember (); return (INLINE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 269 "c++21.lex.l"
{ remember (); return (INT); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "c++21.lex.l"
{ remember (); return (LONG); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 273 "c++21.lex.l"
{ return (MUTABLE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 275 "c++21.lex.l"
{ return (NEW); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 276 "c++21.lex.l"
{ return (NAMESPACE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 278 "c++21.lex.l"
{ remember (); return (OPERATOR); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 280 "c++21.lex.l"
{ remember (); return (PRIVATE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 281 "c++21.lex.l"
{ remember (); return (PROTECTED); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 282 "c++21.lex.l"
{ remember (); return (PUBLIC); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 284 "c++21.lex.l"
{ remember (); return (REGISTER); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 285 "c++21.lex.l"
{ return (REINTERPRET_CAST); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 286 "c++21.lex.l"
{ return (RETURN); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 288 "c++21.lex.l"
{ remember (); return (SHORT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 289 "c++21.lex.l"
{ remember (); return (SIGNED); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 290 "c++21.lex.l"
{ remember ();
#ifdef __GNUG__
                            return (SIGNED);
#else
			    return tokenType(yytext);
#endif
                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 297 "c++21.lex.l"
{ remember ();
#ifdef __GNUG__
                            return (SIGNED);
#else
			    return tokenType(yytext);
#endif
                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 304 "c++21.lex.l"
{ remember (); return (SIZEOF); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 305 "c++21.lex.l"
{ return (STATIC_CAST); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 306 "c++21.lex.l"
{ remember (); return (STATIC); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 307 "c++21.lex.l"
{ remember (); return (STRUCT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 308 "c++21.lex.l"
{ return (SWITCH); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 310 "c++21.lex.l"
{ remember (); return (TEMPLATE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 311 "c++21.lex.l"
{ remember (); return (THIS); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 312 "c++21.lex.l"
{ return (THROW); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 313 "c++21.lex.l"
{ remember (); return (BOOL_TRUE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 314 "c++21.lex.l"
{ return (TRY); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 315 "c++21.lex.l"
{ remember (); return (TYPEDEF); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 316 "c++21.lex.l"
{ return (TYPEID); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 318 "c++21.lex.l"
{ remember (); return (UNION); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 319 "c++21.lex.l"
{ remember (); return (UNSIGNED); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 320 "c++21.lex.l"
{ return (USING); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 322 "c++21.lex.l"
{ remember (); return (VIRTUAL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 323 "c++21.lex.l"
{ remember (); return (VOLATILE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 324 "c++21.lex.l"
{ remember (); return (VOID); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 326 "c++21.lex.l"
{ 
			  remember (); 
#if defined(BROKEN_WCHAR_T) && !defined(HAVE_WCHAR_T)
			  return tokenType(yytext);
#else
			  return (WCHAR);
#endif
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 334 "c++21.lex.l"
{ return (WHILE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 337 "c++21.lex.l"
{ return (DOTSTAR); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 338 "c++21.lex.l"
{ return (COLONCOLON); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 339 "c++21.lex.l"
{ return (ARROWSTAR); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 340 "c++21.lex.l"
{ return (ARROW); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 342 "c++21.lex.l"
{ return (PLUSPLUS); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 343 "c++21.lex.l"
{ return (MINUSMINUS); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 344 "c++21.lex.l"
{ return (LSHIFTEQUAL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 345 "c++21.lex.l"
{ return (LSHIFT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 346 "c++21.lex.l"
{ return (RSHIFT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 347 "c++21.lex.l"
{ return (RSHIFTEQUAL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 348 "c++21.lex.l"
{ return (LESSEQUAL); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 349 "c++21.lex.l"
{ return (MOREEQUAL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 350 "c++21.lex.l"
{ return (EQUALEQUAL); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 351 "c++21.lex.l"
{ return (NOTEQUAL); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 352 "c++21.lex.l"
{ return (ANDAND); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 353 "c++21.lex.l"
{ return (OROR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 354 "c++21.lex.l"
{ return (STAREQUAL); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 355 "c++21.lex.l"
{ return (SLASHEQUAL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 356 "c++21.lex.l"
{ return (PERCENTEQUAL); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 357 "c++21.lex.l"
{ return (PLUSEQUAL); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 358 "c++21.lex.l"
{ return (MINUSEQUAL); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 361 "c++21.lex.l"
{ return (ANDEQUAL); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 362 "c++21.lex.l"
{ return (XOREQUAL); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 363 "c++21.lex.l"
{ return (OREQUAL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 364 "c++21.lex.l"
{ return (ELLIPSIS); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 366 "c++21.lex.l"
{ 
                            remember (); return tokenType(yytext);
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 370 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return CHARACTERCONSTANT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 371 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return STRING; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 373 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return INTEGERCONSTANT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 375 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return INTEGERCONSTANT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 377 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return INTEGERCONSTANT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 378 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return FLOATINGCONSTANT; } 
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 379 "c++21.lex.l"
{ remember (); yylval.text = new String(yytext); return IDENTIFIER; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 380 "c++21.lex.l"
{ return ((int) yytext[0]); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 382 "c++21.lex.l"
{ 
                           GlobalInfo::newLine();
			   if (collectingInlines)
                              BEGIN(INLIN);
			   else
			      BEGIN(INITIAL);
			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 389 "c++21.lex.l"
{ GlobalInfo::newLine(); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 390 "c++21.lex.l"
{ 
                          if (collectingInlines)
                              BEGIN(INLIN);
			   else
			      BEGIN(INITIAL);
			}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 396 "c++21.lex.l"
{}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 397 "c++21.lex.l"
ECHO;
	YY_BREAK
#line 1790 "c++21.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COM):
case YY_STATE_EOF(MCOM):
case YY_STATE_EOF(DIR):
case YY_STATE_EOF(INLIN):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 461 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 461 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 460);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p = yytext_ptr + offset;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 397 "c++21.lex.l"


Boolean doDirective ( const String& text )
{
    return obeyDirective(text);
}

/*
 * Obey a cpp generated directive. These start with a # and are typically
 * line directives or pragmas. Line directives are obeyed by changing
 * location information maintained in GlobalInfo. Pragamas are checked
 * against stub specific ones and obeyed if they are otherwise they are
 * ignored and a False result returned.
 * If a directive is obeyed a (or discarded as being illegal) a True
 * result is returned 
 * Parameter is for error reporting purposes only
 */

Boolean obeyDirective ( const String& text )
{
    register int c;
    register int token;
    ostrstream errorStream;

    /* skip to first non-whitespace character */

    token = yylex();

    if (token == '\n')
    {
	/* Empty directive - ignore */
	warning("Empty # directive (ignored)");
        unput(token);
        return TRUE;
    }

    /* check for pragmas/ident/line */

    if (token == IDENTIFIER)
    {
	/* have to do this first as it is essentially noise */
	
	if (strcmp("line", (const char *)yytext) == 0)
	{
	    /* discard saved text */

	    delete yylval.text;
	    token = yylex();
	}
    }

    switch (token)
    {
    case INTEGERCONSTANT:
	/* set line number and free up space */
	
	GlobalInfo::setCurrentLine(atol(*yylval.text)-1);
	delete yylval.text;
	
	/* see if there is a trailing filename */
	
	token = yylex();
	if (token == '\n')
	{
	    unput(token);
	    return TRUE;;
	}
	
	/* Check for DEC cxx pragma format '$' already ignored by lexer */
	
	if (token == IDENTIFIER)
	{
	    /* beware of fall through to pragma code here */
	}
	else
	{
	    if (token == STRING)
	    {
		/* more there, must be a filename */
		
		char *cptr = *yylval.text;
		cptr++;                         /* skip over double quote */
		cptr[strlen(cptr)-1] = '\0';
		
		GlobalInfo::setCurrentFile(String(cptr));
		
		delete yylval.text;
	    }
	    else
	    {
		errorStream << "Malformed #line directive"
			    << text << endl;
		
		warning(errorStream);
	    }
	    break;
	}

    case IDENTIFIER:
	/* #line taken care of above */
	
	if (strcmp("ident", (const char *)yytext) == 0)
	{
	    delete yylval.text;
	    
	    /* skip forwards */
	    
	    c = token;
	    while (( c > 0) && (c != '\n'))
		c = input();
	    
	    unput(c);
	    
	    return FALSE;			/* directive not obeyed */
	}
	else 
	    if (strcmp("pragma", (const char *)yytext) == 0)
	    {
		delete yylval.text;
		
		/* check for stub specific pragma */
		
		token = yylex();
		
		if (token == STUB_CMD)
		{
		    
		    DeclSpecifier *ds = new DeclSpecifier(STUB_PENDING);
		    
		    do
		    {
			switch (yylval.stubcommand)
			{
			case STUB_NORENAME:
			    GlobalInfo::setCurrentMods(yylval.stubcommand);
			case STUB_DEFAULT:
			    break;
			default:
			    ds->addStubModifier(yylval.stubcommand);
			}
			
			token = yylex();
		    } while (token == STUB_CMD);
		    
		    while (token == STRING)
		    {
			String temp = (*yylval.text).removeChars(" \t\"");
			
			GlobalInfo::addPragma(temp, ds);
			delete yylval.text;
			
			token = yylex();
			
		    }
		    
		    delete ds;
		    
		    if (token == '\n')
		    {
			unput(token);
			return TRUE;
		    }
		    else
		    {
			errorStream << "Illegal #pragma directive:"
				    << text << endl;
			
			warning(errorStream);
		    }
		}
		
		/* skip forwards */
		
		c = token;
		while (( c > 0) && (c != '\n'))
		    c = input();
		
		unput(c);
		
		return FALSE;	/* directive not obeyed */
	    }
    default:
	errorStream << "Unrecognised # directive"
		    << text << endl;
	
	warning(errorStream);
    }
    
    /* now ignore rest of line */
    
    c = token;
    while ((c > 0) && (c != '\n'))
	c = input();
    
    unput(c);
    
    return TRUE;
}

/*
 * Collect the contents of inline functions 
 */

static const int MAX_INLINE_SIZE = 4096;

String *collectInlineDef ()
{
    int bracelevel = 1;
    int token;
    char def[MAX_INLINE_SIZE];
    int inlineInd = 0;

    collectingInlines = TRUE;
    BEGIN INLIN;

    memset(def, '\0', MAX_INLINE_SIZE);
    def[inlineInd++] = '{';

    while (bracelevel > 0)
    {
        token = yylex();
	if (token > 0)
	{
	    /* Assume single char */
	    if (inlineInd > MAX_INLINE_SIZE)
		fatal("Inline function buffer overflow");

	    switch (token)
	    {
	    case '{':
		bracelevel++;
		def[inlineInd++] = '{';
		break;
	    case '}':
		bracelevel--;
		def[inlineInd++] = '}';
		if (bracelevel == 0)
		{
		    unput(token);
		    break;
		}
		break;
	    case STUB_CMD:
		break;
	    case DIRECTIVE:
	    {
		char *sp = *yylval.text;
		int len = yylval.text->size();

		if (inlineInd+len > MAX_INLINE_SIZE)
		    fatal("Inline function buffer overflow");

		strncpy(sp, &def[inlineInd], len);
		inlineInd += len;
		break;
	    }
	    default:
                if (token == '\n')
		    GlobalInfo::newLine();
		def[inlineInd++] = token;
	    }
	}
	else
	    fatal("Unexpected EOF reading inline function");
    }
    collectingInlines = FALSE;
    BEGIN INITIAL;
    
    return new String(def);
}

/* 
 * Peek ahead at next token. This should reset the lexer via yyless
 * but flex cannot handle this (yyless is a cpp macro) so we do it
 * in the rule for identifiers instead.
 */

int tokenPeek ()
{
    int token;
    
    /* peek ahead at next token */
    lookahead = TRUE;

    token = yylex();

#ifdef FLEX_SCANNER

    /* flex does not allow yyless here (its a macro) simulate its behaviour! */

    for (int i = yyleng-1;  i >= 0; i--)
	unput(yytext[i]);
#else
    yyless(0);
#endif

    lookahead = FALSE;

    switch (token)
    {
    case STRING:
    case CHARACTERCONSTANT:
    case INTEGERCONSTANT:
    case FLOATINGCONSTANT:
    case IDENTIFIER:
	delete yylval.text;
    default:
	break;
    }
    
    return token;
}

/* 
 * This is a HACK so that the parser can determine if it has seen the
 * token string "class X;" . Only called by declareClass which must
 * determine whether it should be declaring a new class or returning 
 * a previous one depending upon context. The lookahead token is NOT
 * maintained consistently and is ONLY valid in this particular case.
 * UGH!
 */

int getLookahead ()
{
    return lookaheadToken;
}

int tokenType ( const String& name )
{
    String idname(name);
    int token;

    if (!lookahead)
    {
	/* Peek at next token */

	token = tokenPeek();
	lookaheadToken = token;

	if (token == COLONCOLON)
	{
	    /* name better be a class name regardless */
	    yylval.decl = GlobalInfo::lookFor(idname, AGGREGATE_TYPE);
	}
	else
	    yylval.decl = GlobalInfo::lookFor(idname, ANY_TYPE);

	if (yylval.decl != 0)
	{
	    TypeDescriptor *declType = yylval.decl->getType();
	    
	    if (declType != 0 )
	    {
		if (yylval.decl->isTypedef())
		{		
		    Type typ = declType->kind();
		    
		    if (typ == AGGREGATE_TYPE)
			return CLASSTYPE;
		    
		    if (typ == ENUMERATION_TYPE)
			return ENUMTYPE;
		    
		    if (typ == TYPE_TYPE)
                    {
			TypeDescriptor *typOf = declType;
			
			do
			{
			    typOf = typOf->deref();
			    typ = typOf->kind();
			} while ((typ == TYPE_TYPE) || (typ == CV_TYPE));
			

			if (typ == AGGREGATE_TYPE)
			    return CLASSTYPE;
			else if (typ == ENUMERATION_TYPE)
			    return  ENUMTYPE;

			return TYPEDEFTYPE;
		    }
		}
	    }
	}
    }
    yylval.text = new String(idname);
    return IDENTIFIER;
}

/*
 * Check if this is a stub command.
 * We use strpbrk looking for the first letter of the available
 * options, this allows whitespace after the '@' (SPARCcompiler C++ 4.0
 * tokenises differently to other compilers)
 */

StubModifier stubCommand ( const String& text )
{
    /* 
     * We have to explicitly create the Strings here otherwise
     * cfront cannot decide whether to convert command to a char *
     * or the constant string to a String. Aghh!
     */

    String command = text.touppercase().strpbrk("NRAUIOFD");
    StubModifier sm = STUB_DEFAULT;

    if (command == "NOREMOTE")
	sm = STUB_NOREMOTE;
    else
	if (command == "REMOTE")
	    sm = STUB_REMOTE;
	else
	    if (command == "NOMARSHALL")
		sm = STUB_NOMARSHALL;
	    else
		if (command == "AUTOMARSHALL")
		    sm = STUB_AUTOMARSHALL;
		else
		    if (command == "USERMARSHALL")
			sm = STUB_USERMARSHALL;
		    else
			if (command == "IN")
			    sm = STUB_ARG_IN;
			else
			    if (command == "OUT")
				sm = STUB_ARG_OUT;
			    else
				if (command == "INOUT")
				    sm = STUB_ARG_INOUT;
				else
				    if (command == "NORENAME")
					sm = STUB_NORENAME;
				    else
					if (command == "NOCLIENT")
					{
					    caution("@NoCLient no longer valid - use @NoRemote");
                                            sm = STUB_NOREMOTE;
                                        }
					else
					    if (command == "NOWARNINGS")
						sm = STUB_NOWARNINGS;
					    else
						if (command == "FREEMEMORY")
						{
						    caution("@FreeMemory no longer valid - use @Delete");
						    sm = STUB_DELETE;
						}
						else
						    if (command == "NODELETE")
							sm = STUB_NODELETE;
						    else
							if (command == "DELETE")
							    sm = STUB_DELETE;
    

    return sm;
}

void remember ()
{
    tokenText = yytext;
}

#ifndef FLEX_SCANNER
void yyunput (int c)
{
    unput(c);
}

/* 
 * Try to avoid stupid Ansi C / K&R C problem with yyunput definition
 * that is in ncform
 */

#define yyunput yyunput_hack
#endif
