This paper is a retrospective commentary on my initial attempts at
writing pure glyph-based InterViews code. It develops two further
composite classes from Page that are more flexible than Page itself,
defines a class that provides a framework for creating glyphs that can
resize themselves, and covers deriving a basic glyph from Glyph.  All
items are finally put together in a complete application.

Page may be seen to have two limitations in some circumstances:
components have to be placed at absolute coordinate positions and they
remain at those positions even if the page is resized. NormalPage
addresses these difficulties.

NormalPage is a Page that uses normalised coordinates in the range
(0.0 - 1.0) instead of absolute coordinates. The advantage of doing
this enables the positions of components relative to the themselves
and also to the page boundaries to be maintained. However, NormalPage
is limiting in the sense that the sizes of the components remain fixed
whatever the size of the page. ResizingPage addresses this problem.

ResizingPage is a NormalPage that gives its components that are
Resizables the opportunity to resize themselves when its size changes.

Resizable is a class that provides a framework for creating glyphs
that can resize themselves. It is derived from MonoGlyph. On being
informed of the possible need to resize, a Resizable can either change
its body or inform its component that its parent has changed size so
that it can adapt and possibly draw itself differently.

Basic is an example of the most basic of classes that can be derived
from Glyph. Instances will be used as components in a demonstration
application.

We will start by deriving Basic. Here is the header file.

#ifndef _basic_
#define _basic_

#include <InterViews/world.h>
#include <InterViews/glyph.h>
#include <InterViews/geometry.h>
#include <InterViews/canvas.h>
#include <InterViews/brush.h>

      class Basic : public Glyph
      {
      public:
          Basic(Coord, Coord, 
                Coord = fil, Coord = fil, float = 0.0,
                Coord = fil, Coord = fil, float = 0.0);
          ~Basic();
      
          virtual void request(Requisition&);
          virtual void allocate(Canvas*, Allocation&, Extension&);
          virtual void draw(Canvas*, Allocation&);
      protected:
          Brush *brush;
          Coord width, height;
          Coord hstretch, hshrink, halign, vstretch, vshrink, valign;
      };
      
      #endif

Basic redefines three of Glyph's virtual methods: request, allocate
and draw. A glyph is requested, through request being called, to state
what its space requirements are. It will then, as a result of the
request being made, be allocated space on some canvas on which to
draw. The canvas and allocation are notified through allocate being
called. allocate's extension parameter is provided so that the glyph
can report back which part of the allocation - it may be bigger or
smaller - it intends to use. The extension concept has not been
stabilised, and may even be removed in future versions of InterViews,
so we will always set the extension to be equal to the allocation.

Here is the code that implements the Basic class.

      #include "basic.h"
      
      Basic::Basic(Coord w, Coord h, 
                   Coord hstretch, Coord hshrink, float halign, 
                   Coord vstretch, Coord vshrink, float valign)
           : width(w), height(h), 
             hstretch(hstretch), hshrink(hshrink), halign(halign), 
             vstretch(vstretch), vshrink(vshrink), valign(valign),
             brush(new Brush(1.0))
      {
          ref(brush);
      }
      
      Basic::~Basic()
      {
          Resource::unref(brush);
      }
      
      void Basic::request(Requisition &requisition)
      {
          Requirement rx(width, hstretch, hshrink, halign);
          Requirement ry(height, vstretch, vshrink, valign);
          
          requisition.require(Dimension_X, rx);
          requisition.require(Dimension_Y, ry);
      }
      
      void Basic::allocate(Canvas*, Allocation &a, Extension &ext)
      {
          ext.xy_extents(a);
      }
      
      void Basic::draw(Canvas *canvas, Allocation &a)
      {
          World *world = World::current();
      
          canvas->fill_rect(a.left(), a.bottom(), a.right(), a.top(),
                            world->background());
      
          canvas->new_path();
       
          canvas->move_to(a.left(), a.bottom());
          canvas->line_to(a.left(), a.top());
          canvas->line_to(a.right(), a.top());
          canvas->line_to(a.right(), a.bottom());
          canvas->line_to(a.left(), a.bottom());
          canvas->stroke(world->foreground(), brush);
      
          canvas->line_to(a.right(), a.top());
          canvas->stroke(world->foreground(), brush);
      
          canvas->move_to(a.right(), a.bottom());
          canvas->line_to(a.left(), a.top());
          canvas->stroke(world->foreground(), brush);
      
          canvas->close_path();
      }

Basic's constructor has 8 arguments, only 2 of which - the width and
height of the desired allocation - need be specified. The other 6
represent stretchability, shrinkability and alignment in the
horizontal and vertical directions. All are used as initialisers for
member variables. A Basic is infinitely stretchable and shrinkable in
both directions by default. This implies that if a Basic is the root
glyph of a hierarchy inserted into the world, then it will be possible
to resize the window via the window manager. The default alignmnets
are both 0.0, meaning that the origin will be at the bottom left hand
corner of the allocation.

Basic creates a new Brush for use in drawing itself. A Brush is a
reference counted Resource, so ref must be used to count the new
instance.  Conversely, the brush must be unreferenced using unref when
the object is deleted.

A Basic is provided with all the necessary information about its
required size, resizing behaviour and alignment on creation so
Basic::request simply creates horizontal and vertical Requirements
using that information and stores them into the Requisition referenced
in the call.

Basic::allocate informs the Basic object of the allocation of a canvas
that it has been given. (I have not encountered a situation in which the
allocation given has been different from that requested). As mentioned
above, we will make the extension that will be used be the whole
allocation. The simplest way to do this is to call Extension's
xy_extents method.

A Glyph's appearance is defined by its draw method. Basic::draw simply
clears its allocation of the canvas using the default background
colour for the display, draws round the limit of that allocation and
joins opposite corners in the default foreground colour. The World
class has a static member function, i.e.  it can be called from
anywhere within the application, which returns the current world.
This is used to obtain the default background and foreground colours.
Note that canvas::move_to resets the current path so it is necessary
to stroke what has been specified so far before performing a move_to.

Here is a simple application consisting of a Page that has a large
Basic as its background and a smaller one as a component. 

      #include <InterViews/world.h>
      #include <InterViews/window.h>
      #include <InterViews/page.h>
      
      #include "basic.h"
      
      main (int argc, char *argv[])
      {
          World world("PageDemo", argc, argv);
      
          Page page(new Basic(400.0, 400.0));
          page.append(new Basic(100.0, 75.0));
          page.move(0, 20.0, 50.0);
      
          ApplicationWindow window(&page);
      
          window.map();
      
          world.run();
      }

The component is added to the Page using the append method. Since this
is the first component - the background doesn't count - Page::prepend
or Page::insert could equally well have been used. The indexes of
components start at 0, so the component is moved to position (20.0,
50.0) by specifying an index of 0.

When the window is resized the component stays put at a fixed position
(20.0, 50.0) from the page's lower left corner. This may not always be
desirable, hence the motivation for a class that would, for instance,
automatically move the component to (40.0, 75.0) if the parent page
were doubled in height and increased by half in width.

NormalPage solves this problem by using a normalised coordinate space
in which all coordinates are represented by values lying in the range
(0.0 - 1.0). Thus if page were a NormalPage in the above example, the
component would be moved to (0.05, 0.125) initially. NormalPage
undertakes the recalculation of its coordinates in terms of the
underlying Page coordinates and moves its components to new positions
when this becomes necessary.

Here is the header file for the NormalPage class.

      #ifndef _normalpage_
      #define _normalpage_
      
      #include <InterViews/page.h>
      
      class NormalPageInfo
      {
      public:
          NormalPageInfo();
      
          float x_;
          float y_;
      };
      
      class NormalPage : public Page
      {
      public:
          NormalPage::NormalPage(Glyph*);
          
          void allocate(Canvas*, Allocation&, Extension&);
          void append(Glyph*);
          void prepend(Glyph*);
          void insert(int, Glyph*);
          void remove(int);
          void location(int, float&, float&);
          void move(int, float, float);
      protected:
          class NormalPageInfo_List* info_;
      };
      
      #endif

NormalPage is going to have to maintain some additional information
about its components, namely their normalised coordinates. A new
class, NormalPageInfo, is defined for this purpose. One NormalPageInfo
instance will be used for each component and a list of
NormalPageInfo's will be kept. The class NormalPageInfo_List will
be discussed under the implementation of NormalPage.

NormalPage redefines a number of Page's virtual methods.
Page::allocate is called after Page has been resized and requested a
new Requistion.  NormalPage seizes this opportunity to recalculate new
absolute coordinate positions for its components and to move them to
these new positions.

Page::{append, prepend, insert, remove} need to be redefined because
the list of NormalPageInfo instances must be updated whenever
components are added or deleted. Page::location is redefined to return
normalised coordinates and move is redefined to take a location in
normalised coordinates. 

Here is the complete implementation of NormalPage

      #include <InterViews/page.h>
      
      #include "list.h"
      
      #include "normalpage.h"
      
      NormalPageInfo::NormalPageInfo() : x_(0.0), y_(0.0) {}
      
      declareList(NormalPageInfo_List, NormalPageInfo);
      implementList(NormalPageInfo_List, NormalPageInfo);
      
      NormalPage::NormalPage(Glyph *g) 
                : Page(g), info_(new NormalPageInfo_List())
      {
      }
      
      void NormalPage::allocate(Canvas *c, Allocation &a, Extension &ext)
      {
          Coord width = a.allotment(Dimension_X).span();
          Coord height = a.allotment(Dimension_Y).span();
      
          for (int index = 0;  index < count();  index++)
          {
              NormalPageInfo &info = info_->item(index);
              Page::move(index, info.x_ * width, info.y_ * height);
          }
      
          Page::allocate(c, a, ext);
      }
      
      void NormalPage::append(Glyph *g)
      {
          NormalPageInfo info;
      
          info_->append(info);
      
          Page::append(g);
      }
      
      void NormalPage::prepend(Glyph *g)
      {
          NormalPageInfo info;
      
          info_->prepend(info);
           Page::prepend(g);
      }
      
      void NormalPage::insert(int index, Glyph *g)
      {
          NormalPageInfo info;
      
          info_->insert(index, info);
      
          Page::insert(index, g);
      }
      
      void NormalPage::remove(int index)
      {
          info_->remove(index);
      
          Page::remove(index);
      }
      
      void NormalPage::location(int index, float &x, float &y)
      {
          NormalPageInfo &info = info_->item(index);
      
          x = info.x_;
          y = info.y_;
      }
      
      void NormalPage::move(int index, float x, float y)
      {
          NormalPageInfo &info = info_->item(index);
      
          info.x_ = x;
          info.y_ = y;
      }
      
InterViews provides a convenient generic list manipulation package in
list.h.  The lists that are generated are actually implemented as
dynamic arrays. The following self-explanatory operations are defined
on lists: prepend, append, insert, remove, remove_all. In addition
count returns the length of the list and item returns the item at a
given index. Two macros are provided to make it easy to declare and
implement list classes.

declareList(List,T) is used to define a list class called List for
manipulating objects of type T. NormalPage specifies

      declareList(NormalPageInfo_List, NormalPageInfo);

so the new class NormalPageInfo_List is defined, with, for example,
declarations of the following methods

      void NormalPageInfo_List::append(NormalPageInfo&);
      void NormalPageInfo_List::insert(int index, NormalPageInfo&);

declareList can be considered equivalent to a ".h" file.

implementList(List,T) is used to implement the list class called List
that manipulates objects of type T. NormalPage specifies

      implementList(NormalPageInfo_List, NormalPageInfo);

and expansion of the macro results in the code for NormalPageInfo_List
class methods being generated. Thus implementList is equivalent to a
'.c' file.

NormalPage declares the protected variable info_ as follows

      class NormalPageInfo_List* info_;

which means that the list of NormalPageInfo instances can be accessed
via statements like the following:

      info_->count();

The constructor for NormalPage passes its background glyph straight
onto Page and creates an empty NormalPageInfo_List list.

NormalPage::allocate computes absolute coordinates for each of its
components and asks Page to place them.

NormalPage::append creates a new NormalPageInfo (which initialises its
x and y coordinate fields to zero), appends it to the
NormalPageInfo_List list, so that it is in the same position in that
list as the component is in Page's list of components, and calls
Page::append to add the glyph passed as argument to the underlying
Page.

NormalPage::{prepend, insert, remove} are similar in principle to
append and needn't be explained further.

NormalPage::location and NormalPage::move simply get and set the
information held in the NormalPageInfo at the specified index.
NormalPage::move does not need to call Page::move because that will
happen on the next call to NormalPage::allocate, which will either
take place as a result of external resizing or because of being forced
by calling NormalPage::change.

The following demonstration program is similar to the earlier one but
uses a NormalPage instead of a Page

      #include <InterViews/world.h>
      #include <InterViews/window.h>
      
      #include "normalpage.h"
      #include "basic.h"
      
      main (int argc, char *argv[])
      {
          World world("NormalDemo", argc, argv);
      
          NormalPage page(new Basic(400.0, 400.0));
          page.append(new Basic(100.0, 75.0));
          page.move(0, 0.05, 0.125);
      
          ApplicationWindow window(&page);
      
          window.map();
      
          world.run();
      }

The component Basic should now stay in the same relative position
(strictly its origin will be at the same position) in the parent Page
on resizing of the window, i.e it will always be one twentieth of the
width from the left hand edge and one eighth of the height from the
bottom edge. 

It might be desired in some situations that the components resize in
proportion as their parent changes size. The next class, ResizingPage,
which is derived from NormalPage, has been developed to meet this
need. 

The model is going to be that when a ResizingPage changes size it
invites its components to respond by calling their resize method.
Now, since resize is not defined for Glpyh, ResizingPage is going to
have to ensure that only those components that do have resize defined
are notified in this way. Therefore a new class, Resizable, that does
have a resize method has been defined and will be presented next. On
top of this, ResizingPage requires different methods for manipulating
Resizables from those for ordinary Glyphs.

Here is the Resizable class header file

      #ifndef _resizable_
      #define _resizable_
      
      #include <InterViews/monoglyph.h>
      
      class Resizable : public MonoGlyph
      {
      public:
          virtual void resize(Coord, Coord);
      protected:
          Resizable();
          Resizable(Glyph*);
      };
      
      #endif

Resizable has 2 constructors designed to meet different behaviours on
resizing. The first, with no argument, is for situations in which a
new appearance based on a new size can only be met by completely
changing the component. In fact the component is not replaced. Since
Resizable is derived from MonoGlyph it is sufficient to change its
body. The second, which takes a Glyph argument, is for situations in
which the glyph can adapt to being a different size. In this case the
glyph is stored as the body of the MonoGlyph. It doesn't make sense to
instantiate a Resizable so the constructors are protected.
 
The implementation of Resizable is very simple as the only reason for
its existence is as an enabling mechanism for other glyphs to convert
themselves into objects that can be resized in a uniform way.

      #include "resizable.h"
      
      Resizable::Resizable() {};
      Resizable::Resizable(Glyph *g) : MonoGlyph(g) {};
      
      void Resizable::resize(Coord, Coord) {}

The derived class must redefine resize.

Now that Resizables have been introduced we can look at the
ResizingPage class. Here is the class header file

      #ifndef _resizingpage_
      #define _resizingpage_
      
      #include "normalpage.h"
      
      class ResizingPageInfo
      {
      public:
          ResizingPageInfo();
      
          boolean isResizable;
      };
      
      class ResizingPage : public NormalPage
      {
      public:
          ResizingPage(Glyph*);
      
          void allocate(Canvas*, Allocation&, Extension&);
          virtual void appendResizable(Glyph*);
          virtual void prependResizable(Glyph*);
          virtual void insertResizable(int, Glyph*);
          virtual void removeResizable(int);
      
          void append(Glyph*);
          void prepend(Glyph*);
          void insert(int, Glyph*);
          void remove(int);
          
          boolean IsResizable(int);
      
      protected:
          class ResizingPageInfo_List *resizables;
      };
      
      #endif

Like NormalPage, ResizingPage needs to keep some extra information
about its components - in this case whether they are Resizables or
not. A ResizingPageInfo class is defined for this purpose, and a list
of instances will be maintained. The list element data is a boolean
which simply indicates whether the component at the same index in
NormalPage's list is a Resizable or not.

As stated earlier, special action needs to be taken when adding and
deleting Resizables. For this reason appendResizable,
prependResizable, insertResizable and removeResizable have been
introduced. Components that are not Resizables need to be recognised
as such so append, prepend, insert and remove need to de redefined as
well. 

Here is the complete class implementation file

      #include "list.h"
      #include "resizable.h"
      #include "resizingpage.h"
      
      ResizingPageInfo::ResizingPageInfo() : isResizable(false) {}
      
      declareList(ResizingPageInfo_List, ResizingPageInfo);
      implementList(ResizingPageInfo_List, ResizingPageInfo);
      
      ResizingPage::ResizingPage(Glyph *g)
                  : NormalPage(g), resizables(new ResizingPageInfo_List()) {}
      
      inline boolean ResizingPage::IsResizable(int index)
      {
          return resizables->item(index).isResizable;
      }
      
      void ResizingPage::allocate(Canvas *c, Allocation &a, Extension &ext)
      {
          Coord width = a.allotment(Dimension_X).span();
          Coord height = a.allotment(Dimension_Y).span();
      
          for (int index = 0;  index < count();  index++)
          {
              if (IsResizable(index))
              {
      	    ((Resizable *) component(index))->resize(width, height);
      	    change(index);
              }
          }
      
          NormalPage::allocate(c, a, ext);
      }
      
      void ResizingPage::appendResizable(Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizable.isResizable = true;
          resizables->append(resizable);
      
          NormalPage::append(g);
      }
      
      void ResizingPage::prependResizable(Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizable.isResizable = true;
          resizables->prepend(resizable);
      
          NormalPage::prepend(g);
      }
      
      void ResizingPage::insertResizable(int index, Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizable.isResizable = true;
          resizables->insert(index, resizable);
      
          NormalPage::insert(index, g);
      }
      
      void ResizingPage::removeResizable(int index)
      {
          ResizingPageInfo resizable;
      
          resizables->remove(index);
      
          NormalPage::remove(index);
      }
      
      void ResizingPage::append(Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizables->append(resizable);
      
          NormalPage::append(g);
      }
      
      void ResizingPage::prepend(Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizables->prepend(resizable);
      
          NormalPage::prepend(g);
      }
      
      void ResizingPage::insert(int index, Glyph *g)
      {
          ResizingPageInfo resizable;
      
          resizables->insert(index, resizable);
      
          NormalPage::insert(index, g);
      }
      
      void ResizingPage::remove(int index)
      {
          resizables->remove(index);
      
          NormalPage::remove(index);
      }

ResizingPage also makes use of the generic list package described
earlier. The constructor passes the background glyph straight on to
NormalPage and creates an empty list of ResizingPageInfo instances.

A convenience routine IsResizable that returns whether the component at
the specified index is a Resizable or not is defined.

ResizingPage::allocate cycles through its components and asks those
that are Resizables to resize themselves. The information passed to
resize() is the new size of the parent Page. Glyph::component returns
a Glyph*, but as glyphs don't have a resize method allocate can't
simply execute

      component(index)->resize(width, height);

for each Resizable - the thing calling resize must be of the right
type. Hence the reason for implementing Resizable as a Monoglyph
wrapper around the real glyph; it enables any type of glyph to be
regarded as a Resizable and treated in an identical fashion.

The {append, prepend, insert, remove}Resizable methods either add or
delete the appropriate ResizingPageInfo element of the
ResizingPageInfo_List list and pass control to the standard append,
prepend, insert or remove method of NormalPage. The append, prepend
and insert methods of ResizingPageInfo each create a ResizingPageInfo
instance, which will be initialised to false, and add it to the
ResizingPageInfo_List list using the corresponding list method. remove
does the obvious thing.

We are now almost in a position to repeat the demonstration program
using ResizingPage instead of NormalPage, but first we need to be able
to create Resizables. Here is the Adaptable class - a Resizable that
contains an Elaboration.

      #ifndef _adaptable_
      #define _adaptable_
      
      #include "resizable.h"
      
      class Adaptable : public Resizable
      {
      public:
          Adaptable(Coord, Coord);
      
          void resize(Coord, Coord);
      };
      
      #endif
      

      #include "adaptable.h"
      #include "elaboration.h"
      
      Adaptable::Adaptable(Coord w, Coord h) 
               : Resizable(new Elaboration(w, h)) {}
      
      void Adaptable::resize(Coord w, Coord h)
      {
          ((Elaboration *) body())->resize(w, h);
      }

An Elaboration is a Basic that responds to be being asked to resize
itself. 

      #ifndef _elaboration_
      #define _elaboration_
      
      #include "basic.h"
      
      class Elaboration : public Basic
      {
      public:
          Elaboration(Coord, Coord);
      
          void resize(Coord, Coord);
      protected:
          float scale_x, scale_y;
      };
      
      #endif
      

      #include "elaboration.h"
      
      Elaboration::Elaboration(Coord w, Coord h)
                 : Basic(w, h), scale_x(0.0), scale_y(0.0) {}
      
      void Elaboration::resize(Coord w, Coord h)
      {
          if (scale_x == 0.0 && scale_y == 0.0)
          {
              scale_x = width / w;
              scale_y = height / h;
          }
          else
          {
              width = w * scale_x;
              height = h * scale_y;
          }
      }

Basic bases its allocation on its stored width and height, so all that
is necessary to effect a resize is to change the values of these
variables. The first call to resize will occur when its parent
ResizingPage is being allocated for the first time. At that time its
width and height member variables will contain the user requested
sizes, so, since resize will provide the initial size of the parent,
scale factors that can be used in calculating new widths and heights
in future can be worked out and saved.

Just to demonstrate the use of a Resizable that changes its body here
is a group of classes that enable Rules to be added to Pages. After
trying unsuccessfully to put a Rule into a Page I was told by the
InterViews team that H/VRules have no default width/height. They
work in Boxes because boxes stretch their components' allocations,
whereas pages do not. It was suggested that I try putting a FixedSpan
of the right size around the rule before inserting into a page. Here
is what I devised:

      #ifndef _elastic_
      #define _elastic_
      
      #include "resizable.h"
      
      class Elastic : public Resizable
      {
      protected:
          Elastic();
      };
      
      class HElastic : public Elastic
      {
      public:
          HElastic();
      
          void resize(Coord, Coord);
      };
      
      class VElastic : public Elastic
      {
      public:
          VElastic();
      
          void resize(Coord, Coord);
      };
      
      #endif


      #include <InterViews/world.h>
      #include <InterViews/fixedspan.h>
      #include <InterViews/rule.h>
      
      #include "elastic.h"
      
      Elastic::Elastic() {}
      
      HElastic::HElastic() {}
      
      VElastic::VElastic() {}
      
      void HElastic::resize(Coord w, Coord)
      {
          body(new FixedSpan(new HRule(World::current()->foreground(), 1.0),
                                       Dimension_X, w));
      }
      
      void VElastic::resize(Coord, Coord h)
      {
          body(new FixedSpan(new VRule(World::current()->foreground(), 1.0),
                                       Dimension_Y, h));
      }

Elastics do not need to be initialised with a body. As Resizable
components of a ResizingPage they will be resized during ResizingPage
allocation, and since their resize methods create new bodies all will
be well by the time an Elastic is first asked to draw itself. 

So, finally, putting it all together we have

      #include <InterViews/world.h>
      #include <InterViews/window.h>
      
      #include "resizingpage.h"
      #include "basic.h"
      #include "adaptable.h"
      #include "elastic.h"
      
      main (int argc, char *argv[])
      {
          const Coord initialWidth = 400.0, initialHeight = 400.0;
      
          World world("ResizingDemo", argc, argv);
      
          ResizingPage page(new Basic(initialWidth, initialHeight));
      
          int index = 0;
          page.appendResizable(new Adaptable(100.0, 75.0));
          page.move(index++, 0.05, 0.125);
          page.append(new Basic(100.0, 75.0, fil, fil, 1.0, fil, fil, 1.0));
          page.move(index++, 0.95, 0.875);
          page.appendResizable(new HElastic());
          page.move(index++, 0.0, 0.5);
          page.appendResizable(new VElastic());
          page.move(index++, 0.5, 0.0);
      
          ApplicationWindow window(&page);
      
          window.map();
      
          world.run();
      }

Now the background should be divided into quarters by the two rules
(elastics) that always stretch to be the whole width and height on
resizing of the window, and the Adaptable scales itself in proportion
relative to the background.

An additional component, a Basic, has been added in order to
demonstrate the difference between resizable and non-resizable
components together. That component has been created with an alignment
of (1.0, 1.0), i.e. its origin is at the top right hand corner of its
allocation. In other words that corner will always remain, since the
component was positioned at (0.95, 0.875) in normalised coordinates,
at a position that is one twentieth of the width from the right hand
edge and one eighth of the height from the top edge of the window.

