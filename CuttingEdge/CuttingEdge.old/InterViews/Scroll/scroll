From newcastle.ac.uk!uknet!mcsun!uunet!decwrl!sgi!fido!marktwain.rad.sgi.com!linton Thu Dec  5 17:51:38 1991
Article 540 of comp.windows.interviews:
Path: newcastle.ac.uk!uknet!mcsun!uunet!decwrl!sgi!fido!marktwain.rad.sgi.com!linton
>From linton@marktwain.rad.sgi.com (Mark Linton)
Newsgroups: comp.windows.interviews
Subject: Re: Scrolling again
Message-ID: <rivbf20@fido.asd.sgi.com>
Date: 26 Nov 91 21:04:46 GMT
References: <AA03619.9111221331.stobhill@uk.ac.newcastle>
Sender: news@fido.asd.sgi.com (Usenet News Admin)
Reply-To: linton@marktwain.rad.sgi.com (Mark Linton)
Organization: sgi
Lines: 470

Below is the TBScrollBox that I have implemented.
This will be part of a snapshot that I'll make available
in the near future.

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  include/InterViews/scrbox.h lib/InterViews/scrbox.c
# Wrapped by linton@marktwain on Tue Nov 26 13:03:58 1991
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'include/InterViews/scrbox.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'include/InterViews/scrbox.h'\"
else
echo shar: Extracting \"'include/InterViews/scrbox.h'\" \(3054 characters\)
sed "s/^X//" >'include/InterViews/scrbox.h' <<'END_OF_FILE'
X/*
X * Copyright (c) 1991 Stanford University
X * Copyright (c) 1991 Silicon Graphics, Inc.
X *
X * Permission to use, copy, modify, distribute, and sell this software and 
X * its documentation for any purpose is hereby granted without fee, provided
X * that (i) the above copyright notices and this permission notice appear in
X * all copies of the software and related documentation, and (ii) the names of
X * Stanford and Silicon Graphics may not be used in any advertising or
X * publicity relating to the software without the specific, prior written
X * permission of Stanford and Silicon Graphics.
X * 
X * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
X * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
X * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
X *
X * IN NO EVENT SHALL STANFORD OR SILICON GRAPHICS BE LIABLE FOR
X * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
X * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
X * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
X * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
X * OF THIS SOFTWARE.
X */
X
X/*
X * ScrollBox - scrollable list of glyphs
X */
X
X#ifndef iv_scrbox_h
X#define iv_scrbox_h
X
X#include <InterViews/adjust.h>
X#include <InterViews/polyglyph.h>
X
X#include <InterViews/_enter.h>
X
Xclass ScrollBox : public PolyGlyph, public Adjustable {
Xprotected:
X    ScrollBox(GlyphIndex size = 10);
X    virtual ~ScrollBox();
X
X    virtual boolean shown(GlyphIndex) const;
X    virtual GlyphIndex first_shown() const;
X    virtual GlyphIndex last_shown() const;
X};
X
Xclass TBScrollBoxImpl;
X
Xclass TBScrollBox : public ScrollBox {
Xpublic:
X    TBScrollBox(GlyphIndex size = 10);
X    virtual ~TBScrollBox();
X
X    virtual void request(Requisition&) const;
X    virtual void allocate(Canvas*, const Allocation&, Extension&);
X    virtual void draw(Canvas*, const Allocation&) const;
X    virtual void pick(Canvas*, const Allocation&, int depth, Hit&);
X
X    virtual void modified(GlyphIndex);
X    virtual boolean shown(GlyphIndex) const;
X    virtual GlyphIndex first_shown() const;
X    virtual GlyphIndex last_shown() const;
X    virtual void allotment(GlyphIndex, DimensionName, Allotment&) const;
X
X    virtual Coord lower(DimensionName) const;
X    virtual Coord upper(DimensionName) const;
X    virtual Coord length(DimensionName) const;
X    virtual Coord cur_lower(DimensionName) const;
X    virtual Coord cur_upper(DimensionName) const;
X    virtual Coord cur_length(DimensionName) const;
X
X    virtual void scroll_forward(DimensionName);
X    virtual void scroll_backward(DimensionName);
X    virtual void page_forward(DimensionName);
X    virtual void page_backward(DimensionName);
X
X    virtual void scroll_to(DimensionName, Coord lower);
Xprivate:
X    TBScrollBoxImpl* impl_;
X
X    TBScrollBoxImpl& impl() const;
X    void scroll_by(DimensionName, long);
X    void do_scroll(DimensionName, GlyphIndex new_start, GlyphIndex new_end);
X};
X
X#include <InterViews/_leave.h>
X
X#endif
END_OF_FILE
if test 3054 -ne `wc -c <'include/InterViews/scrbox.h'`; then
    echo shar: \"'include/InterViews/scrbox.h'\" unpacked with wrong size!
fi
# end of 'include/InterViews/scrbox.h'
fi
if test -f 'lib/InterViews/scrbox.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/InterViews/scrbox.c'\"
else
echo shar: Extracting \"'lib/InterViews/scrbox.c'\" \(8869 characters\)
sed "s/^X//" >'lib/InterViews/scrbox.c' <<'END_OF_FILE'
X/*
X * Copyright (c) 1991 Stanford University
X * Copyright (c) 1991 Silicon Graphics, Inc.
X *
X * Permission to use, copy, modify, distribute, and sell this software and 
X * its documentation for any purpose is hereby granted without fee, provided
X * that (i) the above copyright notices and this permission notice appear in
X * all copies of the software and related documentation, and (ii) the names of
X * Stanford and Silicon Graphics may not be used in any advertising or
X * publicity relating to the software without the specific, prior written
X * permission of Stanford and Silicon Graphics.
X * 
X * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
X * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
X * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
X *
X * IN NO EVENT SHALL STANFORD OR SILICON GRAPHICS BE LIABLE FOR
X * ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,
X * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
X * WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF 
X * LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
X * OF THIS SOFTWARE.
X */
X
X/*
X * ScrollBox - scrollable list of glyphs
X */
X
X#include <InterViews/canvas.h>
X#include <InterViews/hit.h>
X#include <InterViews/scrbox.h>
X#include <OS/list.h>
X#include <OS/math.h>
X
XScrollBox::ScrollBox(GlyphIndex size) : PolyGlyph(size) { }
XScrollBox::~ScrollBox() { }
X
Xboolean ScrollBox::shown(GlyphIndex i) const {
X    return i >= 0 && i < count();
X}
X
XGlyphIndex ScrollBox::first_shown() const {
X    return 0;
X}
X
XGlyphIndex ScrollBox::last_shown() const {
X    return count() - 1;
X}
X
Xclass TBScrollBoxInfo {
Xprivate:
X    friend class TBScrollBox;
X    friend class TBScrollBoxImpl;
X
X    Glyph* glyph_;
X    Allocation allocation_;
X};
X
XdeclareList(TBScrollBoxList,TBScrollBoxInfo);
XimplementList(TBScrollBoxList,TBScrollBoxInfo);
X
Xclass TBScrollBoxImpl {
Xprivate:
X    friend class TBScrollBox;
X
X    ScrollBox* scrollbox_;
X    GlyphIndex start_;
X    GlyphIndex end_;
X    boolean changed_;
X    Requisition requisition_;
X    Canvas* canvas_;
X    Allocation allocation_;
X    Extension extension_;
X    TBScrollBoxList visible_;
X
X    void refresh();
X    void reallocate();
X    void redraw();
X};
X
XTBScrollBox::TBScrollBox(GlyphIndex size) : ScrollBox(size) {
X    impl_ = new TBScrollBoxImpl;
X    TBScrollBoxImpl& sb = *impl_;
X    sb.scrollbox_ = this;
X    sb.start_ = 0;
X    sb.end_ = 0;
X    sb.changed_ = true;
X    sb.canvas_ = nil;
X}
X
XTBScrollBox::~TBScrollBox() {
X    delete impl_;
X}
X
Xvoid TBScrollBox::request(Requisition& req) const {
X    GlyphIndex n = count();
X    TBScrollBoxImpl& sb = *impl_;
X    if (sb.changed_) {
X	Requisition r;
X	const Requirement& rx = r.requirement(Dimension_X);
X	const Requirement& ry = r.requirement(Dimension_Y);
X	Coord natural_width = 0.0;
X	Coord natural_height = 0.0;
X	for (GlyphIndex i = 0; i < n; i++) {
X	    Glyph* g = component(i);
X	    if (g != nil) {
X		g->request(r);
X		Coord r_width = rx.natural();
X		if (r_width > natural_width) {
X		    natural_width = r_width;
X		}
X		natural_height += ry.natural();
X	    }
X	}
X	Requirement& box_x = sb.requisition_.requirement(Dimension_X);
X	box_x.natural(natural_width);
X	box_x.stretch(fil);
X	box_x.shrink(natural_width);
X	box_x.alignment(0.0);
X
X	Requirement& box_y = sb.requisition_.requirement(Dimension_Y);
X	box_y.natural(natural_height);
X	box_y.stretch(fil);
X	box_y.shrink(natural_height);
X	sb.changed_ = false;
X    }
X    req = sb.requisition_;
X}
X
Xvoid TBScrollBox::allocate(Canvas* c, const Allocation& a, Extension& ext) {
X    TBScrollBoxImpl& sb = *impl_;
X    if (sb.changed_) {
X	Requisition req;
X	request(req);
X    }
X    ext.xy_extents(c, a);
X    sb.canvas_ = c;
X    sb.allocation_ = a;
X    sb.extension_ = ext;
X    sb.reallocate();
X    notify(Dimension_X);
X    notify(Dimension_Y);
X}
X
Xvoid TBScrollBox::draw(Canvas* c, const Allocation&) const {
X    TBScrollBoxImpl& sb = *impl_;
X    Extension& e = sb.extension_;
X    if (sb.canvas_->damaged(e.left(), e.bottom(), e.right(), e.top())) {
X	if (sb.changed_) {
X	    sb.refresh();
X	}
X	c->push_clipping();
X	c->clip_rect(e.left(), e.bottom(), e.right(), e.top());
X	for (ListItr(TBScrollBoxList) i(sb.visible_); i.more(); i.next()) {
X	    const TBScrollBoxInfo& info = i.cur_ref();
X	    info.glyph_->draw(c, info.allocation_);
X	}
X	c->pop_clipping();
X    }
X}
X
Xvoid TBScrollBox::pick(Canvas* c, const Allocation&, int depth, Hit& h) {
X    TBScrollBoxImpl& sb = *impl_;
X    Extension& ext = sb.extension_;
X    if (h.left() < ext.right() && h.right() >= ext.left() &&
X	h.bottom() < ext.top() && h.top() >= ext.bottom()
X    ) {
X	if (sb.changed_) {
X	    sb.refresh();
X	}
X	GlyphIndex n = sb.start_;
X	for (ListItr(TBScrollBoxList) i(sb.visible_); i.more(); i.next()) {
X	    const TBScrollBoxInfo& info = i.cur_ref();
X	    h.begin(depth, this, n);
X	    info.glyph_->pick(c, info.allocation_, depth + 1, h);
X	    h.end();
X	    ++n;
X	}
X    }
X}
X
Xvoid TBScrollBox::modified(GlyphIndex) {
X    impl_->changed_ = true;
X}
X
Xboolean TBScrollBox::shown(GlyphIndex i) const {
X    TBScrollBoxImpl& sb = impl();
X    return i >= sb.start_ && i < sb.end_;
X}
X
XGlyphIndex TBScrollBox::first_shown() const {
X    TBScrollBoxImpl& sb = impl();
X    return sb.start_;
X}
X
XGlyphIndex TBScrollBox::last_shown() const {
X    TBScrollBoxImpl& sb = impl();
X    return sb.end_ - 1;
X}
X
Xvoid TBScrollBox::allotment(
X    GlyphIndex i, DimensionName d, Allotment& a
X) const {
X    TBScrollBoxImpl& sb = impl();
X    if (i >= sb.start_ && i < sb.end_) {
X	a = sb.visible_.item(i - sb.start_).allocation_.allotment(d);
X    }
X}
X
XCoord TBScrollBox::lower(DimensionName) const {
X    return Coord(0);
X}
X
XCoord TBScrollBox::upper(DimensionName) const {
X    return Coord(count() - 1);
X}
X
XCoord TBScrollBox::length(DimensionName) const {
X    return Coord(count());
X}
X
XCoord TBScrollBox::cur_lower(DimensionName) const {
X    TBScrollBoxImpl& sb = impl();
X    return Coord(count() - sb.end_);
X}
X
XCoord TBScrollBox::cur_upper(DimensionName) const {
X    TBScrollBoxImpl& sb = impl();
X    return Coord(count() - 1 - sb.start_);
X}
X
XCoord TBScrollBox::cur_length(DimensionName) const {
X    TBScrollBoxImpl& sb = impl();
X    return Coord(sb.end_ - sb.start_);
X}
X
Xvoid TBScrollBox::scroll_forward(DimensionName d) {
X    scroll_by(d, -1);
X}
X
Xvoid TBScrollBox::scroll_backward(DimensionName d) {
X    scroll_by(d, 1);
X}
X
Xvoid TBScrollBox::page_forward(DimensionName d) {
X    scroll_by(d, -long(cur_length(d) - 1));
X}
X
Xvoid TBScrollBox::page_backward(DimensionName d) {
X    scroll_by(d, long(cur_length(d) - 1));
X}
X
Xvoid TBScrollBox::scroll_to(DimensionName d, Coord lower) {
X    TBScrollBoxImpl& sb = impl();
X    GlyphIndex max_end = count();
X    GlyphIndex new_end = max_end - Math::round(lower);
X    GlyphIndex new_start = new_end - sb.end_ + sb.start_;
X    do_scroll(d, new_start, new_end);
X}
X
XTBScrollBoxImpl& TBScrollBox::impl() const {
X    TBScrollBoxImpl& sb = *impl_;
X    if (sb.changed_) {
X	sb.refresh();
X    }
X    return sb;
X}
X
Xvoid TBScrollBox::scroll_by(DimensionName d, long offset) {
X    TBScrollBoxImpl& sb = impl();
X    do_scroll(d, sb.start_ + offset, sb.end_ + offset);
X}
X
Xvoid TBScrollBox::do_scroll(
X    DimensionName d, GlyphIndex new_start, GlyphIndex new_end
X) {
X    TBScrollBoxImpl& sb = *impl_;
X    GlyphIndex max_end = count();
X    if (new_start < 0) {
X	new_start = 0;
X    }
X    if (new_end > max_end) {
X	new_start -= (new_end - max_end);
X	new_end = max_end;
X    }
X    if (new_start != sb.start_ || new_end != sb.end_) {
X	sb.start_ = new_start;
X	sb.end_ = new_end;
X	sb.reallocate();
X	sb.redraw();
X	notify(d);
X    }
X}
X
Xvoid TBScrollBoxImpl::refresh() {
X    Requisition req;
X    scrollbox_->request(req);
X    start_ = 0;
X    reallocate();
X    redraw();
X}
X
Xvoid TBScrollBoxImpl::reallocate() {
X    ScrollBox* s = scrollbox_;
X    GlyphIndex n = s->count();
X    end_ = n;
X    TBScrollBoxList& list = visible_;
X    list.remove_all();
X    Requisition req;
X    TBScrollBoxInfo info;
X    Extension e_i;
X    const Requirement& r = req.requirement(Dimension_Y);
X    Coord p = allocation_.top();
X    Coord bottom = allocation_.bottom();
X    for (GlyphIndex i = start_; i < n; i++) {
X	Glyph* g = s->component(i);
X	if (g != nil) {
X	    g->request(req);
X	    Coord span = r.natural();
X	    Coord alignment = r.alignment();
X	    p -= span;
X	    if (p < bottom) {
X		end_ = i;
X		break;
X	    }
X	    info.glyph_ = g;
X	    Allotment& ax = info.allocation_.x_allotment();
X	    ax = allocation_.x_allotment();
X	    Allotment& ay = info.allocation_.y_allotment();
X	    ay.span(span);
X	    ay.origin(p + Coord(alignment * span));
X	    ay.alignment(alignment);
X	    list.append(info);
X	    g->allocate(canvas_, info.allocation_, e_i);
X	}
X    }
X}
X
Xvoid TBScrollBoxImpl::redraw() {
X    if (canvas_ != nil) {
X	Extension& ext = extension_;
X	canvas_->damage(ext.left(), ext.bottom(), ext.right(), ext.top());
X    }
X}
END_OF_FILE
if test 8869 -ne `wc -c <'lib/InterViews/scrbox.c'`; then
    echo shar: \"'lib/InterViews/scrbox.c'\" unpacked with wrong size!
fi
# end of 'lib/InterViews/scrbox.c'
fi
echo shar: End of shell archive.
exit 0


