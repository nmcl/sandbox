From Dan.McCue@newcastle.ac.uk Thu Dec 12 16:16:28 1991
Received: from newcastle (cheviot.ncl) by uk.ac.newcastle.ulgham; Thu, 12 Dec 91 16:16:27 GMT
Received: from wylam by uk.ac.newcastle; Thu, 12 Dec 91 16:16:24 GMT
From: Daniel L. McCue <Dan.McCue@newcastle.ac.uk>
Message-Id: <AA13377.9112121616.wylam@uk.ac.newcastle>
Subject: Re: cvs
To: M.C.Little@uk.ac.newcastle (Mark Little)
Date: Thu, 12 Dec 91 16:16:21 GMT
In-Reply-To: <AA20954.9112051536.ulgham@uk.ac.newcastle>; from "Mark Little" at Dec 5, 91 3:36 pm
X-Mailer: ELM [version 2.3 PL11]
Status: OR

> 
> Both the Process and Simulator directories are now cvs modules.
> Mark.

  Thanks.  I've checked out both and had a quick look.

  Here's the thread stuff I was talking about at coffee.
  I made a header file called thread.h with the abstract class definition
  and another header called LWP_thread.h with an LWP-based derivative.
  Of course, there would be an LWP_thread.c to go along.

  I haven't yet sorted out the best way to represent thread identities or
  to handle initialisation, etc.  For that matter, I don't know if we need
  to define a Body function like we did for the Process class.
  Ideas welcome.

  -- Dan
 
-------------------- cut here for thread.h -----------------------------
#ifndef THREAD_H
#define THREAD_H

class Thread {
public:
    Thread() { }
    virtual ~Thread() { }
    virtual void Suspend()=0;
    virtual void Resume()=0;
    virtual long Identity()=0;
};

#endif // THREAD_H
-------------------- cut here for LWP_thread.h -----------------------------
#ifndef LWP_THREAD_H
#define LWP_THREAD_H

#include <lwp/lwp.h>

class LWP_Thread : public Thread {
public:
    LWP_Thread();
    virtual ~LWP_Thread();
    virtual void Suspend();
    virtual void Resume();
    virtual long Identity();
private:
    thread_t mid;
};



