/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1997/09/25 15:31:02 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef UID_STUB_H_
#define UID_STUB_H_

#ifndef STUBGEN_TYPES_H_
#  include <StubGen/Types.h>
#endif

class RpcBuffer;
class ClientRpcManager;

/* @NoRemote */ class ostream ;
/* @NoRemote */ class Buffer ;

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const Buffer *);
extern RpcBuffer& operator>> ( RpcBuffer&, Buffer *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const Buffer& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, Buffer& tounpack);
#endif


#include <Common/CommonT.h>
/* @NoRemote, @AutoMarshall */ class Uid
{
public:
	/* @NoMarshall */ Uid ( );
	/* @NoMarshall */ Uid ( const Uid& );
	/* @NoMarshall */ Uid ( const char* , Boolean  = false);
	/* @NoMarshall */ ~Uid ( );
	/* @NoMarshall */ static const Uid& _arjunaNilUid_ ( );
	/* @NoMarshall */ unsigned long hash ( ) const ;
	/* @NoMarshall */ Boolean pack ( Buffer& ) const ;
	/* @NoMarshall */ Boolean unpack ( Buffer& );
	/* @NoMarshall */ Uid& operator = ( const Uid& );
	/* @NoMarshall */ int operator == ( const Uid& ) const ;
	/* @NoMarshall */ int operator != ( const Uid& ) const ;
	/* @NoMarshall */ int operator < ( const Uid& ) const ;
	/* @NoMarshall */ int operator > ( const Uid& ) const ;
	/* @NoMarshall */ ostream& print ( ostream& ) const ;
private:
	/* @NoMarshall */ void generateHash ( );
	/* @NoMarshall */ static Uint32 hostInetAddr ( );
	Uint32 hostAddr;
	Uint32 process;
	Uint32 sec;
	Uint32 other;
	unsigned long _hash;
#ifndef STUB
public:
	void marshall (RpcBuffer&) const;
	void unmarshall (RpcBuffer&);

#endif
};

#ifndef STUB

extern RpcBuffer& operator<< ( RpcBuffer&, const Uid *);
extern RpcBuffer& operator>> ( RpcBuffer&, Uid *&);

extern RpcBuffer& operator<< ( RpcBuffer& rpcbuff, const Uid& topack);
extern RpcBuffer& operator>> ( RpcBuffer& rpcbuff, Uid& tounpack);
#endif


#include <Common/Uid.n>

#endif  /* UID_STUB_H_ */
