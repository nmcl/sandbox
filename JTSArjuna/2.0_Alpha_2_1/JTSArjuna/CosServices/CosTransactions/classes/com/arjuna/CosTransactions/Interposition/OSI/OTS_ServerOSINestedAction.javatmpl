/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_ServerOSINestedAction.javatmpl,v 1.1 2000/02/25 14:06:26 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosTransactions.Interposition.OSI;

import com.arjuna.CosTransactions.Interposition.Strict.*;
import com.arjuna.CosTransactions.Interposition.*;
import org.omg.CosTransactions.*;

import NAMESPACE_(CORBA).SystemException;

public class OTS_ServerOSINestedAction extends OTS_ServerStrictNestedAction
{
    
    /*
     * Create local transactions with same ids as remote.
     * The base class is responsible for registering this resource
     * with its parent.
     */
    
public OTS_ServerOSINestedAction (OTS_ServerControl control,
				   boolean doRegister)
    {
	super(control, doRegister);
    }

/*
 * Since we may be called multiple times if we are nested and are propagated
 * to our parents, we remember the initial response and return it subsequently.
 */

public void commit_subtransaction (Coordinator parent) throws SystemException
    {
	/*
	 * First remove entry for this transaction otid
	 * from map. Have to do it here as we are going
	 * to be deleted by the base class!
	 */
    
	OTIDMap.remove(get_uid());
    
	super.commit_subtransaction(parent);
    }

public void rollback_subtransaction () throws SystemException
    {
	OTIDMap.remove(get_uid());
    
	super.rollback_subtransaction();
    }
 
};
