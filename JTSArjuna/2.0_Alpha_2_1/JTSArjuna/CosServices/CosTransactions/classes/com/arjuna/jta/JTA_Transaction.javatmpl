/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: JTA_Transaction.javatmpl,v 1.3.4.1.4.4 2000/07/28 14:45:19 nmcl Exp $
 */

#include <Common/OrbPortability.h>
#include <CosTransactions/CosTranNames.h>

package com.arjuna.jta;

import org.omg.CosTransactions.*;
import com.arjuna.OrbCommon.*;
import com.arjuna.CosTransactions.*;
import com.arjuna.ArjunaCommon.Common.ErrorStream;
import javax.transaction.*;
import javax.transaction.xa.*;
import java.util.Hashtable;
import java.util.Enumeration;

import javax.transaction.NotSupportedException;
import javax.transaction.RollbackException;
import javax.transaction.HeuristicMixedException;
import javax.transaction.HeuristicRollbackException;
import javax.transaction.HeuristicMixedException;
import javax.transaction.SystemException;
import java.lang.SecurityException;
import java.lang.IllegalStateException;
import org.omg.CosTransactions.SubtransactionsUnavailable;
import org.omg.CosTransactions.NoTransaction;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.InvalidControl;
import NAMESPACE_(CORBA).NO_PERMISSION;
import NAMESPACE_(CORBA).UNKNOWN;

#include <CosTransactions/CosTranExceptions.h>
#include <CosTransactions/OTS_Exceptions.h>

public class JTA_Transaction implements javax.transaction.Transaction
{

public static final int XACONNECTION = 0;
public static final int XAMODIFIER = 1;

public JTA_Transaction (org.omg.CosTransactions.Control control)
    {
	_theControl = control;
	_resources = new Hashtable();
	_duplicateResources = new Hashtable();
    }

public boolean equals (Object obj)
    {
	if (obj instanceof JTA_Transaction)
	{
	    /*
	     * If we can't get either coordinator to compare,
	     * then assume transactions are different.
	     */

	    try
	    {
		JTA_Transaction tx = (JTA_Transaction) obj;
		Coordinator objCoord = tx.getControl().get_coordinator();
		Coordinator coord = _theControl.get_coordinator();
		
		if ((coord != null) && (objCoord != null))
		{
		    return objCoord.is_same_transaction(coord);
		}
		else
		    return false;
	    }
	    catch (Exception e)
	    {
	    }
	}
	
	return false;
    }

    /*
     * Return -1 if we fail.
     */

public int hashCode ()
    {
	try
	{
	    Coordinator coord = _theControl.get_coordinator();
	    
	    return coord.hash_transaction();
	}
	catch (Exception e)
	{
	    return -1;
	}
    }
    
public org.omg.CosTransactions.Control getControl ()
    {
	return _theControl;
    }

    /*
     * The JTA specification is vague on whether the calling thread
     * can have any transaction associated with it. It does say that
     * it need not have the same transaction as this one. We could
     * call suspend prior to making these calls, but for now we do
     * nothing, and simply treat it like a Control.
     */
    
    /*
     * We will never throw a HeuristicRollbackException because if we
     * get a HeuristicRollback from a resource, and can successfully
     * rollback the other resources, this is then the same as having
     * simply been forced to rollback the transaction during phase 1.
     * The OTS interfaces do not allow a differentiation.
     */
    
public void commit () throws javax.transaction.RollbackException,
	                     javax.transaction.HeuristicMixedException,
	                     javax.transaction.HeuristicRollbackException, java.lang.SecurityException,
                             javax.transaction.SystemException
    {
	if (_theControl != null)
	{
	    synchronized (JTA_Transaction._transactions)
		{
		    JTA_Transaction._transactions.remove(this);
		}
	    
	    try
	    {
		Terminator term = _theControl.get_terminator();

		if (term == null)
		    throw new IllegalStateException();
		
		term.commit(true);

		term = null;
	    }
	    catch (org.omg.CosTransactions.Unavailable e1)
	    {
		throw new IllegalStateException();
	    }
	    catch (org.omg.CosTransactions.HeuristicMixed e2)
	    {
		throw new javax.transaction.HeuristicMixedException("JTA_HeuristicType.HEURISTIC_MIXED");
	    }
	    catch (org.omg.CosTransactions.HeuristicHazard e3)
	    {
		throw new javax.transaction.HeuristicMixedException("JTA_HeuristicType.HEURISTIC_HAZARD");
	    }
	    catch (TransactionRolledBack e4)
	    {
		throw new RollbackException();
	    }
	    catch (NAMESPACE_(CORBA).NO_PERMISSION e5)
	    {
		throw new SecurityException();
	    }
	    catch (NAMESPACE_(CORBA).SystemException e7)
	    {
		throw new javax.transaction.SystemException();
	    }
	}
	else
	    throw new IllegalStateException();
    }

public void rollback () throws java.lang.IllegalStateException, java.lang.SecurityException, javax.transaction.SystemException
    {
	if (_theControl != null)
	{
	    synchronized (JTA_Transaction._transactions)
		{
		    JTA_Transaction._transactions.remove(this);
		}

	    try
	    {
		Terminator term = _theControl.get_terminator();

		if (term == null)
		    throw new IllegalStateException();
		
		term.rollback();

		term = null;
	    }	
	    catch (org.omg.CosTransactions.Unavailable e1)
	    {
		throw new IllegalStateException();
	    }
	    catch (NAMESPACE_(CORBA).NO_PERMISSION e2)
	    {
		throw new SecurityException();
	    }
	    catch (NAMESPACE_(CORBA).SystemException e3)
	    {
		throw new javax.transaction.SystemException();
	    }
	}
	else
	    throw new IllegalStateException();
    }

public void setRollbackOnly () throws java.lang.IllegalStateException, javax.transaction.SystemException
    {
	if (_theControl != null)
	{
	    try
	    {
		Coordinator coord = _theControl.get_coordinator();

		if (coord == null)
		    throw new IllegalStateException();

		coord.rollback_only();
	    }
	    catch (org.omg.CosTransactions.Inactive e1)
	    {
		throw new IllegalStateException();
	    }
	    catch (org.omg.CosTransactions.Unavailable e2)
	    {
		throw new IllegalStateException();
	    }
	    catch (NAMESPACE_(CORBA).SystemException e3)
	    {
		throw new javax.transaction.SystemException();
	    }
	}
	else
	    throw new IllegalStateException();
    }

public int getStatus () throws javax.transaction.SystemException
    {
	int status = javax.transaction.Status.STATUS_NO_TRANSACTION;
	
	if (_theControl != null)
	{
	    try
	    {
		Coordinator coord = _theControl.get_coordinator();

		if (coord != null)
		    status = JTA_Utility.convertStatus(coord.get_status());
	    }
	    catch (org.omg.CosTransactions.Unavailable e1)
	    {
	    }
	    catch (NAMESPACE_(CORBA).SystemException e2)
	    {
		throw new javax.transaction.SystemException();
	    }
	}

	return status;
    }

public void registerSynchronization (javax.transaction.Synchronization sync) throws javax.transaction.RollbackException, java.lang.IllegalStateException, javax.transaction.SystemException
    {
	if (sync == null)
	    throw new javax.transaction.SystemException("JTA_Transaction.registerSynchronization - null parameter!");

	if (_theControl != null)
	{
	    try
	    {
		Coordinator coord = _theControl.get_coordinator();

		if (coord != null)
		{
		    JTA_Synchronization s = new JTA_Synchronization(sync);
		    
		    coord.register_synchronization(s.getSynchronization());
		}
		else
		    throw new IllegalStateException();
	    }
	    catch (org.omg.CosTransactions.Unavailable e1)
	    {
		throw new IllegalStateException();
	    }
	    catch (TransactionRolledBack e2)
	    {
		throw new javax.transaction.RollbackException();
	    }
	    catch (org.omg.CosTransactions.Inactive e3)
	    {
		throw new IllegalStateException();
	    }
	    catch (org.omg.CosTransactions.SynchronizationUnavailable e4)
	    {
		throw new IllegalStateException();  // shouldn't happen!
	    }
	    catch (InvalidTransaction e5)
	    {
		throw new IllegalStateException();
	    }
	    catch (NAMESPACE_(CORBA).SystemException e6)
	    {
		throw new javax.transaction.SystemException();
	    }
	}
	else
	    throw new IllegalStateException();
    }

public boolean enlistResource (XAResource xaRes) throws RollbackException, IllegalStateException, javax.transaction.SystemException
    {
	return enlistResource(xaRes, null);
    }
    
public boolean enlistResource (XAResource xaRes, Object[] params) throws RollbackException, IllegalStateException, javax.transaction.SystemException
    {
	if (xaRes == null)
	    throw new javax.transaction.SystemException("JTA_Transaction.enlistResource - resource is null!");

	int status = getStatus();

	switch (status)
	{
	case javax.transaction.Status.STATUS_MARKED_ROLLBACK:
	    throw new RollbackException();
	case javax.transaction.Status.STATUS_ACTIVE:
	    break;
	default:
	    throw new IllegalStateException();
	}

	JTA_XAModifier theModifier = null;

	if (params != null)
	{
	    if (params.length >= XAMODIFIER+1)
	    {
		if (params[XAMODIFIER] instanceof JTA_XAModifier)
		{
		    theModifier = (JTA_XAModifier) params[XAMODIFIER];
		}
	    }
	}
	    
	try
	{
	    /*
	     * For each transaction we maintain a list of resources
	     * registered with it. Each element on this list also
	     * contains a list of threads which have registered this
	     * resource, and what their XID was for that registration.
	     */

	    TxInfo info = null;
	    Xid xid = null;

	    /*
	     * Have we seen this specific resource instance before?
	     * Do this trawl first before checking the RM instance
	     * later. Saves time.
	     */

	    info = (TxInfo) _resources.get(xaRes);
	    
	    if (info != null)
	    {
		/*
		 * Have seen resource before, so do a resume.
		 * The Resource instance will still be registered
		 * with the transaction though.
		 */

		if (info.getState() == TxInfo.ASSOCIATION_SUSPENDED)
		{
		    xaRes.start(info.xid(), XAResource.TMRESUME);

		    info.setState(TxInfo.ASSOCIATED);
		    
		    return true;  // already registered resource with this transaction!
		}
		else
		{
		    if (info.getState() == TxInfo.ASSOCIATED)
		    {
			// already active on this transaction.

			return true;
		    }
		    else
		    {
			// Note: this exception will be caught by our catch block

			throw new IllegalStateException("JTA_Transaction.enlistResource - resource already enlisted!");
		    }
		}
	    }
	    else
	    {
		/*
		 * Null xid means it's not in the main resources list, but may be
		 * in the duplicates.
		 */

		info = (TxInfo) _duplicateResources.get(xaRes);

		if (info != null)
		{
		    if (info.getState() == TxInfo.ASSOCIATION_SUSPENDED)
		    {
			xaRes.start(info.xid(), XAResource.TMRESUME);

			info.setState(TxInfo.ASSOCIATED);
			
			return true;
		    }
		    else
		    {
			if (info.getState() == TxInfo.ASSOCIATED)
			{
			    /*
			     * Seen before, and not suspended, so do nothing
			     * this time.
			     */

			    return true;
			}
			else
			    throw new IllegalStateException("JTA_Transaction.enlistResource - resource already enlisted!");
		    }
		}
	    }

	    if (threadIsActive(xaRes))
		return true;  // this thread has already registered a resource for this db
	    
	    /*
	     * We definitely haven't seen this specific resource instance before,
	     * but that doesn't mean that we haven't seen the RM it is connected
	     * to.
	     */

	    if (isNewRM(xaRes))
	    {
		/*
		 * New RM, so create xid with new branch.
		 */

		boolean branchRequired = true;
		
		if (_resources.size() == 0)  // first ever, so no need for branch
		    branchRequired = false;

		xid = createXid(branchRequired, theModifier);

		boolean associatedWork = false;
		int retry = 10;

		/*
		 * If another process has (or is about to) create the same
		 * transaction association then we will probably get a failure
		 * during start with XAER_DUPID. We know this must be due to
		 * another server, since we keep track of our own registrations.
		 * So, if this happens we create a new transaction branch and
		 * try again.
		 *
		 * To save time we could always just create branches by default.
		 * Is there a benefit to a zero branch?
		 */

		while (!associatedWork)
		{
		    try
		    {
			xaRes.start(xid, XAResource.TMNOFLAGS);

			associatedWork = true;

			_resources.put(xaRes, new TxInfo(xid));
		    }
		    catch (XAException e)
		    {
			// transaction already created by another server

			if (e.errorCode == XAException.XAER_DUPID)
			{
			    if (retry > 0)
				xid = createXid(true, theModifier);

			    retry--;
			}
			else
			    throw e;
		    
			if (retry < 0)
			    throw new UNKNOWN();
		    }
		}
	    }
	    else
	    {
		/*
		 * Have seen this RM before, so ignore this instance.
		 * The first registered RM instance will be used to drive
		 * the transaction completion.
		 * We add it to the duplicateResource list so we can delist
		 * it correctly later though.
		 */

		/*
		 * Re-create xid with zero branch.
		 */

		xid = new JTA_XID(_theControl, false);

		if (theModifier != null)
		{
		    try
		    {
			xid = theModifier.createXid((JTA_XID) xid);
		    }
		    catch (Exception e)
		    {
		    }
		}

		try
		{
		    xaRes.start(xid, XAResource.TMJOIN);
		}
		catch (XAException ex)
		{
		    throw ex;
		}
		
		/*
		 * Add to duplicate resources list so we can keep
		 * track of it (particularly if we later have to
		 * delist).
		 */
    
		_duplicateResources.put(xaRes, new TxInfo(xid));

		return true;
	    }

	    /*
	     * Control and Coordinator should be set, or we would not
	     * have gotten this far!
	     */
	    
	    Coordinator coord = _theControl.get_coordinator();
	    JTA_ResourceRecord res = new JTA_ResourceRecord(xaRes, xid, params);

	    coord.register_resource(res.getResource());
	    
	    coord = null;
	    res = null;
	    
	    return true;
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	    
	    return false;
	}
    }

    /*
     * Do we have to unregister resources? Assume not as it would not
     * make much sense otherwise!
     */
    
public boolean delistResource (XAResource xaRes, int flags) throws IllegalStateException, javax.transaction.SystemException
    {
	if (xaRes == null)
	    throw new javax.transaction.SystemException("JTA_Transaction.delistResource - resource is null!");
	
	int status = getStatus();

	switch (status)
	{
	case javax.transaction.Status.STATUS_ACTIVE:
	    break;
	default:
	    throw new IllegalStateException();
	}

	try
	{
	    TxInfo info = (TxInfo) _resources.get(xaRes);

	    if (info == null)
		info = (TxInfo) _duplicateResources.get(xaRes);
	    
	    if (info == null)
		return false;
	    else
	    {
		switch (info.getState())
		{
		case TxInfo.ASSOCIATED:
		    {
			if ((flags & XAResource.TMSUCCESS) != 0)
			{
			    xaRes.end(info.xid(), XAResource.TMSUCCESS);
			    info.setState(TxInfo.NOT_ASSOCIATED);
			}
			else
			{
			    if ((flags & XAResource.TMSUSPEND) != 0)
			    {
				xaRes.end(info.xid(), XAResource.TMSUSPEND);
				info.setState(TxInfo.ASSOCIATION_SUSPENDED);
			    }
			    else
			    {
				xaRes.end(info.xid(), XAResource.TMFAIL);
				info.setState(TxInfo.FAILED);
			    }
			}
		    }
		    break;
		case TxInfo.ASSOCIATION_SUSPENDED:
		    {
			if ((flags & XAResource.TMSUCCESS) != 0)
			{
			    xaRes.end(info.xid(), XAResource.TMSUCCESS);
			    info.setState(TxInfo.NOT_ASSOCIATED);
			}
			else
			{
			    if ((flags & XAResource.TMSUSPEND) != 0)
			    {
				// Note: this exception will be caught by our catch block

				throw new IllegalStateException("JTA_Transaction.delistResource - resource already suspended!");
			    }
			    else
			    {
				xaRes.end(info.xid(), XAResource.TMFAIL);
				info.setState(TxInfo.FAILED);
			    }
			}
		    }
		    break;
		default:
		    throw new IllegalStateException("JTA_Transaction.delistResource - illegal resource state: "+info.getState());
		}
		
		info = null;

		return true;
	    }
	}
	catch (Exception e)
	{
	    System.err.println(e);
	    
	    return false;
	}
    }

    /*
     * If this thread has already registered a resource for the
     * same db then don't use this copy. For some databases it would
     * actually be ok for us to use the resource (at least to do an
     * xa_start equivalent on it), but for Oracle 8.1.6 it causes
     * their JDBC driver to crash!
     */

private final boolean threadIsActive (XAResource xaRes)
    {
	Thread t = Thread.currentThread();

	try
	{
	    Enumeration el = _resources.keys();
	    
	    if (el != null)
	    {
		while (el.hasMoreElements())
		{
		    XAResource x = (XAResource) el.nextElement();
		    
		    if (x.isSameRM(xaRes))
		    {
			TxInfo info = (TxInfo) _resources.get(x);
		    
			if (info.thread() == t)
			    return true;
		    }
		}
	    }

	    el = _duplicateResources.keys();

	    if (el != null)
	    {
		while (el.hasMoreElements())
		{
		    XAResource x = (XAResource) el.nextElement();
		    
		    if (x.isSameRM(xaRes))
		    {
			TxInfo info = (TxInfo) _resources.get(x);
		    
			if (info.thread() == t)
			    return true;
		    }
		}
	    }
	}
	catch (Exception e)
	{
	    ErrorStream.stream(ErrorStream.FATAL).println(e);

	    System.exit(0);
	}

	return false;
    }

private final boolean isNewRM (XAResource xaRes)
    {
	try
	{
	    Enumeration el = _resources.keys();
	    
	    if (el != null)
	    {
		while (el.hasMoreElements())
		{
		    XAResource x = (XAResource) el.nextElement();
		    
		    if (x.isSameRM(xaRes))
		    {
			return false;
		    }
		}
	    }

	    el = _duplicateResources.keys();

	    if (el != null)
	    {
		while (el.hasMoreElements())
		{
		    if (((XAResource) el.nextElement()).isSameRM(xaRes))
		    {
			return false;
		    }
		}
	    }
	}
	catch (Exception e)
	{
	    ErrorStream.stream(ErrorStream.FATAL).println(e);

	    System.exit(0);
	}

	return true;
    }

public static synchronized JTA_Transaction getTransaction (Control theControl)
    {
	try
	{
	    if (theControl != null)
	    {
		JTA_Transaction tx = null;
		Enumeration e = _transactions.elements();
		Coordinator c1 = theControl.get_coordinator();
		Coordinator c2 = null;
		
		while (e.hasMoreElements())
		{
		    tx = (JTA_Transaction) e.nextElement();
		    c2 = tx.getControl().get_coordinator();
		    
		    if (c1.is_same_transaction(c2))
			return tx;
		}
		
		/*
		 * New transaction.
		 */

		tx = new JTA_Transaction(theControl);
		JTA_Transaction._transactions.put(tx, tx);

		return tx;
	    }
	    else
		return null;
	}
	catch (Exception e)
	{
	    return null;
	}
    }

private Xid createXid (boolean branch, JTA_XAModifier theModifier)
    {
	Xid xid = new JTA_XID(_theControl, branch);

	if (theModifier != null)
	{
	    try
	    {
		xid = theModifier.createXid((JTA_XID) xid);
	    }
	    catch (Exception e)
	    {
		e.printStackTrace();
	    }
	}

	return xid;
    }
    
private org.omg.CosTransactions.Control _theControl;
private Hashtable                       _resources;
private Hashtable                       _duplicateResources;

private static Hashtable _transactions = new Hashtable();
 
};
