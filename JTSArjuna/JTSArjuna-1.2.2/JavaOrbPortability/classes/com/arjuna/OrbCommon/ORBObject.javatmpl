/*
 * Copyright (C) 1997, 1998,
 *
 * Department of Computing Science,
 * University of Newcastle upon Tyne,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: ORBObject.javatmpl,v 1.4 1998/11/12 08:52:36 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.OrbCommon;

import java.util.Properties;
import java.applet.Applet;
import java.io.*;
#ifndef JAR_PACKAGE_PROBLEM
import NAMESPACE_(CORBA.*);
#endif

import java.io.FileNotFoundException;
import java.io.IOException;
import NAMESPACE_(CORBA.SystemException);
import NAMESPACE_(CosNaming).NamingContextPackage.InvalidName;
import NAMESPACE_(CosNaming).NamingContextPackage.CannotProceed;
import NAMESPACE_(CosNaming).NamingContextPackage.NotFound;

/**
 * An attempt at some ORB portable ways of binding to objects and registering
 * objects with the name service, configuration file, etc.
 */

public class ORBObject
{

    /**
     * Bind to the object using the default (build-time specified) mechanism.
     */
    
public static NAMESPACE_(CORBA).Object bindToObject (String objectName) throws InvalidName, CannotProceed, NotFound, IOException
    {
	return ORBServices.getService(objectName, null);
    }

    /**
     * Bind to the object using the specified location mechanism.
     * The location mechanisms are specified in ORBServices.
     */
    
public static NAMESPACE_(CORBA).Object bindToObject (String objectName, int locationMechanism) throws InvalidName, CannotProceed, NotFound, IOException
    {
	return ORBServices.getService(objectName, null, locationMechanism);
    }    

    /**
     * Obtain an IOR from the specified file, and create the object reference
     * from it.
     */
    
public static NAMESPACE_(CORBA).Object fileToObject (String objectName) throws InvalidName, CannotProceed, NotFound, IOException
    {
	return ORBServices.getService(objectName, null, ORBServices.FILE);
    }

    /**
     * From the given object reference, obtain an IOR and write it to the
     * specified file.
     */
    
public static void objectToFile (NAMESPACE_(CORBA).Object objRef, String objectName) throws NotFound, CannotProceed, InvalidName, IOException
    {
	ORBServices.registerService(objRef, objectName, null, ORBServices.FILE);
    }

};
