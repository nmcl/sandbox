.\"
.\" Copyright (C) 1994, 1995, 1996,
.\"
.\" Department of Computing Science,
.\" University of Newcastle upon Tyne,
.\" Newcastle upon Tyne,
.\" UK.
.\"
.\" $Id: SemaphoreSetup.3,v 1.2 1996/01/02 13:25:45 nsmw Exp $
.\"
.TH SemaphoreSetup 3 "23 July 1995" "Gandiva" "C++ class"
.SH NAME
SemaphoreSetup \- semaphore creation control class
.SH SYNOPSIS
.B "#ifndef COMMON_SEMAPHORESETUP_H_"
.br
.B "#   include <Common/SemaphoreSetup.h>"
.br
.B "#endif"
.sp
.BI "class SemaphoreSetup"
.br
.BI "{"
.br
.BI "public:"
.br
.BI "    SemaphoreSetup ();"
.br
.BI "    ~SemaphoreSetup ();"
.sp
.BI "    Boolean processBased;"
.br
.BI "    Boolean initialOwner;"
.br
.BI "    Boolean reentrant;"
.br
.BI "    key_t key;"
.br
.BI "};"

.SH DESCRIPTION
Instances of this class control the way in which semaphore variables
(instances of classes derived from the \fBSemaphore\fR
class), behave when created. An instance is passed to the \fIcreate\fR
method of the \fBSemaphore\fR class, which examines the field and determines
how to create the semaphore.

The fields are:

.B
processBased
	: this determines whether a semaphore variable created in
one process is available for use in another process. Two processes
should not attempt to create the same semaphore variable. The default is
\fIFALSE\fR. Currently this option is not supported.

.B
initialOwner
	: this determines whether the semaphore is created owned
by the creator. The default is \fIFALSE\fR. Currently this option is
not supported.

.B
reentrant
	: this determines whether semaphores are re-entrant, i.e.,
whether when a thread has obtained a semaphore it will block if
it again tries to obtain it. Currently all semaphores are re-entrant,
so users can acquire them as often as required without blocking. For
each semaphore "lock" request, there should be a corresponding
"unlock" request. Currently this option is not supported.

.B
key
	: this is used to identify inter-process-based semaphores.

.SH SEE ALSO
Semaphore(3)
