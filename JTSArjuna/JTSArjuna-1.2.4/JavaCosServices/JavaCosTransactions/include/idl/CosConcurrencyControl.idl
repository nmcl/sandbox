/*
 * Copyright (C) 1996, 1997, 1998,
 *
 * Department of Computing Science,
 * University of Newcastle upon Tyne,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: CosConcurrencyControl.idl,v 1.2 1998/11/12 09:00:23 nmcl Exp $
 */

#ifndef COSCONCURRENCY_IDL_
#define COSCONCURRENCY_IDL_

#pragma prefix "omg.org"

#include <idl/CosTransactions.idl>

module CosConcurrencyControl
{
    enum lock_mode { read, write, upgrade, intention_read, intention_write };

    exception LockNotHeld {};

    interface LockCoordinator
    {
	void drop_locks ();
    };

    interface LockSet
    {
	void lock (in lock_mode mode);
	boolean try_lock (in lock_mode mode);

	void unlock (in lock_mode mode) raises (LockNotHeld);

	void change_mode (in lock_mode held_mode,
			  in lock_mode new_mode) raises (LockNotHeld);

	LockCoordinator get_coordinator (in CosTransactions::Coordinator which);
    };
    

    interface TransactionalLockSet
    {
	void lock (in CosTransactions::Coordinator current, in lock_mode mode);
	boolean try_lock (in CosTransactions::Coordinator current, in lock_mode mode);

	void unlock (in CosTransactions::Coordinator current, in lock_mode mode) raises (LockNotHeld);

	void change_mode (in CosTransactions::Coordinator current,
			  in lock_mode held_mode,
			  in lock_mode new_mode) raises (LockNotHeld);

	LockCoordinator get_coordinator (in CosTransactions::Coordinator which);
    };

    interface LockSetFactory
    {
	LockSet create ();
	LockSet create_related (in LockSet which);

	TransactionalLockSet create_transactional ();
	TransactionalLockSet create_transactional_related (in TransactionalLockSet which);
    };
};

#endif

    

    
