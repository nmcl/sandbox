/*
 * Copyright (C) 1999,
 *
 * Department of Computing Science,
 * University of Newcastle upon Tyne,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: TMClient.javatmpl,v 1.1.4.1 1999/11/18 14:55:51 nmcl Exp $
 */

#include <Common/OrbPortability.h>

import JavaCosTransactionsTests.*;
import TestModule.*;
import com.arjuna.OrbCommon.*;
import com.arjuna.JavaCosTransactions.*;
import org.omg.CosTransactions.*;
import java.util.Random;
import NAMESPACE_(CORBA).IntHolder;

import JavaCosTransactionsTests.TestException;

public class TMClient
{

public static void main (String[] args)
    {
	ORBInterface.initORB(args, null);
	ORBInterface.initBOA();
	
	TransactionFactory theOTS = null;
	Control topLevelControl = null;
	Control nestedControl = null;
	String server = "/tmp/hammer1.ref";
	boolean slave = false;

	if (System.getProperty("os.name").startsWith("Windows"))
	{
	    server = "C:\\temp\\hammer1.ref";
	}

	for (int i = 0; i < args.length; i++)
	{
	    if (args[i].compareTo("-reffile") == 0)
		server = args[i+1];
	    if (args[i].compareTo("-help") == 0)
	    {
		System.out.println("Usage: TMClient [-reffile <file>] [-set] [-help]");
		System.exit(0);
	    }
	    if (args[i].compareTo("-slave") == 0)
		slave = true;
	}

	try
	{
#ifndef USE_BIND
	    String[] params = new String[1];

	    params[0] = ORBServices.otsKind;
	    
	    NAMESPACE_(CORBA).Object obj = ORBServices.getService(ORBServices.transactionService,
								  params);

	    params = null;
	    theOTS = HELPER_CLASS_(TransactionFactory).narrow(obj);
#else
#ifndef ORBIXWEB	    
	    theOTS = SCOPED_CORBA_BIND_(org.omg.CosTransactions,TransactionFactory,ORBServices.transactionService);
#else
	    theOTS = SCOPED_CORBA_BIND_(org.omg.CosTransactions,TransactionFactory,":"+ORBServices.transactionService);
#endif	    
#endif
	}
	catch (Exception e)
	{
	    System.err.println("Unexpected bind exception: "+e);
	    System.exit(1);
	}

	System.out.println("Creating transaction.");
	
	try
	{
	    topLevelControl = theOTS.create(0);
	}
	catch (Exception e)
	{
	    System.err.println("Create call failed: "+e);
	    System.exit(1);
	}

	System.out.println("Creating subtransaction.");

	try
	{
	    nestedControl = topLevelControl.get_coordinator().create_subtransaction();
	}
	catch (Exception e)
	{
	    System.err.println("Subtransaction create call failed: "+e);

	    try
	    {
		topLevelControl.get_terminator().rollback();
	    }
	    catch (Exception ex)
	    {
	    }
	    
	    System.exit(1);
	}
	
	try
	{
#ifndef USE_BIND	    
	    DistributedHammerWorker1.hammerObject_1 = HELPER_CLASS_(Hammer).narrow(ORBObject.fileToObject(server));
#else
#ifdef ORBIXWEB
	    DistributedHammerWorker1.hammerObject_1 = SCOPED_CORBA_BIND_(TestModule,Hammer,":Hammer1");
#else
	    DistributedHammerWorker1.hammerObject_1 = SCOPED_CORBA_BIND_(TestModule,Hammer,"Hammer1");
#endif
#endif
	    if (!DistributedHammerWorker1.hammerObject_1.incr(1, nestedControl))
		System.out.println("Could not increment!");
	    else
		System.out.println("incremented.");

	    System.out.println("sleeping.");
	    
	    Thread.sleep(20000);

	    nestedControl.get_terminator().rollback();

	    if (!slave)
	    {
		System.out.println("master sleeping again.");
		
		Thread.sleep(20000);
	    }
	    
	    IntHolder value = new IntHolder(0);
	    
	    if (!DistributedHammerWorker1.hammerObject_1.get(value, topLevelControl))
		System.out.println("Could not get!");
	    else
		System.out.println("got.");

	    topLevelControl.get_terminator().rollback();
	}
	catch (Exception e)
	{
	    System.err.println("TMClient: "+e);
	    System.exit(0);
	}

	ORBInterface.shutdownBOA();
	ORBInterface.shutdownORB();

	System.exit(0);  // needed for ORBacus?!
    }

};
