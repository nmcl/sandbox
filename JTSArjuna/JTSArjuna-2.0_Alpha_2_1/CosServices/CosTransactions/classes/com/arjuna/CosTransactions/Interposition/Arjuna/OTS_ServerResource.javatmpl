/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_ServerResource.javatmpl,v 1.5.6.1 2000/06/23 09:05:54 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosTransactions.Interposition.Arjuna;

import com.arjuna.ArjunaCommon.Template.*;
import com.arjuna.ArjunaCommon.Common.Uid;
import com.arjuna.OrbCommon.ORBInterface;
import com.arjuna.CosTransactions.Interposition.OTS_ServerFactory;
import com.arjuna.CosTransactions.Interposition.OTS_ServerControl;
import org.omg.CosTransactions.*;
import java.io.PrintStream;

import NAMESPACE_(CORBA).SystemException;

public class OTS_ServerResource implements ListElement
{

    /*
     * Assume only one thread can delete an object!
     */

public void finalize ()
    {
	tidyup();
    }

    /*
     * This is called to allow lazy interposition of resources.
     * Since some implementations of interposition may not need
     * this, its default is to do nothing.
     */

public boolean interposeResource ()
    {
	return true;
    }

public final boolean valid ()
    {
	return _valid;
    }

public final synchronized boolean destroyed ()
    {
	return _destroyed;
    }

public final OTS_ServerControl control ()
    {
	return _theControl;
    }

    /*
     * Add transaction to this transaction's children, and set the new
     * transaction's notion of its parent to us.
     */

public final boolean addChild (OTS_ServerNestedAction c)
    {
	if (_children != null)
	{
	    if (_children.add(c))
	    {
		c.setParentHandle(this);
	    
		return true;
	    }
	}
    
	return false;
    }

public final boolean removeChild (OTS_ServerNestedAction c)
    {
	if (_children != null)
	{
	    c.setParentHandle(null);
	    
	    return _children.remove(c);
	}
	else
	    return false;
    }

public final OTS_ServerNestedAction getChild (Uid id)
    {
	if (_children != null)
	    return (OTS_ServerNestedAction) _children.lookFor(id);
	else
	    return null;
    }

public final HashList getChildren ()
    {
	return _children;
    }

public final boolean abortChild (OTS_ServerNestedAction toAbort)
    {
	if ((_children != null) && (toAbort != null))
	{
	    OTS_ServerNestedAction child = (OTS_ServerNestedAction) _children.remove(toAbort.get_uid());
	
	    if (child != null)
	    {
		org.omg.CosTransactions.Status nestedStatus = child.otsStatus();

		if ((nestedStatus != org.omg.CosTransactions.Status.StatusRolledBack) &&
		    (nestedStatus != org.omg.CosTransactions.Status.StatusCommitted) &&
		    (nestedStatus != org.omg.CosTransactions.Status.StatusNoTransaction))
		{
		    child.rollback_subtransaction();
		}

		DESTROY_IMPL_(child.theResource());

		return true;
	    }
	    else
		System.err.println("WARNING - OTS_ServerResource.abortChild - not my child!");
	}
	else
	    System.err.println("WARNING - OTS_ServerResource.abortChild - error, no child!");

	return false;
    }

public synchronized final void setParentHandle (OTS_ServerResource p)
    {
	_parent = p;
    }

public synchronized final OTS_ServerResource getParentHandle ()
    {
	return _parent;
    }

public Uid get_uid ()
    {
	return _theUid;
    }

#if defined(CORBA_2_1) || defined(CORBA_2_2) || defined(CORBA_2_3)
public final org.omg.CosTransactions.Status otsStatus ()
#else
public final int otsStatus ()
#endif
    {
	try
	{
	    if (_theControl != null)
		return _theControl.getImplHandle().get_status();
	    else
		return org.omg.CosTransactions.Status.StatusNoTransaction;
	}
	catch (SystemException e)
	{
	    return org.omg.CosTransactions.Status.StatusUnknown;
	}
    }

public final void printChildren (PrintStream strm, int depth)
    {
	if (_children != null)
	{
	    HashListIterator iter = new HashListIterator(_children);
	    OTS_ServerNestedAction childPtr = (OTS_ServerNestedAction) iter.iterate();

	    while (childPtr != null)
	    {
		strm.println();
	    
		for (int i = 0; i < depth; i++)
		    strm.print(" ");
	    
		strm.print(childPtr.get_uid());

		childPtr.printChildren(strm, depth+1);
		childPtr = (OTS_ServerNestedAction) iter.iterate();
	    }
	}
    }

protected OTS_ServerResource ()
    {
	_theControl = null;
	_children = null;
	_parent = null;
	_valid = true;
	_destroyed = false;
    }

protected OTS_ServerResource (OTS_ServerControl control)
    {
	_theControl = control;
	_children = new HashList(11);
	_theUid = control.get_uid();
	_parent = null;
	_valid = true;
	_destroyed = false;
    }

protected void tidyup ()
    {
	if (_children != null)
	{
	    OTS_ServerNestedAction ptr = (OTS_ServerNestedAction) _children.orderedPop();

	    while (ptr != null)
	    {
		try
		{
		    DESTROY_IMPL_(ptr.theResource());
		}
		catch (Exception e)
		{
		}

		ptr = (OTS_ServerNestedAction) _children.orderedPop();
	    }

	    _children = null;
	}

	if (_theControl != null)
	{
	    /*
	     * If it's a wrapper, then the control
	     * will not have been driven to commit or
	     * rollback, and hence will not have destroyed
	     * itself. So, do so now.
	     */

	    if (_theControl.isWrapper())
	    {
		try
		{
		    _theControl.destroy();  // will delete itself
		}
		catch (Exception e)
		{
		}
	    }

	    _theControl = null;
	}
    }

protected OTS_ServerControl  _theControl;
protected HashList           _children;
protected Uid                _theUid;
protected OTS_ServerResource _parent;
protected boolean            _valid;
protected boolean            _destroyed;
    
}

