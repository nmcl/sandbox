/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_Factory.javatmpl,v 1.8.2.2.4.1 2000/05/22 10:23:52 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosTransactions;

import com.arjuna.CosTransactions.Interposition.*;
import com.arjuna.ArjunaCommon.Common.PropertyManager;
import com.arjuna.ArjunaCommon.Common.Uid;
import com.arjuna.ArjunaCommon.Template.*;
import com.arjuna.OrbCommon.*;
import org.omg.CosTransactions.*;
import com.arjuna.ArjunaOTS.*;
import java.io.PrintStream;
import NAMESPACE_(CORBA).CompletionStatus;

import NAMESPACE_(CORBA).SystemException;
import NAMESPACE_(CORBA).NO_MEMORY;
import NAMESPACE_(CORBA).UNKNOWN;
import NAMESPACE_(CORBA).BAD_PARAM;
import java.lang.OutOfMemoryError;

/*
 * Problem: garbage collection! If a user keeps a reference to a Control, say,
 * then we will delete the implementation object when the action terminates. However,
 * the user's reference is still valid, only the thing it points to is no longer
 * there. In the remote case this is ok as the Orb will raise an exception. In the
 * local case, however, the program is likely to crash when it tries to dereference
 * freed memory! There's nothing we can do about this (unless we decide never to
 * garbage collect!) apart from warn against using Control, Coordinator, and
 * Terminator explicitly - if you go via Current then everything's ok.
 */

public class OTS_Factory extends SCOPED_SKEL_(org.omg.CosTransactions,TransactionFactory)
{

public OTS_Factory ()
    {
	_factoryRef = null;
    }

public OTS_Factory (String name)
    {
#ifdef HAVE_MARKER_NAME
	super(name);
#endif

	_factoryRef = null;
    }

public void finalize () throws Throwable
    {
	_factoryRef = null;

	super.finalize();
    }

public final synchronized TransactionFactory getReference ()
    {
	if (_factoryRef == null)
	{
	    READY_IMPL_(this);
		    
	    _factoryRef = CORBA_REF_(this,org.omg.CosTransactions.TransactionFactory);
	}
	
	return _factoryRef;
    }
 
/*
 * Assume that a value of 0 at the client means the same at the
 * server!
 */
 
public Control create (int time_out) throws SystemException
    {
	OTS_Control tranControl = createLocal(time_out);
	
	return tranControl.getControl();
    }
 
/*
 * This creates a local instance of a transaction control, but does
 * not register it with the ORB. Either call its getControl method
 * directly, or use the create method of the factory.
 */

public OTS_Control createLocal (int time_out) throws SystemException
    {
	try
	{
	    OTS_Control tranControl = new OTS_Control((Control) null, (OTS_Transaction) null);
	    int theTimeout = time_out;
	    
	    if (theTimeout == 0)
		theTimeout = OTS_Factory._defaultTimeout;
	    
	    if (theTimeout != 0)
	    {
		/*
		 * Currently we do not remove controls from the list once they
		 * have terminated. We should to save time and space!
		 */

		OTS_TransactionReaper reaper = OTS_TransactionReaper.transactionReaper();

		if (reaper == null)
		    reaper = OTS_TransactionReaper.create();
		    
		reaper.insert(new OTS_ControlWrapper((OTS_Control) tranControl), theTimeout);
	    }

	    return tranControl;
	}
	catch (OutOfMemoryError e)
	{
	    /*
	     * Rather than try again after running gc simply return and
	     * let the user deal with it. May help with memory!
	     */
	    
	    System.gc();

	    throw new NO_MEMORY(0, CompletionStatus.COMPLETED_NO);	    
	}
    }

    /*
     * In Arjuna we can do low-cost nested aborts at clients which do not
     * involve telling servers. The server finds out the next time a call is
     * made when it checks the hierarchy.
     */

#if !defined(DRAFT1) && !defined(DRAFT2)
 
public Control recreate (PropagationContext ctx) throws SystemException
    {
	if (ctx.currentTransaction.coord == null)  // nothing to use!!
	    return null;

	/*
	 * Now take the propagation context and create a local proxy for it
	 * which matches.
	 *
	 * We maintain a proxy for each top-level action. If we already have
	 * a proxy for this action, then pass it the context and let it figure
	 * out what the hierarchy should be - we may already have created it, or
	 * have most of it.
	 */

	/*
	 * For each type of transaction we know about, we maintain a creator
	 * function. This allows us to remain implementation neutral, while at
	 * the same time retaining flexibility: to support a new transaction type
	 * simple register a new creator function.
	 */

	return creators.recreate(ctx, ctx.currentTransaction.otid.formatID);
    }

#endif

/*
 * Non-idl methods, but we put them here because they
 * are related to the work the factory does.
 */
 
public static Control create_subtransaction (Control control, OTS_Transaction parent)
    {
	try
	{
	    OTS_Control subTranControl = new OTS_Control(control, parent);

	    return subTranControl.getControl();
	}
	catch (OutOfMemoryError e)
	{
	    System.gc();

	    throw new NO_MEMORY(0, CompletionStatus.COMPLETED_NO);
	}
    }

public static Control createProxy (Coordinator coordinator, Terminator terminator)
    {
	return OTS_Factory.createProxy(coordinator, terminator, null);
    }
    
public static Control createProxy (Coordinator coordinator, Terminator terminator,
				   Control parentControl)
    {
	/*
	 * Different from the C++ version in that we can cache proxy
	 * implementations and reuse them, since we rely upon the
	 * Java garbage collection facility to remove them when
	 * all outstanding references have gone.
	 */
	
	/*
	 * If not an Arjuna UidCoordinator then we may have a memory
	 * leak since there is no way to remove this control.
	 */
	
	UidCoordinator uidCoord = OTS_Helper.getUidCoordinator(coordinator);
	Uid theUid = null;
	
	if (uidCoord != null)
	{
	    try
	    {
		theUid = OTS_Helper.getUid(uidCoord);

		/*
 		 * allServerControls contains only the proxy implementations.
 		 */

		if (OTS_ServerControl.allServerControls != null)
		{
		    synchronized (OTS_ServerControl.allServerControls)
			{
			    OTS_Control c = (OTS_Control) OTS_ServerControl.allServerControls.get(theUid);

			    if (c != null)
				return c.getControl();
			}
		}
	    }
	    catch (Exception e)
	    {
		/*
		 * Not an Arjuna transaction, so allocate any Uid.
		 */
		
		theUid = new Uid();
	    }

	    uidCoord = null;
	}
	else
	    theUid = new Uid();

	OTS_Control proxy = new OTS_Control(coordinator, terminator, parentControl, theUid);

	return proxy.getControl();
    }

public static Control createPropagatedControl (Coordinator coord)
    {
	OTS_Control proxyControl = new OTS_Control(coord, null);

	return proxyControl.getControl();
    }
 
private TransactionFactory _factoryRef;
 
private static OTS_FactoryList creators = new OTS_FactoryList();
private static int _defaultTimeout = 0;

 static
     {
	String timeout = PropertyManager.getProperty(OTS_Environment.OTS_DEFAULT_TIMEOUT);

	if (timeout != null)
	{
	    try
	    {
		Integer i = new Integer(timeout);

		OTS_Factory._defaultTimeout = i.intValue();
	    }
	    catch (Exception e)
	    {
		System.err.println("OTS_Factory - invalid default transaction timeout "+timeout);
		System.err.println("Caught exception: "+e);

		System.exit(0);
	    }
	}
     }
	 
};
