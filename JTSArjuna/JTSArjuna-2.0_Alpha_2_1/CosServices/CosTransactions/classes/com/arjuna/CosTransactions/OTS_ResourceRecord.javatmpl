/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_ResourceRecord.javatmpl,v 1.4.6.2 2000/07/27 15:56:34 ndbi Exp $
 */

#include <Common/OrbPortability.h>

/*
 * 
 * OTS Resource Record Class Implementation
 *
 */

package com.arjuna.CosTransactions;

import com.arjuna.OrbCommon.*;
import org.omg.CosTransactions.*;
import com.arjuna.ArjunaLite.Atomic.*;
import com.arjuna.ArjunaCommon.Common.*;
import java.io.PrintStream;
import NAMESPACE_(CORBA).CompletionStatus;

import com.arjuna.ArjunaCommon.Common.UidException;
import NAMESPACE_(CORBA).SystemException;
import NAMESPACE_(CORBA).BAD_PARAM;
import NAMESPACE_(CORBA).UNKNOWN;

import org.omg.CosTransactions.NotPrepared;
import org.omg.CosTransactions.HeuristicCommit;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.HeuristicRollback;
import java.io.IOException;

#include <CosTransactions/CosTranExceptions.h>

/*
 * Arjuna abstract record to handle CORBA (SubtransactionAware)Resource
 * interface.
 *
 * The OTS handling of Resources is bizarre (by Arjuna standards) and confusing
 * Our current understanding is:
 *
 * Resources registered using 'register_resource' ONLY take
 * part in top-level events
 *
 * SubtransactionAwareResources registered using 'register_subtran_aware' ONLY
 * take part in commit/abort of the action in which they are registered - i.e.
 * they DO NOT propagate automatically - the registering object must do the
 * propagation itself using the parent arg in the 'commit_subtransaction'
 * operation.
 *
 * If a SubtransactionAwareResource is registered with 'register_resource' then
 * it will be propagated to the parent when the action commit. Otherwise it is
 * only registered with the current transaction.
 *
 * Subtransactions do not have a 'prepare' phase which can thus lead to
 * inconsistency. If they underwent the full 2-phase protocol (as they do in
 * Arjuna), then all nested participants will have to repond successfully
 * to prepare before they can be told to commit. The way the OTS mandates the
 * protocol, we could tell some to commit before being told by another resource
 * that it cannot commit! We then have to go through the resources and tell
 * them to abort! May cause heuristic decisions!
 *
 * The only problem is if a resource which does not propagate causes a nested
 * action to fail.
 *
 * SubtransactionAwareResources registered using 'register_resource' do appear
 * to propagate.
 *
 * UGH! Braindead!
 *
 */

public class OTS_ResourceRecord extends com.arjuna.ArjunaLite.Atomic.AbstractRecord
{
    
    /*
     * Constructor
     *
     * propagate tells us whether to propagate the resource at nested commit or
     * not.
     * theResource is the proxy that allows us to call out to the object.
     * myParent is the proxy for the parent coordinator needed in
     * commit_subtransaction.
     */

public OTS_ResourceRecord (boolean propagate, Resource theResource,
			   Coordinator myParent, Uid recCoordUid,
			   OTS_Transaction current)
    {
	super(new Uid(), null, ObjectType.ANDPERSISTENT);

	_parentCoordHandle = myParent;
	_resourceHandle = theResource;
	_stringifiedResourceHandle = null;
	_recCoordUid = (recCoordUid != null) ? recCoordUid : Uid.nullUid();
	_propagateRecord = propagate;
	_committed = false;
	_recovery = false;
    }

public void finalize () throws Throwable
    {
	_resourceHandle = null;
	_stringifiedResourceHandle = null;
	_recCoordUid = null;
	_parentCoordHandle = null;

	super.finalize();
    }

public final Resource resourceHandle ()
    {
	/*
	 * After recovery we may have not been able to recreate the
	 * _resourceHandle due to the fact that the Resource itself
	 * may not be alive resulting in a failure to narrow the
	 * reference returned from string_to_object. In such cases we
	 * cache the stringied reference and retry the narrow when we
	 * need to use the _resourceHandle as at this point the
	 * Resource may have recovered.
	 */ 
	
	if ( (_resourceHandle == null) && (_stringifiedResourceHandle != null) )
	{
	    try
	    {
		NAMESPACE_(CORBA).ORB theOrb = ORBInterface.orb();
		
		if (theOrb == null)
		    throw new UNKNOWN();

		if (DebugController.enabled())
		    System.out.println("OTS_ResourceRecord: About to string_to_object on "+_stringifiedResourceHandle);

		NAMESPACE_(CORBA).Object optr = theOrb.string_to_object(_stringifiedResourceHandle);

		if (DebugController.enabled())
		    System.out.println("OTS_ResourceRecord: Successfully stringed to object, next try to narrow");
		
		theOrb = null;
		
		_resourceHandle = SCOPED_NARROW_(org.omg.CosTransactions,Resource,optr);

		if (DebugController.enabled())
		    System.out.println("OTS_ResourceRecord: Successfully narrowed");
		
		if (_resourceHandle == null)
		    throw new BAD_PARAM();
		else
		{
		    optr = null;
		}
	    }
	    catch (SystemException e)
	    {
		// Failed to narrow to a Resource
		if (DebugController.enabled())
		    System.out.println("OTS_ResourceRecord: Failed to narrow to Resource");
	    }
	}
	return _resourceHandle;
    }
    
public boolean propagateOnCommit ()
    {
	return _propagateRecord;
    }

public int typeIs ()
    {
	return RecordType.USER_DEF_FIRST0;
    }
    
public ClassName className ()
    {
	return CosTransactionsNames.AbstractRecord_OTS_ResourceRecord();
    }
    
public Object value ()
    {
	return resourceHandle();
    }

public void setValue (Object o)
    {
	System.err.println("OTS_ResourceRecord::set_value() called illegally.");
    }

    /*
     * General nesting rules:
     *
     * Only SubtransactionAware resources get registered with nested actions. 
     * The OTS_ResourceRecord creator is assumed to ensure that plain Resources
     * are only registered with the appropriate top level action.
     *
     * That said the _propagateRecord flag ensures that resources registered via
     * register_subtran only take part in the action they where registered in
     * after which they are dropped
     */

public int nestedAbort ()
    {
	/*
	 * We shouldn't need to check committed since aborted nested actions will
	 * drop these resources.
	 */

	SubtransactionAwareResource staResource = null;
	int o = PrepareOutcome.FINISH_ERROR;

	try
	{
	    /*
	     * Must be an staResource to get here.
	     */
	    
	    staResource = SCOPED_NARROW_(org.omg.CosTransactions,SubtransactionAwareResource,resourceHandle());

	    if (staResource == null)
		throw new BAD_PARAM(ORBExceptions.BAD_OBJECT_REF, CompletionStatus.COMPLETED_NO);
	}
	catch (Exception exEnv)
	{
	    // not a sub tran resource, so ignore;

	    o = PrepareOutcome.FINISH_OK;
	}

	if (staResource != null)
	{
	    try
	    {
		staResource.rollback_subtransaction();
		o = PrepareOutcome.FINISH_OK;
	    }
	    catch (Exception e)
	    {
		o = PrepareOutcome.FINISH_ERROR;
	    }
	
	    staResource = null;
	}

	/*
	 * Now release the parent as it is about to be destroyed
	 * anyway.
	 *
	 * The parent may have already been released if abort is
	 * being called because commit failed.
	 */

	_parentCoordHandle = null;

	return o;
    }

    /*
     * If this resource handles nesting this was done in prepare
     * or it should be ignored. In either case returning FINISH_OK
     * suffices.
     */

public int nestedCommit ()
    {
	return PrepareOutcome.FINISH_OK;
    }

    /*
     * OTS does not use nested prepare at all!
     * However, to make nested commit/abort clean we do commit_subtransaction here
     * Note that we only get a prepare from Arjuna if the action is to be committed
     * so this is safe in Arjuna terms.
     */

public int nestedPrepare ()
    {
	int o = PrepareOutcome.ONE_PHASE_ERROR;
	SubtransactionAwareResource staResource = null;
	
	try
	{
	    if (_committed)
		return PrepareOutcome.PREP_OK;
	    else
		_committed = true;
	    
	    staResource = SCOPED_NARROW_(org.omg.CosTransactions,SubtransactionAwareResource,resourceHandle());

	    if (staResource == null)
		throw new BAD_PARAM(ORBExceptions.BAD_OBJECT_REF, CompletionStatus.COMPLETED_NO);
	}
	catch (Exception e)
	{
	    /*
	     * Not subtran aware resource, so return PREP_OK.
	     * Resource will get invocations at top-level only.
	     */
	    
	    o = PrepareOutcome.PREP_OK;
	}

	if (staResource != null)
	{
	    try
	    {
		staResource.commit_subtransaction(_parentCoordHandle);

		o = PrepareOutcome.PREP_OK;
		
		staResource = null;
	    }
	    catch (Exception e)
	    {
		o = PrepareOutcome.ONE_PHASE_ERROR;
	    }
	}
	    
	/*
	 * Now release the parent as it is about to be destroyed
	 * anyway.
	 */

	_parentCoordHandle = null;
	
	return o;
    }

public int topLevelAbort ()
    {
	try
	{
	    if (resourceHandle() != null)
	    {
		resourceHandle().rollback();
	    }
	    else
		return PrepareOutcome.FINISH_ERROR;
	}
	catch (HeuristicCommit exEnv)
	{
	    return PrepareOutcome.HEURISTIC_COMMIT;
	}
	catch (HeuristicMixed ex1)
	{
	    return PrepareOutcome.HEURISTIC_MIXED;
	}
	catch (HeuristicHazard ex2)
	{
	    return PrepareOutcome.HEURISTIC_HAZARD;
	}
	catch (SystemException ex3)
	{
	    return PrepareOutcome.FINISH_ERROR;
	}
    
	return PrepareOutcome.FINISH_OK;
    }

public int topLevelCommit ()
    {
	try
	{
	    if (resourceHandle() != null)
	    {
		resourceHandle().commit();
	    }
	    else
		return PrepareOutcome.FINISH_ERROR;
	}
	catch (NotPrepared ex1)
	{
	    return PrepareOutcome.NOT_PREPARED;
	}
	catch (HeuristicRollback ex2)
	{
	    return PrepareOutcome.HEURISTIC_ROLLBACK;
	}
	catch (HeuristicMixed ex3)
	{
	    return PrepareOutcome.HEURISTIC_MIXED;
	}
	catch (HeuristicHazard ex4)
	{
	    return PrepareOutcome.HEURISTIC_HAZARD;
	}
	catch (SystemException ex5)
	{
	    return PrepareOutcome.FINISH_ERROR;
	}

	return PrepareOutcome.FINISH_OK;
    }

public int topLevelPrepare ()
    {
	try
	{
	    if (resourceHandle() != null)
	    {
		switch (ENUM_VALUE_(resourceHandle().prepare()))
		{
		case ENUM_CONST_(Vote,VoteCommit):
		    return PrepareOutcome.PREP_OK;
		case ENUM_CONST_(Vote,VoteRollback):
		    return PrepareOutcome.PREP_NOTOK;
		case ENUM_CONST_(Vote,VoteReadOnly):
		    return PrepareOutcome.PREP_READONLY;
		}
	    }
	    else
		return PrepareOutcome.PREP_NOTOK;
	}
	catch (HeuristicMixed ex)
	{
	    return PrepareOutcome.HEURISTIC_MIXED;
	}
	catch (HeuristicHazard ex)
	{
	    return PrepareOutcome.HEURISTIC_HAZARD;
	}
	catch (Exception e)
	{
	    return PrepareOutcome.PREP_NOTOK;
	}

	return PrepareOutcome.PREP_NOTOK;
    }
    
public int nestedOnePhaseCommit ()
    {
	int res = nestedPrepare();

	switch (res)
	{
	case PrepareOutcome.PREP_OK:
	    return nestedCommit();
	case PrepareOutcome.PREP_READONLY:
	    return PrepareOutcome.FINISH_OK;
	default:
	    return PrepareOutcome.FINISH_ERROR;
	}
    }

public int topLevelOnePhaseCommit ()
    {
	try
	{
	    if (resourceHandle() != null)
		resourceHandle().commit_one_phase();
	}
	catch (HeuristicHazard e1)
	{
	    return PrepareOutcome.HEURISTIC_HAZARD;
	}
#if defined(DRAFT1) || defined(DRAFT2)
	catch (HeuristicMixed e2)
	{
	    return PrepareOutcome.HEURISTIC_MIXED;
	}
	catch (HeuristicRollback e3)
	{
	    return PrepareOutcome.HEURISTIC_ROLLBACK;
	}
#endif    
	catch (TransactionRolledBack e4)
	{
	    return PrepareOutcome.FINISH_ERROR;
	}
	catch (InvalidTransaction e5)
	{
	    return PrepareOutcome.FINISH_ERROR;
	}
	catch (Exception e5)
	{
	    /*
	     * Unknown error - better assume heuristic!
	     */
	    
	    return PrepareOutcome.HEURISTIC_HAZARD;
	}

	return PrepareOutcome.FINISH_OK;
    }

public boolean forgetHeuristic ()
    {
	try
	{
	    if (resourceHandle() != null)
	    {
		resourceHandle().forget();
		return true;
	    }
	    else
		System.err.println("OTS_ResourceRecord::forgetHeuristic called without a resource!");
	}
	catch (SystemException e)
	{
	    System.err.println("WARNING:OTS_ResourceRecord::forgetHeuristic caught exception");
	}

	return false;
    }

public static AbstractRecord create ()
    {
	return new OTS_ResourceRecord();
    }

public void remove (AbstractRecord toDelete)
    {
	toDelete = null;
    }
    
public void print (PrintStream strm)
    {
	super.print(strm);

	strm.println("OTS_Resource Record");
	strm.println(resourceHandle()+"\t"+_parentCoordHandle+"\t"+_propagateRecord);
    }

    /*
     * restore_state and save_state for OTS_ResourceRecords doesn't generally
     * apply due to object pointers. However, we need to save something so we
     * can recover failed transactions. So, rather than insist that all Resources
     * derive from a class which we can guarantee will give us some unique id, we
     * simply rely on string_to_object and object_to_string to be meaningful.
     */
    
public boolean restore_state (InputObjectState os, int t)
    {
	int isString = 0;
	boolean result = super.restore_state(os, t);

	if (!result)
	    return false;
	
	try
	{
	    isString = os.unpackInt();

	    /*
	     * Do we need to restore the parent coordinator handle?
	     */

	    _parentCoordHandle = null;
	    
	    if (isString == 1)
	    {
		_stringifiedResourceHandle = os.unpackString();

		// Could call resourceHandle() here to restore the
		// _resourceHandle reference

		// Unpack recovery coordinator Uid
		_recCoordUid.unpack(os);

		if (DebugController.enabled())
		    System.out.println("OTS_ResourceRecord.restore_state: unpacked rec co with uid="+_recCoordUid);
	    }
	}
	catch (IOException e)
	{
	    result = false;
	}

	return result;
    }

public boolean save_state (OutputObjectState os, int t)
    {
	boolean result = super.save_state(os, t);

	if (!result)
	    return false;
	
	try
	{	
	    /*
	     * Do we need to save the parent coordinator handle?
	     */


	    /*
	     * If we have a _resourceHandle then we stringify it and
	     * pack the string.  Failing that if we have a cached
	     * stringified version (in _stringifiedResourceHandle)
	     * then we pack that. If we have neither then we're
	     * doomed.  
	     */

	    if ( (resourceHandle() == null) && (_stringifiedResourceHandle == null) )
	    {
		os.packInt(-1);
	    }
	    else
	    {
		os.packInt(1);
		String stringRef = null;

		if (resourceHandle() != null)
		{
		    NAMESPACE_(CORBA).ORB theOrb = ORBInterface.orb();

		    if (theOrb == null)
			throw new UNKNOWN();
		
		    stringRef = theOrb.object_to_string(resourceHandle());

		    theOrb = null;
		}
		else
		{
		    stringRef = _stringifiedResourceHandle;
		}

		if (stringRef != null)
		{
		    os.packString(stringRef);

		    if (DebugController.enabled())
			System.out.println("OTS_ResourceRecord: packed obj ref "+stringRef);
		}
		else
		{
		    result = false;
		}
		
		stringRef = null;
		
		if (result)
		{
		    // Pack recovery coordinator Uid
		    _recCoordUid.pack(os);
		    
		    if (DebugController.enabled())
			System.out.println("Packed rec co uid of "+_recCoordUid);
		}
	    }
	}
	catch (IOException e)
	{
	    result = false;
	}
	catch (SystemException e)
	{
	    result = false;
	}
	
	return result;
    }

public String type ()
    {
	return "/StateManager/AbstractRecord/OTS_ResourceRecord";
    }

public boolean doSave ()
    {
	return true;
    }

public Uid getRCUid ()
    {
	return _recCoordUid;
    }

public void merge (AbstractRecord a)
    {
    }

public void alter (AbstractRecord a)
    {
    }

public boolean shouldAdd (AbstractRecord a)
    {
	return false;
    }

public boolean shouldAlter (AbstractRecord a)
    {
	return false;
    }

public boolean shouldMerge (AbstractRecord a)
    {
	return false;
    }

/*
 * WARNING: roadworks ahead!!
 *
 * When this is finished we need to propagate the changes to OTSAbstractRecord.  */

public boolean shouldReplace (AbstractRecord rec)
    {
	boolean replace = false;
	
	if (rec != null)
	{
	    if (rec.typeIs() == typeIs())
	    {
		OTS_ResourceRecord newRec = (OTS_ResourceRecord) rec;

		/*
		 * Check whether the new record corresponds to the same
		 * RecoveryCoordinator as this one. If so replace.
		 * Don't replace if the uids are NIL_UID
		 */
		
		if ( (_recCoordUid != Uid.nullUid()) &&
		     (_recCoordUid == newRec.getRCUid()) )
		{
		    replace = true;
		}
	    }
	}
	return replace;
    }

    /*
     * Protected constructor used by crash recovery.
     */

protected OTS_ResourceRecord (boolean propagate, Resource theResource,
			      Uid recCoordUid)
    {
	super(new Uid(), null, ObjectType.ANDPERSISTENT);

	_parentCoordHandle = null;
	_resourceHandle = theResource;
	_recCoordUid = (recCoordUid != null) ? recCoordUid : Uid.nullUid();
	_propagateRecord = propagate;
	_committed = false;
	_recovery = true;
    }
	
protected OTS_ResourceRecord ()
    {
	super();

	_parentCoordHandle = null;
	_resourceHandle = null;
	_recCoordUid = Uid.nullUid();
	_propagateRecord = false;
	_committed = false;
	_recovery = true;
    }
    
private Coordinator _parentCoordHandle;
private Resource _resourceHandle;
private String _stringifiedResourceHandle;
private Uid _recCoordUid;
private boolean _propagateRecord;
private boolean _committed;
private boolean _recovery;
    
};
