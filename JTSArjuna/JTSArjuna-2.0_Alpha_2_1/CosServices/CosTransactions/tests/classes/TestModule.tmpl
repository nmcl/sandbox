/*
 * Copyright (C) 1996, 1997, 1998, 1999,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: TestModule.tmpl,v 1.2 2000/03/16 16:17:17 nmcl Exp $
 */

#ifdef ORBACUS
// bug in ORBacus?

#pragma prefix ""
#endif

#ifndef RCPORB
INCLUDE_DIRECTIVE <idl/CosTransactions.idl>
#else
INCLUDE_DIRECTIVE "CosTransactions.idl"  // uugghh!!
#endif

#if defined(JDK_1_2) && defined(SUNSJDK)
#pragma javaPackage ""
#endif

module TestModule
{
    // grid.idl

    // IDL defintion of a 2-D grid (in row major order):

    /*
     * This is only here as an example of what methods a Resource should
     * provide. Atomic objects *should not* derive from Resource, however.
     * Resource objects should drive atomic objects directly.
     */

#ifndef DAISJ2
    interface grid : CosTransactions::Resource
    {
	readonly attribute long height;  // height of the grid
	readonly attribute long width;   // width of the grid

	// IDL operations

	// set the element [n,m] of the grid, to value:
	void set (in long n, in long m, in long value, in CosTransactions::Control tran );

	// return element [n,m] of the grid:
	long get (in long n, in long m, in CosTransactions::Control tran);
    };
#else
    interface grid : org::omg::CosTransactions::Resource
    {
	readonly attribute long height;  // height of the grid
	readonly attribute long width;   // width of the grid

	// IDL operations

	// set the element [n,m] of the grid, to value:
	void set (in long n, in long m, in long value, in org::omg::CosTransactions::Control tran );

	// return element [n,m] of the grid:
	long get (in long n, in long m, in org::omg::CosTransactions::Control tran);
    };
#endif

    /*
     * This is only here as an example of what methods a Resource should
     * provide. Atomic objects *should not* derive from Resource, however.
     * Resource objects should drive atomic objects directly.
     */

#ifndef DAISJ2
    interface tranobject : CosTransactions::Resource
#else
    interface tranobject : org::omg::CosTransactions::Resource
#endif
    {
	void foobar ();
    };

    /*
     * Here for basic implicit interposition test.
     */

#ifndef DAISJ2    
    interface SetGet : CosTransactions::SubtransactionAwareResource
    {
	void set (in short n, in CosTransactions::Control cont);
	short get (in CosTransactions::Control cont);
    };
#else
    interface SetGet : org::omg::CosTransactions::SubtransactionAwareResource
    {
	void set (in short n, in org::omg::CosTransactions::Control cont);
	short get (in org::omg::CosTransactions::Control cont);
    };
#endif

#ifndef DAISJ2
    interface TranGrid : CosTransactions::Resource, CosTransactions::TransactionalObject
#else
    interface TranGrid : org::omg::CosTransactions::Resource, org::omg::CosTransactions::TransactionalObject
#endif
    {
	readonly attribute short height;  // height of the grid
	readonly attribute short width;   // width of the grid

	// IDL operations

	// set the element [n,m] of the grid, to value:
	void set(in short n, in short m, in short value);

	// return element [n,m] of the grid:
	short get(in short n, in short m);
    };

#ifndef DAISJ2
    interface Hammer
    {
	boolean incr (in long value, in CosTransactions::Control c);
	boolean set (in long value, in CosTransactions::Control c);
	boolean get (inout long value, in CosTransactions::Control c);
    };

    interface ExplicitStack
    {
	long push (in long val, in CosTransactions::Control action);
	long pop  (out long val, in CosTransactions::Control action);
	void printStack ();
    };
#else
    interface Hammer
    {
	boolean incr (in long value, in org::omg::CosTransactions::Control c);
	boolean set (in long value, in org::omg::CosTransactions::Control c);
	boolean get (inout long value, in org::omg::CosTransactions::Control c);
    };

    interface ExplicitStack
    {
	long push (in long val, in org::omg::CosTransactions::Control action);
	long pop  (out long val, in org::omg::CosTransactions::Control action);
	void printStack ();
    };
#endif

#ifndef DAISJ2
    interface stack : CosTransactions::TransactionalObject
#else
    interface stack : org::omg::CosTransactions::TransactionalObject
#endif
    {
	long push (in long val);
	long pop  (out long val);
    };

};
