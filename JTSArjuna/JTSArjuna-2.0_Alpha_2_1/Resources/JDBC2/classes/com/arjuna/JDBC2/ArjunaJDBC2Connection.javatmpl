/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: ArjunaJDBC2Connection.javatmpl,v 1.3.4.2.4.2 2000/07/28 14:41:44 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.JDBC2;

import com.arjuna.OrbCommon.*;
import com.arjuna.ArjunaCommon.Common.*;
import com.arjuna.CosTransactions.OTS;
import com.arjuna.CosTransactions.OTS_Current;
import com.arjuna.CosTransactions.ArjunaOTS.AtomicTransaction;
import com.arjuna.CosTransactions.ArjunaOTS.TopLevelTransaction;
import com.arjuna.jta.*;
import org.omg.CosTransactions.*;
import javax.transaction.*;
import javax.transaction.xa.*;
import javax.sql.*;
import java.util.*;
import java.sql.*;
import org.omg.CosTransactions.Unavailable;
import org.omg.CosTransactions.NotPrepared;
import org.omg.CosTransactions.HeuristicRollback;
import org.omg.CosTransactions.HeuristicCommit;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.SubtransactionsUnavailable;
import org.omg.CosTransactions.NoTransaction;
import javax.transaction.RollbackException;
import java.sql.SQLException;

public class ArjunaJDBC2Connection implements java.sql.Connection
{

public ArjunaJDBC2Connection (String dbUrl, Properties info) throws SQLException
    {
	_autoCommit = true;

	String user = info.getProperty(ArjunaJDBC2Driver.userName);
	String passwd = info.getProperty(ArjunaJDBC2Driver.password);
	String dynamic = info.getProperty(ArjunaJDBC2Driver.dynamicClass);

	if (dynamic == null)
	{
	    _recoveryConnection = new ArjunaJDBC2RecoveryConnection(dbUrl, user, passwd);
	}
	else
	{
	    _recoveryConnection = new ArjunaJDBC2DynamicRecoveryConnection(dbUrl, user, passwd, dynamic);
	}

	_theConnection = _recoveryConnection.getConnection().getConnection();

	/*
	 * Any "modifier" required to work with?
	 */

	_theModifier = ArjunaJDBC2ModifierFactory.getModifier(dbUrl);
    }

public ArjunaJDBC2Connection (String dbName, String user, String passwd) throws SQLException
    {
	this(dbName, user, passwd, null);
    }
    
public ArjunaJDBC2Connection (String dbName, String user, String passwd, String dynamic) throws SQLException
    {
	_autoCommit = true;

	if (dynamic == null)
	    _recoveryConnection = new ArjunaJDBC2RecoveryConnection(dbName, user, passwd);
	else
	    _recoveryConnection = new ArjunaJDBC2DynamicRecoveryConnection(dbName, user, passwd, dynamic);

	_theConnection = _recoveryConnection.getConnection().getConnection();

	/*
	 * Any "modifier" required to work with?
	 */

	_theModifier = ArjunaJDBC2ModifierFactory.getModifier(dbName);
    }

public void finalize ()
    {
	try
	{
	    endConnection();
	}
	catch (Exception e)
	{
	    System.err.println("ArjunaJDBC2Connection.finalize caught: "+e);
	}

	_recoveryConnection = null;
    }

public Statement createStatement () throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.createStatement();
    }

public Statement createStatement (int rs, int rc) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.createStatement(rs, rc);
    }    
    
public PreparedStatement prepareStatement (String sql) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.prepareStatement(sql);
    }

public PreparedStatement prepareStatement (String sql, int rs, int rc) throws SQLException
    {
	checkConnection();

	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.prepareStatement(sql, rs, rc);
    }
    
public CallableStatement prepareCall (String sql) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.prepareCall(sql);
    }

public CallableStatement prepareCall (String sql, int rs, int rc) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.prepareCall(sql, rs, rc);
    }

public String nativeSQL (String sql) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return _theConnection.nativeSQL(sql);
    }

public Map getTypeMap () throws SQLException
    {
	checkConnection();

	return _theConnection.getTypeMap();
    }

public void setTypeMap (Map map) throws SQLException
    {
	checkConnection();
	
	_theConnection.setTypeMap(map);
    }
    
    /*
     * Not allowed if within a transaction.
     */
    
public void setAutoCommit (boolean autoCommit) throws SQLException
    {
	checkConnection();

	if (transactionRunning())
	{
	    if (autoCommit)
		throw new SQLException("Autocommit not allowed by Transaction Service.");
	}
	else
	{
	    _autoCommit = autoCommit;
	    
	    _theConnection.setAutoCommit(autoCommit);
	}
    }

public boolean getAutoCommit () throws SQLException
    {
	checkConnection();

	return _autoCommit;
    }

public void commit () throws SQLException
    {
	checkConnection();

	/*
	 * If there is a transaction running, then it cannot be terminated
	 * via the driver - the user must go through current.
	 */

	if (transactionRunning())
	{
	    throw new SQLException("Commit not allowed by Transaction Service.");
	}
	else
	    _theConnection.commit();
    }

public void rollback () throws SQLException
    {
	checkConnection();

	if (transactionRunning())
	{
	    throw new SQLException("Rollback not allowed by Transaction Service.");
	}
	else
	    _theConnection.rollback();
    }

    /**
     * If there are transactional connections when close is called then we
     * throw an exception.
     */
    
public void close () throws SQLException
    {
	checkConnection();

	try
	{
	    if (_recoveryConnection.connections() == 0)
	    {
		_theConnection.close();

		JDBC2ConnectionManager.remove(this);  // finalize?
	    }
	    else
	    {
		// throw new SQLException("Transaction running when close called!");

		// do nothing and rely on garbage collection!
	    }
	}
	catch (SQLException e1)
	{
	    throw e1;
	}
	catch (Exception e2)
	{
	    throw new SQLException("ArjunaJDBC2Connection.close error: "+e2);
	}
    }

public boolean isClosed () throws SQLException
    {
	checkConnection();
	
	return _theConnection.isClosed();
    }
    
public DatabaseMetaData getMetaData () throws SQLException
    {
	checkConnection();

	return _theConnection.getMetaData();
    }

    /**
     * Can only set readonly before we use the connection in a
     * given transaction!
     */
    
public void setReadOnly (boolean ro) throws SQLException
    {
	checkConnection();

	if (_recoveryConnection.connections() == 0)
	{
	    _theConnection.setReadOnly(ro);
	}
	else
	    throw new SQLException("Cannot set readonly when within a transaction!");
    }
    
public boolean isReadOnly () throws SQLException
    {
	checkConnection();

	return _theConnection.isReadOnly();
    }

public void setCatalog (String cat) throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}

	_theConnection.setCatalog(cat);
    }
	    
public String getCatalog () throws SQLException
    {
	checkConnection();
	
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}

	return _theConnection.getCatalog();
    }

public void setTransactionIsolation (int iso) throws SQLException
    {
	checkConnection();

	if (iso != Connection.TRANSACTION_SERIALIZABLE)
	    throw new SQLException("Must be Connection.TRANSACTION_SERIALIZABLE");
    }

public int getTransactionIsolation () throws SQLException
    {
	checkConnection();

	return _theConnection.getTransactionIsolation();
    }

public SQLWarning getWarnings () throws SQLException
    {
	checkConnection();

	if (_theConnection != null)
	    return _theConnection.getWarnings();
	else
	    throw new SQLException("Invalid connection!");
    }
    
public void clearWarnings () throws SQLException
    {
	checkConnection();

	if (_theConnection != null)
	    _theConnection.clearWarnings();
	else
	    throw new SQLException("Invalid connection!");
    }

java.sql.Connection getConnection () throws SQLException
    {
	return _theConnection;
    }

ConnectionInfo connectionInfo ()
    {
	return (ConnectionInfo) _recoveryConnection;
    }
    
private void checkConnection () throws SQLException
    {
	if (_theConnection == null)
	    throw new SQLException("ArjunaJDBC2Connection: Invalid connection.");
	else
	{
	    if (_recoveryConnection.connections() == 0)  // shouldn't be the case initially
	    {
		_theConnection = _recoveryConnection.getConnection().getConnection();
	    }
	}
    }
    
private boolean transactionRunning () throws SQLException
    {
	try
	{
	    if (JTA_TransactionManager.transactionManager().getTransaction() != null)
	    {
		return true;
	    }
	    else
	    {
		return false;
	    }
	}
	catch (Exception e)
	{
	    throw new SQLException(e.toString());
	}
    }

    /*
     * Don't need to do this anymore, since we are using xa, and
     * this implies the following.
     */
    
private void setupConnection () throws SQLException
    {
	if (true)
	    return;
	
	/*
	 * Try to setup the db connection in a way which makes
	 * sense for the OTS.
	 */

	try
	{
	    _theConnection.setAutoCommit(false);
	    _autoCommit = false;
	}
	catch (SQLException e)
	{
	    /*
	     * Could not set autocommit off. In which case all
	     * calls to the db are separate top-level transactions,
	     * and this resource becomes useless.
	     */

	    System.err.println("WARNING - ArjunaJDBC2Connection - could not disable autocommit.");
	    
	    _autoCommit = true;
	}

	try
	{
	    DatabaseMetaData metaData = _theConnection.getMetaData();

	    if (metaData.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE))
	    {
		try
		{
		    _theConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		}
		catch (SQLException e)
		{
		    System.err.print("WARNING - ArjunaJDBC2Connection - failed to set isolation level: "+e);
		}
	    }
	}
	catch (Exception e)
	{
	    System.err.print("WARNING - ArjunaJDBC2Connection - failed to set isolation level: "+e);
	}
    }

private void endConnection () throws SQLException
    {
	if (_theConnection != null)
	{
	    try
	    {
		_theConnection.close();
		_theConnection = null;
		_recoveryConnection = null;
	    }
	    catch (SQLException e)
	    {
		System.err.println("ArjunaJDBC2Connection.endConnection caught: "+e);
	    }
	}
    }

    /*
     * Whenever a JDBC call is invoked on us we get an XAResource and
     * try to register it with the transaction. If the same thread
     * causes this to happen many times within the same transaction then
     * we will currently attempt to get and register many redundant XAResources
     * for it. The JTA implementation will detect this and ignore all but the
     * first for each thread. However, a further optimisation would be to trap
     * such calls here and not do a registration at all. This would require the
     * connection object to be informed whenever a transaction completes so that
     * it could flush its cache of XAResources though.
     */

private final void registerDatabase () throws SQLException
    {
	setupConnection();
	
	if (_theConnection != null)
	{
	    XAResource xares = null;

	    try
	    {
		TransactionManager tm = JTA_TransactionManager.transactionManager();
		JTA_Transaction tx = (JTA_Transaction) tm.getTransaction();
		Object[] params;
		
		if (_theModifier != null)
		    params = new Object[2];
		else
		    params = new Object[1];

		params[JTA_Transaction.XACONNECTION] = _recoveryConnection;

		if (_theModifier != null)
		    params[JTA_Transaction.XAMODIFIER] = _theModifier;
		
		/*
		 * Use our extended version of enlistResource.
		 */

		xares = _recoveryConnection.getResource();

		if (!tx.enlistResource(xares, params))
		    throw new SQLException("ArjunaJDBC2Connection.registerDatabase - enlistResource failed");

		params = null;
		xares = null;
		tx = null;
		tm = null;
	    }
	    catch (RollbackException e1)
	    {
		throw new SQLException("ArjunaJDBC2Connection.registerDatabase - "+e1);
	    }
	    catch (SystemException e2)
	    {
		if (xares != null)
		{
		    try
		    {
			_recoveryConnection.removeConnection();
		    }
		    catch (Exception e)
		    {
		    }
		}
		    
		throw new SQLException("ArjunaJDBC2Connection.registerDatabase - "+e2);
	    }
	    catch (SQLException e3)
	    {
		if (xares != null)
		{
		    try
		    {
			_recoveryConnection.removeConnection();
		    }
		    catch (Exception e)
		    {
		    }
		}

		throw e3;
	    }
	}
    }

private final void checkTransaction () throws SQLException, Unavailable
    {
	try
	{
	    Control c = OTS.current().get_control();

	    if (c != null)
	    {
		Coordinator coord = c.get_coordinator();
	    
		if (!coord.is_top_level_transaction())
		    throw new SubtransactionsUnavailable();

		coord = null;
		c = null;
	    }
	    else
		throw new Unavailable();
	}
	catch (Unavailable e1)
	{
	    throw e1;
	}
	catch (SubtransactionsUnavailable e2)
	{
	    throw new SQLException("Subtransactions unavailable!");
	}
	catch (Exception e3)
	{
	    throw new SQLException("Could not get transaction information.");
	}
    }

private boolean                  _autoCommit;
private boolean                  _readOnly;
private JTA_XAConnectionRecovery _recoveryConnection;
private Connection               _theConnection;
private JTA_XAModifier           _theModifier;
 
};

