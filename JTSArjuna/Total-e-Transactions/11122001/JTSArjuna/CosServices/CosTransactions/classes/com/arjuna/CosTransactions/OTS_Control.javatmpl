/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: OTS_Control.javatmpl,v 1.13.2.2.2.2.2.2.2.1.6.3.10.1.2.1.2.4.2.1.64.2.30.1 2002/07/02 14:54:45 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosTransactions;

import com.arjuna.OrbCommon.*;
import org.omg.CosTransactions.*;
import com.arjuna.ArjunaOTS.*;
import com.arjuna.ArjunaCommon.Common.*;
import com.arjuna.ArjunaCommon.Template.*;
import com.arjuna.ArjunaCore.Atomic.ActionStatus;
import java.io.PrintStream;
import java.util.*;

import org.omg.CORBA.SystemException;

/*
 * Although a transaction may have a timeout associated with it,
 * this can only happen for a top-level transaction. This, combined
 * with the fact that the default timeout is 0 means that many (most?)
 * transactions will not have a timeout. So, rather than increase the
 * size of all of the transaction objects, we keep the information
 * separate in the TransactionReaper. (Since it already needs to have this
 * information anyway this is no extra burden.) It also means that we can
 * support non-Arjuna transactions: if we were to add a new method to the
 * control (get_timeout, say) then this would be Arjuna specific.
 */

/**
 * An implementation of CosTransactions::Control
 *
 * @author Mark Little (mark@arjuna.com)
 * @version $Id: OTS_Control.javatmpl,v 1.13.2.2.2.2.2.2.2.1.6.3.10.1.2.1.2.4.2.1.64.2.30.1 2002/07/02 14:54:45 nmcl Exp $
 * @since JTS 1.0.
 */

public class OTS_Control extends SCOPED_SKEL_(com.arjuna.ArjunaOTS,ActionControl)
{

    /**
     * Create a new instance with the specified parent.
     */

public OTS_Control (Control parentCon, OTS_Transaction parentTran)
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Control::OTS_Control ( Control parentCon, "
						 + ((parentTran != null) ? parentTran.get_uid() : Uid.nullUid())+" )");
	}

	_theTerminator = null;
	_theCoordinator = null;
	_parentControl = parentCon;
	_transactionHandle = new OTS_Transaction(_parentControl, parentTran);
	_theUid = _transactionHandle.get_uid();
	_transactionImpl = null;
	_myControl = null;
	_destroyed = false;
	
	/*
	 * Pass a pointer to the control to the transaction so it knows
	 * what the control is. We use this for transaction comparison and
	 * thread-to-context management.
	 */

	_transactionHandle.setControlHandle(this);

	addControl();
    }

public void finalize () throws Throwable
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.DESTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Control.finalize ()");
	}

	if (!_destroyed)
	{
	    try
	    {
		destroy();
	    }
	    catch (Exception e)
	    {
	    }
	}
	
	tidyup();

	/*
	 * Do this here rather than in tidyup so anyone else
	 * with a reference to this control can continue to
	 * determine the status of the transaction until the
	 * control is garbage collected.
	 */
	
	_theTerminator = null;
	_theCoordinator = null;
	
	_theUid = null;
    }
 
/**
 * Used for garbage collection so we can keep a list
 * of controls and delete local ones.
 */

public Uid get_uid ()
    {
	return _theUid;
    }

/**
 * @return the transaction implementation.
 */
 
public final OTS_Transaction getImplHandle ()
    {
	return _transactionHandle;
    }

/**
 * @return the CORBA Control object.
 */

public final synchronized Control getControl ()
    {
	if (_myControl == null)
	{
	    READY_IMPL_(this);
		    
	    _myControl = CORBA_REF_(this,com.arjuna.ArjunaOTS.ActionControl);
	}
	
	return SCOPED_NARROW_(org.omg.CosTransactions,Control,_myControl);
    }

public Terminator get_terminator () throws SystemException, org.omg.CosTransactions.Unavailable
    {
	if ((_transactionHandle != null) && (_theTerminator == null))
	    createTransactionHandle();

	if (_theTerminator != null)
	    return _theTerminator;
	else
	    throw new Unavailable();
    }

public Coordinator get_coordinator () throws SystemException, org.omg.CosTransactions.Unavailable
    {
	if ((_transactionHandle != null) && (_theCoordinator == null))
	    createTransactionHandle();

	if (_theCoordinator != null)
	    return _theCoordinator;
	else
	    throw new Unavailable();
    }

public void set_terminator (Terminator terminator) throws SystemException, org.omg.CosTransactions.Unavailable
    {
	throw new org.omg.CosTransactions.Unavailable();
    }

public void set_coordinator (Coordinator coordinator) throws SystemException, org.omg.CosTransactions.Unavailable
    {
	throw new org.omg.CosTransactions.Unavailable();
    }

public Control getParentControl () throws Unavailable, SystemException
    {
	if (_parentControl != null)
	    return _parentControl;
	else
	    return null;
    }

/**
 * destroy should only be called for remote Control objects.
 * Destroy them locally by calling DESTROY_IMPL.
 *
 * Since we assume that a factory will either be remote or local, we can
 * destroy this object and rely upon the ORB to return an exception to
 * subsequent clients which indicates they no longer have a valid reference.
 */

public synchronized void destroy () throws ActiveTransaction, ActiveThreads, BadControl, Destroyed, SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Control::destroy called for "+get_uid());
	}

	canDestroy();

	try
	{
	    _destroyed = true;

	    removeControl();
	    
	    /*
	     * If this is a proxy then there won't be a local
	     * transaction implementation.
	     */

	    if (_transactionHandle != null)
	    {
		_transactionHandle.setControlHandle(null);  // for gc
		_transactionHandle = null;
	    }

	    /*
	     * We do a lazy connect to the ORB, so we may never
	     * have to do a disconnect either.
	     */

	    if (_myControl != null)
	    {
		DESTROY_IMPL_(this);
		_myControl = null;
	    }

	    tidyup();
	}
	catch (Exception e)
	{
	    ErrorStream.stream(ErrorStream.WARNING).println("OTS_Control could not destroy object: "+e);
	    e.printStackTrace();
	}
    }

public String toString ()
    {
	return "OTS_Control < "+get_uid()+" >";
    }

protected synchronized void canDestroy () throws ActiveTransaction, ActiveThreads, BadControl, Destroyed, SystemException
    {
	canDestroy(true);
    }

/**
 * Generally we do not want to destroy the transaction if it is doing
 * some work, or other threads are still registered with it. However,
 * for some situations (e.g., the transaction reaper) we must terminate
 * the transaction regardless.
 */

protected synchronized void canDestroy (boolean force) throws ActiveTransaction, ActiveThreads, BadControl, Destroyed, SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::canDestroy ( "+force+" ) called for "+get_uid());
	}

	if (_destroyed)
	    throw new Destroyed();
	
	if (_transactionHandle != null)  // not a proxy control.
	{
	    if ((_transactionHandle.activeThreads() != 0) && (!force))
	    {
		if (DebugController.enabled())
		{
		    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
							 FacilityCode.FAC_OTS, "OTS_Control::canDestroy for "+get_uid()+" - transaction has "+_transactionHandle.activeThreads()+" active threads.");
		}
		
		throw new ActiveThreads();
	    }

	    boolean active = false;
	    
	    try
	    {
		if ((force) || ((_transactionHandle.status() == ActionStatus.CREATED) ||
				(_transactionHandle.status() == ActionStatus.ABORTED) ||
				(_transactionHandle.status() == ActionStatus.COMMITTED)))
		{
		    active = false;
		}
		else
		    active = true;  // might be committing, aborting, etc.
	    }
	    catch (Exception e)
	    {
		active = true;
	    }

	    if (active)
	    {
		if (DebugController.enabled())
		{
		    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
							 FacilityCode.FAC_OTS, "OTS_Control::canDestroy for "+get_uid()+" - transaction active.");
		}

		throw new ActiveTransaction();
	    }

	} // it is always safe to delete proxies.
	
	/*
	 * Got here, so it is either ok to destroy or the caller
	 * wants to force the destruction regardless.
	 */
    }
 
/**
 * This is used for implicit context propagation, and for
 * Current.resume on remote transactions. In both cases we
 * need to create a local control given a remove coordinator
 * and terminator, but we can't create a transaction handle.
 */

protected OTS_Control (Coordinator coordinator, Terminator terminator)
    {
	this(coordinator, terminator, null, null);
    }

protected OTS_Control (Coordinator coordinator, Terminator terminator, Uid uid)
    {
	this(coordinator, terminator, null, uid);
    }

protected OTS_Control (Coordinator coordinator, Terminator terminator,
		       Control parentControl, Uid uid)
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::OTS_Control (Coordinator, Terminator, Control, "+uid+" )");
	}

	_theTerminator = terminator;
	_theCoordinator = coordinator;
	_parentControl = parentControl;
	_transactionHandle = null;
	_transactionImpl = null;
	_myControl = null;
	_destroyed = false;

	if (uid == null)
	{
	    UidCoordinator uidCoord = OTS_Helper.getUidCoordinator(coordinator);

	    if (uidCoord != null)
	    {
		try
		{
		    _theUid = OTS_Helper.getUid(uidCoord);
		}
		catch (Exception e)
		{
		    /*
		     * Not an Arjuna transaction, so allocate any Uid.
		     */
		
		    _theUid = new Uid();
		}

		uidCoord = null;
	    }
	    else
		_theUid = new Uid();
	}
	else
	    _theUid = uid;

	duplicateTransactionHandle(coordinator, terminator);
	
	addControl();
    } 
 
/**
 * Protected constructor for inheritance. The derived
 * classes are responsible for setting everything up,
 * including adding the control to the list of controls
 * and assigning the Uid variable.
 */
 
protected OTS_Control ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::OTS_Control ()");
	}

	_theTerminator = null;
	_theCoordinator = null;
	_parentControl = null;
	_transactionHandle = null;
	_theUid = Uid.nullUid();
	_transactionImpl = null;
	_myControl = null;
	_destroyed = false;
    }

protected final void createTransactionHandle ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::createTransactionHandle ()");
	}

	/* Create/bind the 2 IDL interfaces to the same implementation */

	_transactionImpl = new SCOPED_TIE_INSTANCE_(com.arjuna.ArjunaOTS,ArjunaTransaction)(_transactionHandle);

	READY_IMPL_(_transactionImpl);

	ArjunaTransaction transactionReference = CORBA_REF_(_transactionImpl,com.arjuna.ArjunaOTS.ArjunaTransaction);
	
	_theCoordinator = SCOPED_NARROW_(com.arjuna.ArjunaOTS,UidCoordinator,transactionReference);
	_theTerminator = SCOPED_NARROW_(org.omg.CosTransactions,Terminator,transactionReference);
	
	transactionReference = null;
    }

protected final void duplicateTransactionHandle (Coordinator coord,
						 Terminator term)
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::duplicateTransactionHandle ()");
	}

	_theCoordinator = coord;
	_theTerminator = term;
    }

/**
 * OTS_Transaction needs to call these methods to enable garbage
 * collection to occur.
 */

protected boolean addControl ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::addControl ()");
	}

	synchronized (OTS_Control.allControls)
        {
	    OTS_Control.allControls.put(get_uid(), this);
	}
	
	return true;
    }

protected boolean removeControl ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::removeControl ()");
	}

	try
	{
	    synchronized (OTS_Control.allControls)
		{
		    OTS_Control.allControls.remove(get_uid());
		}
	}
	catch (Exception ex)
	{
	    return false;
	}

	return true;
    }

/**
 * No need to protect with mutex since only called from
 * destroy (and destructor), which is protected with a
 * mutex. Do not call directly without synchronizing.
 */

protected final void tidyup ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PROTECTED,
						 FacilityCode.FAC_OTS, "OTS_Control::tidyup ()");
	}

	_myControl = null;
	_parentControl = null;
	
	try
	{
	    if (_transactionImpl != null)
	    {
		DESTROY_IMPL_(_transactionImpl);
		
		_transactionHandle = null;
		_transactionImpl = null;
	    }

	}
	catch (Exception e)
	{
	    ErrorStream.warning().println("OTS_Control.tidyup: "+e.toString());
	}
    }

    /*
     * Make private, with public accessor.
     */

public static Hashtable allControls = new Hashtable();
 
protected Terminator      _theTerminator;
protected Coordinator     _theCoordinator;
protected Control         _parentControl;
protected OTS_Transaction _transactionHandle;
protected Uid             _theUid;
protected ActionControl   _myControl;
protected SCOPED_TIE_INSTANCE_(com.arjuna.ArjunaOTS,ArjunaTransaction) _transactionImpl;
 
protected boolean _destroyed;

}
