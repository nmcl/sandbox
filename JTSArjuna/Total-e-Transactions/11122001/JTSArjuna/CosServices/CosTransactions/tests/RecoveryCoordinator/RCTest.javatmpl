/*
 * Copyright (C) 2001,
 *
 * Hewlett Packard Corporation,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: RCTest.javatmpl,v 1.1.2.1 2001/08/07 11:03:49 nmcl Exp $
 */

#include <Common/OrbPortability.h>
#include <CosTransactions/CosTranNames.h>

import CosTransactionsTests.*;
import TestModule.*;
import com.arjuna.OrbCommon.*;
import com.arjuna.CosTransactions.*;
import org.omg.CosTransactions.*;
import com.arjuna.ArjunaCommon.Common.*;

import org.omg.CosTransactions.Unavailable;
import org.omg.CORBA.SystemException;

#include <CosTransactions/CosTranExceptions.h>

public class RCTest
{

public static void main (String[] args)
    {
	boolean shouldCommit = true;

	for (int i = 0; i < args.length; i++)
	{
	    if (args[i].compareTo("-abort") == 0)
		shouldCommit = false;
	    if (args[i].compareTo("-help") == 0)
	    {
		System.out.println("Usage: RCTest [-abort]");
		System.exit(0);
	    }
	}

	Coordinator coord = null;
	
	try
	{
	    ORBInterface.initORB(args, null);
	    OAInterface.initOA();

	    OTS_Current current = OTS.current();
	    AtomicResource aImpl = new AtomicResource(shouldCommit);
	    Resource atomicObject = aImpl.getReference();

	    System.out.println("beginning top-level transaction.");
	    
	    current.begin();

	    Control myControl = current.get_control();

	    if (myControl == null)
	    {
		System.err.println("Error - myControl is nil");
		System.exit(0);
	    }
	    
	    System.out.println("getting coordinator");
	    
	    coord = myControl.get_coordinator();

	    myControl = null;
	    
	    System.out.println("registering resources.");

	    RecoveryCoordinator rc = null;
	    
	    try
	    {
		rc = coord.register_resource(atomicObject);
	    }
	    catch (Exception ex)
	    {
		System.out.println("Failed to register resources: "+ex);
		ex.printStackTrace();
		
		System.exit(0);
	    }

	    if (rc == null)
		System.out.println("No recovery coordinator reference.");
	    else
	    {
		Status s = Status.StatusUnknown;
		
		try
		{
		    System.out.println("Attempting to use recovery coordinator.");
		    
		    s = rc.replay_completion(atomicObject);
		}
		catch (NotPrepared e)
		{
		    s = Status.StatusActive;
		}
		catch (Exception ex)
		{
		    System.err.println("Caught: "+ex);
		    
		    System.exit(0);
		}

		System.out.println("Got: "+OTS_Utility.printStatus(s));
	    }
	    
	    System.out.println("committing top-level transaction.");

	    if (shouldCommit)
		current.commit(true);
	    else
		current.rollback();

	    if (rc == null)
		System.out.println("No recovery coordinator reference.");
	    else
	    {
		Status s = Status.StatusUnknown;
		
		try
		{
		    System.out.println("Attempting to use recovery coordinator.");
		
		    s = rc.replay_completion(atomicObject);
		}
		catch (NotPrepared e)
		{
		    s = Status.StatusActive;
		}
		catch (Exception ex)
		{
		    System.err.println("Caught: "+ex);
		    
		    System.exit(0);
		}

		System.out.println("Got: "+OTS_Utility.printStatus(s));
	    }
	}
	catch (TransactionRolledBack e1)
	{
	    System.out.println("\nTransaction RolledBack exception");
	}
	catch (HeuristicMixed e2)
	{
	    System.out.println("\nTransaction HeuristicMixed exception");
	}
	catch (HeuristicHazard e3)
	{
	    System.out.println("\nTransaction HeuristicHazard exception");
	}	
	catch (Exception e4)
	{
	    System.out.println("Caught unexpected exception: "+e4);
	}

	System.out.println("Trying to determing final transaction outcome.");

#ifndef CORBA_2_0
	org.omg.CosTransactions.Status status = Status.StatusUnknown;
#else
	int status = Status.StatusUnknown;
#endif
	
	try
	{
	    if (coord != null)
	    {
		status = coord.get_status();

		coord = null;
	    }
	    else
		System.out.println("\nCould not determine action status.");
	}
	catch (SystemException ex1)
	{
	    // assume invalid reference - tx may have been garbage collected
	}
	catch (Exception e5)
	{
	    System.out.println("Caught unexpected exception:" +e5);
	}

	System.out.println("\nFinal action status: "+OTS_Utility.printStatus(status));

	System.out.println("Test completed successfully.");

	OAInterface.shutdownOA();
	ORBInterface.shutdownORB();
    }

};
