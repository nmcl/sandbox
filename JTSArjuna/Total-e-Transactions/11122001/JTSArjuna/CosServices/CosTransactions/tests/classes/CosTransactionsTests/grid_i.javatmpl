/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: grid_i.javatmpl,v 1.1.28.1 2000/11/08 14:26:03 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package CosTransactionsTests;

import TestModule.*;
import org.omg.CosTransactions.*;
import com.arjuna.OrbCommon.OAInterface;
import com.arjuna.OrbCommon.ORBInterface;

import org.omg.CosTransactions.HeuristicCommit;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.NotPrepared;
import org.omg.CosTransactions.HeuristicRollback;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;
import org.omg.CORBA.UNKNOWN;

public class grid_i extends SCOPED_SKEL_(TestModule,grid)
{
    
public grid_i (int h, int w, String markerName)
    {
#ifdef HAVE_MARKER_NAME	
	super(markerName);
#endif	

	READY_NAMED_IMPL_(this,markerName.getBytes());

	m_height = h;   // set up height
	m_width = w;    // set up width
	// now allocate the 2-D array: as an array of pointers to 1-D arrays.
	m_a = new int [h][w];

	ref = CORBA_REF_(this,Resource);
    }

public grid_i (int h, int w)
    {
	READY_IMPL_(this);
	
	m_height = h;   // set up height
	m_width = w;    // set up width
	// now allocate the 2-D array: as an array of pointers to 1-D arrays.
	m_a = new int [h][w];

	ref = CORBA_REF_(this,Resource);
    }

public Resource getReference ()
    {
	return ref;
    }
 
public int height () throws SystemException
    {
	return m_height;
    }

public int width () throws SystemException
    {
	return m_width;
    }

public void set (int n, int m, int value, Control cp) throws SystemException
    {
	try
	{
	    Coordinator co = cp.get_coordinator();
	    
	    if (co != null)
		co.register_resource(ref);
	    else
		System.err.println("Error - no transaction coordinator!");
	    
	    m_a[n][m] = value;
	}
	catch (UserException e)
	{
	    throw new UNKNOWN();
	}
	catch (SystemException e)
	{
	    throw new UNKNOWN();
	}
    }

public int get (int n, int m, Control p) throws SystemException
    {
	return m_a[n][m];
    }

#ifndef CORBA_2_0
public org.omg.CosTransactions.Vote prepare () throws SystemException
#else
public int prepare () throws SystemException
#endif
    {
	System.out.println("GRID : PREPARE");
    
	return Vote.VoteCommit;
    }

public void rollback () throws SystemException, HeuristicCommit, HeuristicMixed, HeuristicHazard
    {
	System.out.println("GRID : ROLLBACK");
    }

public void commit () throws SystemException, NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard
    {
	System.out.println("GRID : COMMIT");
    }

public void forget () throws SystemException
    {
	System.out.println("GRID : FORGET");
    }

public void commit_one_phase () throws SystemException, HeuristicHazard
    {
	System.out.println("GRID : COMMIT_ONE_PHASE");
    }

private int m_height;  // store the height
private int m_width;   // store the width
private int[][] m_a;      // a 2-D array to store the grid data itself
private Resource ref;
 
};
