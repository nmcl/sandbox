//
// Copyright (C) 2000,
//
// Arjuna Solutions, Ltd.,
// Newcastle upon Tyne,
// Tyne and Wear,
// UK.
//
// $Id: Recovery.tmpl,v 1.1.2.2 2002/07/04 10:41:30 delsworthy Exp $
//


#include <idl/CosTransactions.idl>

#pragma prefix "Recovery.arjuna.com"


module Recovery
{
    enum CrashBehavior
    {
        CrashBehaviorCrashInPrepare,
        CrashBehaviorCrashInCommit,
        CrashBehaviorCrashInRollback,
        CrashBehaviorCrashInCommitOnePhase,
        CrashBehaviorCrashInForget,
        CrashBehaviorNoCrash
    };

    struct ResourceBehavior
    {
        CrashBehavior   crash_behavior;
    };
    typedef sequence<ResourceBehavior> ResourceBehaviorSeq;

    struct CheckBehavior
    {
        boolean allow_done;
        boolean allow_returned_prepared;
        boolean allow_returned_committing;
        boolean allow_returned_committed;
        boolean allow_returned_rolledback;
        boolean allow_raised_not_prepared;
    };
    typedef sequence<CheckBehavior> CheckBehaviorSeq;

    enum ResourceTrace
    {
        ResourceTraceUnknown,
        ResourceTraceNone,
        ResourceTracePrepare,
        ResourceTracePrepareCommit,
        ResourceTracePrepareRollback,
        ResourceTraceCommitOnePhase,
        ResourceTraceRollback,
        ResourceTracePrepareForget,
        ResourceTracePrepareCommitForget,
        ResourceTracePrepareRollbackForget,
        ResourceTraceCommitOnePhaseForget,
        ResourceTraceCommit
    };

    interface BeforeCrashService
    {
        void    setup_oper(in CosTransactions::Control ctrl, in ResourceBehaviorSeq resource_behaviors);
        boolean is_correct();
    };

    interface AfterCrashService
    {
        void          setup_oper(in long number_of_resources);
        boolean       check_oper(in CheckBehaviorSeq check_behaviors);
        boolean       is_correct();
        ResourceTrace get_resource_trace(in long resource_number);
    };
};


