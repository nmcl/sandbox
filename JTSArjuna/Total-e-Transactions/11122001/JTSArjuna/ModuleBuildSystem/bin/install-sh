#!/bin/sh
# (roughly) BSD-compatible install
# Copyright (C) 2001 by HP Bluestone Software, Inc. All rights Reserved.
# $Id: install-sh,v 1.1.2.1 2001/08/10 10:28:49 jcoleman Exp $

# Debugging
if [ x$DEBUG_INSTALL != x ]; then
	_DEBUG=echo
fi

# Defaults
BACKUP=false
BACKUP_SUFFIX=old
# Set copy on by default
#COPY=false
COPY=true
MAKEDIRS=false
TEMP_RENAME=false
UNPRIV=false
unset CPFLAGS
STRIP=false
unset DESTDIR
unset DESTFILE

# Options (no checking for bad options!)
MOREFLAGS=true
while [ $MOREFLAGS = true ]; do
	SHIFT=0
	case $1 in
		-b)	BACKUP=true
			SHIFT=1
		;;
		-B)	BACKUP_SUFFIX=$2
			SHIFT=2
		;;
# Note that copy is on by default
		-c)	COPY=true
			SHIFT=1
		;;
		-d)	MAKEDIRS=true
			SHIFT=1
		;;
		-g)	GROUP=$2
			SHIFT=2
		;;
		-l)	echo linkflags not supported >&2
			exit 1
#			SHIFT=2
		;;
		-m)	MODE=$2
			SHIFT=2
		;;
		-o)	OWNER=$2
			SHIFT=2
		;;
		-p)	CPFLAGS=-p
			SHIFT=1
		;;
		-r)	TEMP_RENAME=true
			SHIFT=1
		;;
		-s)	STRIP=true
			SHIFT=1
		;;
		-S)	STRIPFLAGS=$2
			SHIFT=2
		;;
		-U)	UNPRIV=true
			SHIFT=1
		;;
		-*)	echo Unknown argument $1 >&2
			exit 1
		;;
		*)	MOREFLAGS=false
		;;
	esac
	if [ $SHIFT != 0 ]; then
		shift $SHIFT
	fi
done

# Check for parameters
if [ $# -eq 0 ]; then
	echo No parameters >&2
	exit 1
fi

# Destination (last parameter)
DESTDIR=\$`eval echo {$#}`
DESTDIR=`eval echo $DESTDIR`

# Destination is filename or directory?
# If only two arguments, treat slightly differently
if [ ! -d "$DESTDIR" ]; then
	if [ $# -eq 2 ]; then
		DESTFILE=`basename "$DESTDIR"`
		DESTDIR=`dirname "$DESTDIR"`
		if [ ! -d "$DESTDIR" ]; then
			if [ $MAKEDIRS = true ]; then
				$_DEBUG mkdir -p "$DESTDIR" || exit 1
			fi
		fi
	else
		if [ $MAKEDIRS = true ]; then
			$_DEBUG mkdir -p "$DESTDIR" || exit 1
		else
			echo "$DESTDIR" is not a directory >&2
			exit 1
		fi
	fi
fi

# Process arguments
if [ x"$DESTFILE" != x ] && [ $# -ne 2 ]; then
	echo Argument error >&2
	exit 1
fi
while [ $# -gt 1 ]; do
	if [ ! -f $1 ]; then
		echo $1 is not a regular file >&2
		exit 1
	fi
	if [ x"$DESTFILE" = x ]; then
		DESTFILE=`basename $1`
	fi
	if [ $BACKUP = true ]; then
		if [ -f "$DESTDIR"/"$DESTFILE" ]; then
			$_DEBUG mv "$DESTDIR"/"$DESTFILE" "$DESTDIR"/"$DESTFILE.$BACKUP_SUFFIX" || exit 1
		fi
	else
		if [ $TEMP_RENAME = false ]; then
			$_DEBUG rm -f "$DESTDIR"/"$DESTFILE" 2>/dev/null
		fi
	fi
	if [ $TEMP_RENAME = true ]; then
		$_DEBUG cp $CPFLAGS $1 "$DESTDIR"/.inst-tmp.$$ || exit 1
		$_DEBUG rm -f "$DESTDIR"/"$DESTFILE" 2>/dev/null
		$_DEBUG mv "$DESTDIR"/.inst-tmp.$$ "$DESTDIR"/"$DESTFILE" || exit 1
	else
		$_DEBUG cp $CPFLAGS $1 "$DESTDIR"/"$DESTFILE"
	fi
	if [ $COPY = false ]; then
		$_DEBUG rm -f $1 || exit 1
	fi
	if [ x$GROUP != x ] && [ $UNPRIV = false ]; then
		$_DEBUG chgrp "$GROUP" "$DESTDIR"/"$DESTFILE" || exit 1
	fi
	if [ x$OWNER != x ] && [ $UNPRIV = false ]; then
		$_DEBUG chown "$OWNER" "$DESTDIR"/"$DESTFILE" || exit 1
	fi
	if [ x$MODE != x ]; then
		$_DEBUG chmod "$MODE" "$DESTDIR"/"$DESTFILE" || exit 1
	fi
	if [ $STRIP = true ]; then
		$_DEBUG strip "$STRIPFLAGS" "$DESTDIR"/"$DESTFILE" || exit 1
	fi
	shift
done
exit 0

# Usage

#	install [-b] [-B suffix] [-c] [-d] [-g group] [-m mode] [-o owner] [-p] [-r] [-s] [-S flags] [-U] file1 file2
#	install [-b] [-B suffix] [-c] [-d] [-g group] [-m mode] [-o owner] [-p] [-r] [-s] [-S flags] [-U] file1 ... fileN directory

#	-b	backup original file with suffix ".old"
#	-c	copy source to destination (on by default)
#	-B	set backup suffix to 'suffix'
#	-d	create destination directory
#	-g	specify destination group
#	-m	specify destination mode
#	-o	specify destination owner
#	-p	preserve file permissions (uses `cp -p`)
#	-r	install to a temporary file and rename this file to the destination
#	-s	run `strip` on the destination
#	-S	pass 'flags' to `strip`
#	-U	unpriveliged - do not set group, mode or owner of destination

# Bugs

#	It is possible to overwrite the original file.
#	If the source is not a regular file, behaviour is not guaranteed.
#	If the destination is not a directory, behaviour is not guaranteed.
#	The '-l linkflags' arguments are not supported
