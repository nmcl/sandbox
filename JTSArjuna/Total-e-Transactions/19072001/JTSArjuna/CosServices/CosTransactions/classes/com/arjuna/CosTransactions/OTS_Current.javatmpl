/*
 * Copyright (C) 1998, 1999, 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_Current.javatmpl,v 1.7.2.1.4.2.4.3.2.1.6.1.6.2.2.2.2.3.2.2.4.1.2.1.16.2.16.1.4.1 2001/08/07 11:12:36 nmcl Exp $
 */

#include <Common/OrbPortability.h>
#include <CosTransactions/CosTranNames.h>

package com.arjuna.CosTransactions;

import com.arjuna.OrbCommon.*;
import org.omg.CosTransactions.*;
import com.arjuna.CosTransactions.ArjunaOTS.*;
import com.arjuna.ArjunaOTS.*;
import com.arjuna.ArjunaCommon.Template.*;
import com.arjuna.ArjunaCommon.Common.*;
import com.arjuna.ArjunaCore.Atomic.BasicAction;
import com.arjuna.ArjunaCore.Thread.ThreadActionData;
import com.arjuna.ArjunaCore.Atomic.CheckedAction;
import java.io.PrintStream;
import java.util.*;
import java.lang.Object;
import org.omg.CORBA.CompletionStatus;
import org.omg.CORBA.*;

import org.omg.CosTransactions.SubtransactionsUnavailable;
import org.omg.CosTransactions.NoTransaction;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.InvalidControl;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;
import org.omg.CORBA.UNKNOWN;
import org.omg.CORBA.NO_MEMORY;
import org.omg.CORBA.BAD_PARAM;
import org.omg.CORBA.BAD_OPERATION;
import java.lang.OutOfMemoryError;
import java.util.EmptyStackException;

#include <CosTransactions/CosTranExceptions.h>

/**
 * The implementation of CosTransactions::Current.
 *
 * In a multi-threaded environment where threads can terminate
 * transactions they may not have started, then it is possible for
 * a thread to call commit/rollback/rollback_only on a transaction
 * which has already been (or is in the process of being) terminated.
 * We assume that the subsequent thread is still associated with the
 * transaction so that it can determine its status, rather than simply
 * disassociate it when it tries to terminate and return NoTransaction, so
 * we would return InvalidTransaction. This allows us to distinguish
 * between the situation where there really is no transaction associated
 * with the thread.
 *
 * @author Mark Little (mark@arjuna.com)
 * @version $Id: OTS_Current.javatmpl,v 1.7.2.1.4.2.4.3.2.1.6.1.6.2.2.2.2.3.2.2.4.1.2.1.16.2.16.1.4.1 2001/08/07 11:12:36 nmcl Exp $
 * @since JTS 1.0.
 */

public class OTS_Current extends LocalObject implements SCOPED_TIE_CLASS_(org.omg.CosTransactions,Current) 
{

public static final int TX_BEGUN = 0;
public static final int TX_COMMITTED = 1;
public static final int TX_ABORTED = 2;
public static final int TX_SUSPENDED = 3;
public static final int TX_RESUMED = 4;

public OTS_Current ()
    {	
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::OTS_Current ()");
	}

	_theManager = new OTS_ContextManager();
    }

public void begin () throws SubtransactionsUnavailable, SystemException
    {
	OTS_ControlWrapper currentAction = _theManager.current();

	if (currentAction == null)  // no current, so create top-level action
	{
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						     FacilityCode.FAC_OTS, "OTS_Current::begin - creating new top-level transaction.");
	    }

	    if (OTS.localFactory())
		currentAction = new OTS_ControlWrapper((OTS_Control) OTS.factory().createLocal(get_timeout()));
	    else
		currentAction = new OTS_ControlWrapper((Control) OTS.get_factory().create(get_timeout()));
	}
	else
	{
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						     FacilityCode.FAC_OTS, "OTS_Current::begin - creating new subtransaction.");
	    }

	    /*
	     * If the current transaction has terminated (by another thread)
	     * then we could simply start a new top-level transaction. However,
	     * the application may be assuming that the transaction returned by
	     * begin is a subtransaction. So, we throw InvalidTransaction.
	     */
	    
	    try
	    {
		currentAction = currentAction.create_subtransaction();
	    }
	    catch (Unavailable ex)
	    {
#ifdef ORB_OTS_SUPPORT
		throw new InvalidTransaction(OTS_Exceptions.UNAVAILABLE_COORDINATOR, CompletionStatus.COMPLETED_NO);
#else
		throw new UNKNOWN(OTS_Exceptions.UNAVAILABLE_COORDINATOR, CompletionStatus.COMPLETED_NO);
#endif		
	    }
	    catch (Inactive e)
	    {
#ifdef ORB_OTS_SUPPORT		
		throw new InvalidTransaction(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#else
		throw new UNKNOWN(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#endif
	    }
	    catch (SystemException sysEx)
	    {
#ifdef ORB_OTS_SUPPORT		
		throw new InvalidTransaction(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#else
		throw new UNKNOWN(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#endif		
	    }
	    catch (OutOfMemoryError me)
	    {
		System.gc();

		throw new NO_MEMORY(0, CompletionStatus.COMPLETED_NO);
	    }
	}

	_theManager.pushAction(currentAction);

	try
	{
	    ThreadAssociationControl.updateAssociation(currentAction, TX_BEGUN);
	}
	catch (Exception e)
	{
	    /*
	     * An error happened, so mark the transaction as rollback only (in
	     * case it hasn't already been so marked.)
	     */

	    try
	    {
		rollback_only();
	    }
	    catch (Exception ex)
	    {
	    }
	}

	currentAction = null;
    }

/**
 * It's not possible to commit/abort out of order using the current interface.
 *
 * Do we delete the control if the transaction gives an heuristic result?
 * Currently we do.
 *
 * If another thread has already terminated the transaction then:
 * (i) if it committed, we do nothing - could throw TransactionRequired
 *     of InvalidTransaction, or NoTransaction. Probably not NoTransaction,
 *     since it would be better to distinguish between the situation where
 *     the transaction has already been terminated and there really is no
 *     transaction for this thread.
 * (ii) if it rolledback, we throw TransactionRolledBack.
 *
 */
 
#ifndef ORB_OTS_SUPPORT 
public void commit (boolean report_heuristics) throws NoTransaction, HeuristicMixed, HeuristicHazard, TransactionRolledBack, SystemException
#else
public void commit (boolean report_heuristics) throws NoTransaction, HeuristicMixed, HeuristicHazard, SystemException
#endif    
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::commit ( "+report_heuristics+" )");
	}

	OTS_ControlWrapper currentAction = _theManager.current();

	if (currentAction != null)
	{
	    try
	    {
		ThreadAssociationControl.updateAssociation(currentAction, TX_COMMITTED);
	    }
	    catch (Exception e)
	    {
		/*
		 * An error happened, so mark the transaction as rollback
		 * only (in case it hasn't already been so marked.)
		 */

		rollback_only();
	    }

	    /*
	     * Note: we only destroy the control if we do
	     * not get an exception. This lets the user see what
	     * happened, and relies upon them to later destroy the
	     * control.
	     */

	    try
	    {
		currentAction.commit(report_heuristics);
		
		_theManager.popAction();
	    }
	    catch (TransactionRolledBack e1)
	    {
		/*
		 * Is ok to destroy transaction. Different for
		 * heuristics.
		 */
		    
		_theManager.popAction();

		throw e1;
	    }
	    catch (HeuristicMixed e2)
	    {
		_theManager.popAction();

		throw e2;
	    }
	    catch (HeuristicHazard e3)
	    {
		_theManager.popAction();
		    
		throw e3;
	    }
	    catch (SystemException e4)
	    {
		_theManager.popAction();

		throw e4;
	    }
	    catch (Unavailable e5)
	    {
		/*
		 * If terminated by some other thread then the
		 * reference we have will no longer be valid.
		 */
		
		_theManager.popAction();
		    
		throw new InvalidTransaction();
	    }
	}
	else
	    throw new NoTransaction();
    }
 
/**
 * If another thread has already terminated the transaction then:
 * (i) if it rolled back, we do nothing - could throw TransactionRequired
 *     of InvalidTransaction, or NoTransaction. Probably not NoTransaction,
 *     since it would be better to distinguish between the situation where
 *     the transaction has already been terminated and there really is no
 *     transaction for this thread.
 * (ii) if it committed, we throw InvalidTransaction.
 */
 
public void rollback () throws NoTransaction, SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::rollback ()");
	}

	OTS_ControlWrapper currentAction = _theManager.current();
	
	if (currentAction != null)
	{
	    ThreadAssociationControl.updateAssociation(currentAction, TX_ABORTED);

	    try
	    {
		currentAction.rollback();
		    
		_theManager.popAction();
	    }
#ifdef ORB_OTS_SUPPORT		
	    catch (InvalidTransaction e1)
	    {
		/*
		 * If transaction has already terminated, then throw
		 * InvalidTransaction. Differentiates between this stat
		 * and not actually having a transaction associated
		 * with the thread.
		 */
		   
		_theManager.popAction();
		    
		throw e1;
	    }
#endif		
	    catch (SystemException e2)
	    {
		_theManager.popAction();
		    
		throw e2;
	    }
	    catch (Unavailable e)
	    {
		/*
		 * If no terminator then not allowed!
		 */
		
		_theManager.popAction();

		throw new InvalidTransaction();
	    }
	}
	else
	    throw new NoTransaction();
    }
 
/**
 * If the transaction has already terminated (or is being terminated)
 * then throw InvalidTransaction.
 */
 
public void rollback_only () throws NoTransaction, SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::rollback_only ()");
	}

	OTS_ControlWrapper currentAction = _theManager.current();

	if (currentAction != null)
	{
	    try
	    {
		currentAction.rollback_only();
	    }
	    catch (org.omg.CosTransactions.Inactive exc)
	    {
#ifdef ORB_OTS_SUPPORT
		throw new InvalidTransaction(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#else
		throw new BAD_OPERATION(OTS_Exceptions.INACTIVE_TRANSACTION, CompletionStatus.COMPLETED_NO);
#endif		    
	    }
	    catch (SystemException e)
	    {
		throw e;
	    }
	    catch (Unavailable ex)
	    {
		throw new NoTransaction();
	    }
	}
	else
	    throw new NoTransaction();
    }

public org.omg.CosTransactions.Status get_status () throws SystemException
    {
	OTS_ControlWrapper currentAction = _theManager.current();
	org.omg.CosTransactions.Status stat = ((currentAction == null) ? org.omg.CosTransactions.Status.StatusNoTransaction : currentAction.get_status());

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::get_status - returning "+OTS_Utility.printStatus(stat));
	}

	return stat;
    }

public String get_transaction_name () throws SystemException
    {
	OTS_ControlWrapper currentAction = _theManager.current();
	String ch = ((currentAction == null) ? "null" : currentAction.get_transaction_name());

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::get_transaction_name - returning "+ch);
	}

	return ch;
    }

public synchronized void set_timeout (int seconds) throws SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::set_timeout ( "+seconds+" )");
	}

	/*
	 * Only bother if the value is anything other than the default.
	 */

	if (seconds > 0)
	{
	    if (otsTransactionTimeout == null)
		otsTransactionTimeout = new Hashtable();
	    
	    otsTransactionTimeout.put(Thread.currentThread().getName(), new Integer(seconds));
	}
	else
	{
	    if (seconds < 0)
	    {
		throw new BAD_PARAM(OTS_Exceptions.INVALID_TIMEOUT, CompletionStatus.COMPLETED_NO);
	    }
	    else
	    {
		otsTransactionTimeout.remove(Thread.currentThread().getName());
	    }
	}
    }

/**
 * JTSArjuna specific methods.
 */

public final synchronized int get_timeout () throws SystemException
    {
	Integer value = ((otsTransactionTimeout != null) ? (Integer) otsTransactionTimeout.get(Thread.currentThread().getName()) : null);
	int v = 0;    // if not set then assume 0. What else can we do?
	
	if (value != null)
	{
	    v = value.intValue();
	}

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::get_timeout - returning "+v);
	}

	return v;
    }

public final synchronized void setCheckedAction (CheckedAction ca) throws SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::setCheckedAction ( "+ca+" )");
	}

	checkedAction(ca);
    }

/**
 * @since JTS 2.2.
 */
 
public final synchronized void removeCheckedAction () throws SystemException
    {
	otsCheckedAction.remove(Thread.currentThread().getName());
    }
 
public final synchronized CheckedAction getCheckedAction () throws SystemException
    {
	return checkedAction();
    }

public Control get_control () throws SystemException
    {
	OTS_ControlWrapper theControl = _theManager.current();

	if (theControl == null)
	    return null;
	
	/*
	 * Always return a Control with a null terminator? Forces users to go
	 * through current, and attempts to stop explicit propagation, which
	 * prevents fully checked transactions. By default we don't do that
	 * because explicit transaction propagation is the only means of
	 * propagation we can guarantee between Orbs.
	 */

#ifndef NULL_TERMINATOR
	/*
	 * If it's a locally created control then we may not have
	 * registered it with the ORB yet, so do so now.
	 */

	try
	{
	    return theControl.get_control();
	}
	catch (Unavailable e)
	{
	    return null;
	}
#else	
	Coordinator coord = null;

	try
	{
	    coord = theControl.get_coordinator();
	}
	catch (Unavailable e)
	{
	    coord = null;

	    throw new UNKNOWN(OTS_Exceptions.UNAVAILABLE_COORDINATOR, CompletionStatus.COMPLETED_NO);
	}
	catch (SystemException sysEx)
	{
	    coord = null;

	    throw sysEx;
	}

	Control proxyControl = OTS_Factory.createPropagatedControl(coord);

	coord = null;
	theControl = null;

	return proxyControl;
#endif
    }
 
/*
 * Problem: there is a general problem with the Orb and memory management. If
 * this method, say, is invoked remotely then we must duplicate the reference
 * before returning it since the Orb will call release on the return value
 * once it has been sent to the caller. However, in the local case, if we call
 * duplicate then there is nothing to call release and we get memory leaks!
 *
 * Also assume that BasicAction's notion of current is the same as Current's,
 * if the action is local.
 *
 */

/**
 * The spec. states that after suspend we should have a null transaction
 * context, but is hazy as to what to do if we are nested. We shall assume
 * that the control returned is for the current transaction and that we
 * suspend the entire transaction hierarchy. Given the returned control, we
 * can always regenerate the hierarchy later if required by resume.
 */

public Control suspend () throws SystemException 
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::suspend ()");
	}

	OTS_ControlWrapper actPtr = _theManager.popAction();

	if (actPtr == null)
	{
	    ThreadAssociationControl.updateAssociation(null, TX_SUSPENDED);

	    return null;
	}
	else
	{
	    ThreadAssociationControl.updateAssociation(actPtr, TX_SUSPENDED);

	    /*
	     * Purge the remaining controls from the thread context.
	     * If the controls are remote and proxies then we delete them
	     * here, since we must recreate them next time we want to
	     * use them anyway.
	     */

	    _theManager.purgeActions();

	    if (actPtr.isLocal())
		return actPtr.getImple().getControl();
	    else
		return actPtr.getControl();
	}
    }
 
/**
 * To support checked transactions we can only resume if the action is local
 * or we received it implicitly.
 *
 * If the control refers to a nested transaction then we must recreate the
 * entire hierarchy, i.e., the effect of a suspend/resume on the same control
 * should be the same as never calling suspend in the first place.
 *
 * If the control is for a local transaction then it is simple to recreate the
 * hierarchy. Otherwise we rely upon the PropagationContext to recreate it.
 *
 * If this control is a "proxy" then create a new proxy instance, so we
 * can delete proxies whenever suspend is called.
 *
 * Should check if "new" transaction is not actually the current
 * one anyway. If so, just return. The spec. doesn't mention what
 * to do in this case, so for now we go to the overhead of
 * the work regardless.
 */

public void resume (Control which) throws InvalidControl, SystemException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_OTS, "OTS_Current::resume ( "+which+" )");
	}

	/*
	 * We must now "forget" any current transaction information.
	 * This is because when we end this transaction we must be
	 * associated with no transaction.
	 */

	_theManager.purgeActions();

	if (which == null)  // if null then return
	{
	    ThreadAssociationControl.updateAssociation(null, TX_RESUMED);
	    
	    return;
	}

	/*
	 * Must duplicate because it is an 'in' parameter which we
	 * want to keep.
	 */

	Control cont = which;
	boolean invalidControl = false;

	/*
	 * Now recreate the hierarchy (if any) of this transaction,
	 * pushing each control onto the stack. The method pushAction
	 * will push BasicActions onto the thread stack if necessary, so
	 * we don't need to worry about it here.
	 */

	try
	{
	    Coordinator coord = cont.get_coordinator();

	    if (!coord.is_top_level_transaction())
	    {
		/*
		 * Is the Control an ActionControl? If so then it
		 * has methods to allow us to get the parent directly.
		 * Otherwise, rely on the PropagationContext.
		 */
	    
		ActionControl actControl = null;
	
		try
		{
		    actControl = SCOPED_NARROW_(com.arjuna.ArjunaOTS,ActionControl,cont);

		    if (actControl == null)
			throw new BAD_PARAM();
		}
		catch (Exception e)
		{
		    /*
		     * Not an ActionControl.
		     */

		    actControl = null;
		}

		if (actControl != null)
		{
		    invalidControl = _theManager.addActionControlHierarchy(actControl);
		}
		else
		{
		    invalidControl = _theManager.addRemoteHierarchy(cont);
		}
	    }

	    coord = null;
	}
	catch (SystemException sysEx)
	{
	    throw new InvalidControl();
	}
	catch (UserException usrEx)
	{
	    throw new InvalidControl();
	}
	catch (NullPointerException npx)
	{
	    throw new InvalidControl();
	}
	catch (Exception ex)
	{
	    ErrorStream.warning().println("OTS_Current.resume: "+ex);
	    
	    throw new InvalidControl();
	}
    
	/*
	 * Now put the new transaction on the top of the list.
	 */

	try
	{
	    if (!invalidControl)
	    {
		OTS_ControlWrapper wrap = new OTS_ControlWrapper((Control) cont);
		
		ThreadAssociationControl.updateAssociation(wrap, TX_RESUMED);

		_theManager.pushAction(wrap);
	    }
	}	
	catch (NullPointerException npx)
	{
	    invalidControl = true;
	}

	cont = null;

	if (invalidControl)
	    throw new InvalidControl();
    }

/**
 * Returns the internal context manager implementation. Applications
 * should not use this method.
 *
 * @since JTS 2.1.
 */
 
public final OTS_ContextManager contextManager ()
    {
	return _theManager;
    }

static final synchronized void checkedAction (CheckedAction ca) throws SystemException
    {
	if (otsCheckedAction == null)
	    otsCheckedAction = new Hashtable();

	otsCheckedAction.put(Thread.currentThread().getName(), ca);
    }

static final synchronized CheckedAction checkedAction () throws SystemException
    {
	if (otsCheckedAction != null)
	    return (CheckedAction) otsCheckedAction.get(Thread.currentThread().getName());
	else
	    return null;
    }

/*
 * To be done later.
 */
 
void resume (OTS_ControlWrapper which) throws InvalidControl, SystemException
    {
    }
 
protected static OTS_ContextManager _theManager = null;

private static Hashtable otsTransactionTimeout = null;  // thread specific
private static Hashtable otsCheckedAction = null;
 
}
