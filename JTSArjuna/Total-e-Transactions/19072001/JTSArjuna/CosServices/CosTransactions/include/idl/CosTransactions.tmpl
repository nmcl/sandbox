/*
 * Copyright (C) 1998, 1999, 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: CosTransactions.tmpl,v 1.2.14.1.14.1.10.1 2001/02/22 11:13:13 nmcl Exp $
 */

#ifndef COSTRANSACTIONS_IDL_
#define COSTRANSACTIONS_IDL_

#ifndef NO_PRAGMA_SUPPORT
#pragma prefix "omg.org"
#endif

#ifdef HAVE_JAVAPACKAGE
#pragma javaPackage "org.omg"
#endif

//
// If Draft3 is defined includes most (but not all of the features
// of the revised OTS spec at Draft3 (Nov 22, 96).
// Those missing generally need support from other services or the ORB
// itself
//

/*
 * We provide minimal support for drafts before 3.
 * Because some systems (e.g., Orbix) do their own parsing and
 * can't cope with '#if defined' statements, we have some "extended"
 * conditional compilation lines!
 */

#ifdef ORBIX_IR_MODULE_BUG

interface TransactionalObject
{
};

interface SubtransactionAwareResource;

#endif

module CosTransactions
{
    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
		  StatusCommitted, StatusRolledBack, StatusUnknown,
#if !defined(DRAFT1) && !defined(DRAFT2)
		  StatusPreparing, StatusCommitting, StatusRollingBack,
#endif
		  StatusNoTransaction };

    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };

#ifndef ORB_OTS_SUPPORT
    // Standard exceptions - here until the Orb supports them
    
    exception TransactionRequired {};
    exception TransactionRolledBack {};
    exception InvalidTransaction {};

    // Exception from ORB
    
    exception WrongTransaction {};
#endif

#ifdef BROKEN_WRONG_TRANSACTION
    exception WrongTransaction {};
#endif

    // Heuristic exceptions

    exception HeuristicRollback {};
    exception HeuristicCommit {};
    exception HeuristicMixed {};
    exception HeuristicHazard {};

    // Other transaction related exceptions
    
    exception SubtransactionsUnavailable {};
    exception NotSubtransaction {};
    exception Inactive {};
    exception NotPrepared {};
    exception NoTransaction {};
    exception InvalidControl {};
    exception Unavailable {};
    exception SynchronizationUnavailable {};

    // Forward references for later interfaces
	
    interface Control;
    interface Terminator;
    interface Coordinator;
    interface Resource;
    interface RecoveryCoordinator;
#ifndef ORBIX_IR_MODULE_BUG    
    interface SubtransactionAwareResource;
#endif    
    interface TransactionFactory;
#ifndef ORBIX_IR_MODULE_BUG    
    interface TransactionalObject;
#endif    
    interface Current;
    
#if !defined(DRAFT1) && !defined(DRAFT2)
    interface Synchronization;
    
    // Formally part of CosTSInteroperation

#ifdef NO_ANONYMOUS_SEQUENCES
    typedef sequence<octet> tranID;
#endif

    struct otid_t
    {
	long formatID;
	long bequal_length;
#ifndef NO_ANONYMOUS_SEQUENCES	
	sequence <octet> tid;
#else
	tranID tid;
#endif
    };

    struct TransIdentity
    {
	Coordinator coord;
	Terminator term;
	otid_t otid;
    };

#ifdef NO_ANONYMOUS_SEQUENCES
    typedef sequence<TransIdentity> hierarchy;
#endif

    struct PropagationContext
    {
	unsigned long timeout;
	TransIdentity currentTransaction;
#ifndef NO_ANONYMOUS_SEQUENCES
	sequence <TransIdentity> parents;
#else
	hierarchy parents;
#endif
	any implementation_specific_data;
    };
#endif
    
#ifdef ORB_CURRENT_SUPPORT    
    interface Current : CORBA::Current
#else
    interface Current
#endif
    {
	void begin () raises (SubtransactionsUnavailable);
#ifndef ORB_OTS_SUPPORT
	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard, TransactionRolledBack);
#else
	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);
#endif	
	void rollback () raises (NoTransaction);
	void rollback_only () raises (NoTransaction);

	Status get_status ();
	string get_transaction_name ();
	void set_timeout (in unsigned long seconds);

	Control get_control ();
	Control suspend ();
	void resume (in Control which) raises (InvalidControl);
    };
    
    interface TransactionFactory
    {
	Control create (in unsigned long time_out);
#if !defined(DRAFT1) && !defined(DRAFT2)
	Control recreate (in PropagationContext ctx);
#endif
    };

    interface Control
    {
	Terminator get_terminator () raises (Unavailable);
	Coordinator get_coordinator () raises (Unavailable);
    };

    interface Terminator
    {
#ifndef ORB_OTS_SUPPORT	
	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard, TransactionRolledBack);
#else
	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);
#endif	
	void rollback ();
    };

    interface Coordinator
    {
	Status get_status ();
	Status get_parent_status ();
	Status get_top_level_status ();
    
	boolean is_same_transaction (in Coordinator tc);
	boolean is_related_transaction (in Coordinator tc);
	boolean is_ancestor_transaction (in Coordinator tc);
	boolean is_descendant_transaction (in Coordinator tc);
	boolean is_top_level_transaction ();

	unsigned long hash_transaction ();
	unsigned long hash_top_level_tran ();

#ifndef SUNSJDK	
	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);
#else
	RecoveryCoordinator register_resource (in Resource rr) raises (Inactive);
#endif	

#if !defined(DRAFT1) && !defined(DRAFT2)
	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);
#endif

#ifndef SUNSJDK	
	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);
#else
	void register_subtran_aware (in SubtransactionAwareResource rr) raises (Inactive, NotSubtransaction);
#endif	

	void rollback_only () raises (Inactive);

	string get_transaction_name ();

	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);

#ifdef DRAFT3
	PropagationContext get_txcontext () raises (Inactive);
#endif
#if defined(DRAFT4) || defined(DRAFT5)
	PropagationContext get_txcontext () raises (Unavailable);
#endif
    };

    interface RecoveryCoordinator
    {
#ifndef SUNSJDK	
	Status replay_completion (in Resource r) raises (NotPrepared);
#else
	Status replay_completion (in Resource rr) raises (NotPrepared);
#endif	
    };
    
    interface Resource
    {
#if defined(DRAFT1) || defined(DRAFT2)
	Vote prepare ();
#else	
	Vote prepare () raises (HeuristicMixed, HeuristicHazard);
#endif
	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);
#if !defined(DRAFT1) && !defined(DRAFT2)
#ifndef ORB_OTS_SUPPORT	
	void commit_one_phase () raises (HeuristicHazard, TransactionRolledBack);
#else	
	void commit_one_phase () raises (HeuristicHazard);
#endif	
#else
#ifndef ORB_OTS_SUPPORT	
	void commit_one_phase () raises (HeuristicRollback, HeuristicMixed, HeuristicHazard, TransactionRolledBack);
#else
	void commit_one_phase () raises (HeuristicRollback, HeuristicMixed, HeuristicHazard);
#endif	
#endif
	void forget ();
    };

#ifndef ORBIX_IR_MODULE_BUG
    interface SubtransactionAwareResource : Resource
    {
	void commit_subtransaction (in Coordinator parent);
	void rollback_subtransaction ();
    };
    
    interface TransactionalObject
    {
    };
#endif    

#if !defined(DRAFT1) && !defined(DRAFT2)
    interface Synchronization : TransactionalObject
    {
	void before_completion ();
	void after_completion (in Status s);
    };
#endif
    
};

#endif

#ifdef ORBIX_IR_MODULE_BUG

interface SubtransactionAwareResource : CosTransactions::Resource
{
    void commit_subtransaction (in CosTransactions::Coordinator parent);
    void rollback_subtransaction ();
};

#endif

