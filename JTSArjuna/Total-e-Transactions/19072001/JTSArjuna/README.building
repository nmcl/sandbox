->	Introduction

This document is intended as a short guide to building and installing the JTS.


->	Prerequisites

1. The relevant third party software must be installed :

	JDK
	ORB
	Sequelink	(optional)
	Cloudscape	(optional)

2. The following environment variables should be set :

	JTSARJUNA_HOME	JTS installation directory
			e.g. JTSARJUNA_HOME=/usr/local/Arjuna/TransactionService

	ORB_ROOT	ORB root directory
			e.g. ORB_ROOT=/usr/j2se/jre

	CPP		C pre-processor (for JDK mini-orb)
			e.g. CPP=gcc

	CPPARGS		Arguments to CPP
			e.g. CPPARGS="-E -x c"

	CLASSPATH	Class path containing JTS directories, ORB directories,
			extra jars and (optionally) sequelink and cloudscape
			directories
			e.g. CLASSPATH=/tmp/JTSArjuna/JavaHarness/classes:\
	/tmp/JTSArjuna/ArjunaCommon/classe:\
	/tmp/ArjunaCommon/tests/classess:\
	/tmp/JTSArjuna/ArjunaCore/classes:\
	/tmp/JTSArjuna/ArjunaCore/tests/classes:\
	/tmp/JTSArjuna/OrbPortability/classes:\
	/tmp/JTSArjuna/OrbPortability/tests/classes:\
	/tmp/JTSArjuna/CosServices/CosTransactions/classes:\
	/tmp/JTSArjuna/CosServices/CosTransactions/tests/classes:\
	/tmp/JTSArjuna/CosServices/CosRecovery/classes:\
	/tmp/JTSArjuna/Resources/JDBC/classes:\
	/tmp/JTSArjuna/Resources/JDBC/tests/classes:\
	/tmp/JTSArjuna/Resources/JDBC2/classes:\
	/tmp/JTSArjuna/Resources/JDBC2/tests/classes:\
	/tmp/JTSArjuna/JTSArjuna/classes:\
	/usr/j2se/jre/lib/rt.jar:\
	/usr/local/java/lib/jta-spec1_0_1.jar:\
	/usr/local/java/lib/jdbc2_0-stdext.jar:\
	/usr/local/java/lib/jndi.jar:\
	/usr/slserver51/java/sljc_arj.jar:\
	/usr/slserver51/java/sljcx.jar

3. The following binaries should be executable by following $PATH (they are not
necessarily in directories in the default $PATH):

	imake, make, which, javac, jar, idltojava[*]

   [*] Or the ORB equivalent

4. The shell interpreter `/bin/sh` must exist and be executable.


->	Configuring and building the JTS

Each module has a `configure` script which must be run before a build is
attempted for that module.  These scripts take the following arguments :

	-r	Release build
	-u	Unconfigure (remove all files generated by `configure`)
	-v	Verify options
	-all	All modules are being configured
	-noinst	Don't install com.arjuna jar file
	<file>	configuration file to generate settings from

There is also a top level `configure` script that can be used to configure
either all the modules or a subset (specified on the command line).  This
script takes the arguments :

	-c <dir>
		Directory containing configuration files for all modules
	-u	Unconfigure
	-r	Release build
	<module list>
		List of modules to configure

The top level `configure` script will run the scripts in all the modules in
the correct order :

	ModuleBuildSystem
	JavaHarness
	ArjunaCommon
	ArjunaCore
	OrbPortability
	CosTransactions
	CosRecovery
	JDBC
	JDBC2
	JTSArjuna
	TeT

If a release build (-r) is specified, the top level `configure` script will
execute `configure` followed by `make install` for each module in turn.  For
a non-release build, the top level 'Makefile' can be used to build and/or
install.  The top level 'Makefile' can also be used to build and/or install
single modules using arguments of the form :

	<module>		e.g. OrbPortability
	install-<module>	e.g. install-OrbPortability

To remove files genereated by the build process, there are targets 'clean',
'tidy' and 'purge'.  At the top level, there are additional targets that
apply to individual modules :

	clean-<module>		e.g. clean-JavaHarness
	tidy-<module>		e.g. tidy-JavaHarness
	purge-<module>		e.g. purge-JavaHarness


->	Repeat configuration and builds

When the `configure` scripts are run, they create (in addition to other
files), two files in the module 'config/' directory :

	<module>.answers	e.g. ArjunaCore/config/ArjunaCore.answers
	<module>.cf		e.g. ArjunaCore/config/ArjunaCore.cf

The '.answers' files contain a list of questions and the answers that were
supplied at configuration time.  The '.cf' files contain the configuration
information for the module.  The top level `packcf` script will pack up
the '.cf.' files into a single file called `unpackcf`.  This `script` can
then be run with a directory name argument, e.g.

	./unpackcf saved-configs

to unpack module configuration files into the named directory.  This
directory name can then be passed to the configuration scripts.  One
caveat is that the repeat configuration/build MUST be done from the same
path as the original configuration/build (this is because source directory
pathnames are placed in the generated configuration files).


->	Examples

1. Complete build & install

	./configure
	make install

2. Release build & install

	./configure -r

3. Packing configuration files

	./packcf

4. Unpacking configuration files

	./unpackcf ../saved-config

5. Release build/install using saved configuration files

	./configure -r -c ../saved-config

6. Removing all files generated by configuration and build

	make purge

7. Reving generated files in one module

	make purge-CosTransactions

8. Building one module

	./configure CosTransactions
	make CosTransactions


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  $Id: README.building,v 1.1.4.1 2001/06/20 10:44:37 nmcl Exp $
