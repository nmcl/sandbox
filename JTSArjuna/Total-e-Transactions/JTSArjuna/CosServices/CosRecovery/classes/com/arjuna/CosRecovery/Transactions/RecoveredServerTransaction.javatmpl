/*
 * Copyright (C) 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: RecoveredServerTransaction.javatmpl,v 1.1.2.1.2.3.4.1.6.1.2.1.82.4.2.4.2.1 2003/02/11 12:41:17 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosRecovery.Transactions;

import com.arjuna.ArjunaCommon.Common.*;
import com.arjuna.ArjunaCore.Atomic.*;
import com.arjuna.ArjunaCore.Interface.ObjectStore;
import com.arjuna.ArjunaCore.Common.ObjectStoreException;
import com.arjuna.CosTransactions.Interposition.*;
import com.arjuna.CosTransactions.Interposition.Arjuna.OTS_ServerRecoveryTopLevelAction;
import com.arjuna.CosTransactions.OTS_Utility;
import org.omg.CosTransactions.*;
import java.io.IOException;
import java.util.Date;

import com.arjuna.CosRecovery.Contact.StatusChecker;

import NAMESPACE_(CORBA).SystemException;
import org.omg.CORBA.OBJECT_NOT_EXIST;

import com.arjuna.CosRecovery.RecoveryEnvironment;

#ifdef ORBIX2000
import org.omg.CORBA.TRANSIENT;
#endif

import java.util.Hashtable;

#ifdef ORBIXWEB
import org.omg.CORBA.INV_OBJREF;
#endif

#include <CosTransactions/CosTranExceptions.h>

/**
 * Transaction type only instantiated at recovery time.  This is used
 * to re-activate the state of a server transaction that did not
 * terminate correctly due to failure.
 * <P>
 * @author Dave Ingham (dave@arjuna.com)
 * @version $Id: RecoveredServerTransaction.javatmpl,v 1.1.2.1.2.3.4.1.6.1.2.1.82.4.2.4.2.1 2003/02/11 12:41:17 nmcl Exp $ */

public class RecoveredServerTransaction extends OTS_ServerTransaction
			implements RecoveringTransaction
{
    /**
     * actionUid is the local transaction identification for the remote
     * transaction - the name of the store entry which contains the state
     * of the server transaction. The actual main transaction id is only
     * obtained when we activate the transaction.
     */

    public RecoveredServerTransaction ( Uid actionUid )
    {
	this(actionUid, "");
	String assumedExistString = PropertyManager.getProperty(RecoveryEnvironment.ASSUMED_OBJECT_NOT_EXIST);
	if (assumedExistString != null) {
	  Integer assumedExistInteger = new Integer(assumedExistString);
          _assumed_not_exist = 	assumedExistInteger.intValue();
	}
    }

    /**
     * actionUid is the local transaction identification for the remote
     * transaction - the name of the store entry which contains the state
     * of the server transaction. The actual main transaction id is only
     * obtained when we activate the transaction.
     */

    public RecoveredServerTransaction ( Uid actionUid, String changedTypeName )
    {
	super(actionUid);

	String assumedExistString = PropertyManager.getProperty(RecoveryEnvironment.ASSUMED_OBJECT_NOT_EXIST);
		if (assumedExistString != null) {
	  Integer assumedExistInteger = new Integer(assumedExistString);
          _assumed_not_exist = 	assumedExistInteger.intValue();
	}

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_CRASH_RECOVERY,
						 "RecoveredServerTransaction("+getSavingUid()+") created");
	}

	// Don't bother trying to activate a transaction that isn't in
	// the store. This saves an error message.
	_recoveryStatus = RecoveryStatus.ACTIVATE_FAILED;

	String effectiveTypeName = typeName();
	
	if ( changedTypeName.length() < 1) {
	    _typeName = null;
	} else {
	    _typeName = changedTypeName;
	    effectiveTypeName = changedTypeName;
	}

	_originalProcessUid = new Uid(Uid.nullUid());
	
	try
	{
	    if ((store().currentState(getSavingUid(), effectiveTypeName) != ObjectStore.OS_UNKNOWN))
	    {
		/*
		 * By activating the state we get the actual transaction
		 * id and process id, which are needed for recovery
		 * purposes.
		 */

		if (activate())
		    _recoveryStatus = RecoveryStatus.ACTIVATED;
		else
		    ErrorStream.warning().println("RecoveredServerTransaction - activate of "+getSavingUid()+" failed!");
	    }
	}
	catch (Exception e)
	{
	    ErrorStream.warning().println("RecoveredServerTransaction - activate of "+getSavingUid()+" failed: "+e);
	}

	_txStatus = Status.StatusUnknown;
    }

    public void finalize ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.DESTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_CRASH_RECOVERY,
						 "RecoveredServerTransaction("+getSavingUid()+") destroyed");
	}

	super.finalize();
    }

    /**
     * Get the status of the transaction. If we successfully activated
     * the transaction then we return whatever the transaction reports
     * otherwise we return RolledBack as we're using presumed abort.
     */
    public synchronized Status get_status () throws SystemException
    {
	if (_txStatus != Status.StatusUnknown)
	    return _txStatus;

	Status theStatus = Status.StatusUnknown;

	if (_recoveryStatus == RecoveryStatus.ACTIVATE_FAILED)
	    theStatus = Status.StatusRolledBack;
	else
	    theStatus = super.get_status();

	return theStatus;
    }

    /**
     * Allows a new Resource to be added to the transaction. Typically
     * this is used to replace a Resource that has failed and cannot
     * be recovered on it's original IOR.
     */
    public void addResourceRecord (Uid rcUid, Resource r)
    {
	Coordinator coord = null;
	AbstractRecord corbaRec = createOTSRecord(true, r, coord, rcUid);

	addRecord(corbaRec);
    }


    /**
     * Causes phase 2 of the commit protocol to be replayed.
     */
    public void replayPhase2()
    {
	_recoveryStatus = RecoveryStatus.REPLAYING;

	Status theStatus = get_status();

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_CRASH_RECOVERY,
						 "RecoveredServerTransaction.replayPhase2("+get_uid()+")"
						 + " - status = "+OTS_Utility.printStatus(theStatus));
	}

	if (theStatus == Status.StatusPrepared)
	{
	    /*
	     * We need to get the status from the our parent transaction
	     * in the interposition hierarchy.
	     */
	    theStatus = getStatusFromParent();
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						     FacilityCode.FAC_CRASH_RECOVERY,
						     "RecoveredServerTransaction.replayPhase2("+get_uid()+")"
						     + " - status after contacting parent = "+OTS_Utility.printStatus(theStatus));
	    }
	}

	if ( (theStatus == Status.StatusCommitting) ||
	     (theStatus == Status.StatusCommitted) )
	{
	  phase2Commit(_reportHeuristics);

	  _recoveryStatus = RecoveryStatus.REPLAYED;

	  _txStatus = Status.StatusCommitted;
	}
	else if ( (theStatus == Status.StatusRolledBack) ||
		  (theStatus == Status.StatusRollingBack) ||
		  (theStatus == Status.StatusMarkedRollback) ||
		  (theStatus == Status.StatusNoTransaction) )
	{
	  phase2Abort(_reportHeuristics);

	  _recoveryStatus = RecoveryStatus.REPLAYED;

	  _txStatus = Status.StatusRolledBack;
	}
	else if ( theStatus == Status.StatusUnknown )
	{
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
				 FacilityCode.FAC_RECOVERY_NORMAL,
				 "ServerTransaction "+get_uid()+" unable determine status - retry later");
	    }

	    _recoveryStatus = RecoveryStatus.REPLAY_FAILED;
	}
	else
	{
	  ErrorStream.warning().println("RecoveredServerTransaction.replayPhase2: unexpected Status: "
							  +OTS_Utility.printStatus(theStatus));

	  _recoveryStatus = RecoveryStatus.REPLAY_FAILED;
	}

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_CRASH_RECOVERY,
						 "RecoveredServerTransaction.replayPhase2("+get_uid()+") finished");
	}
    }

    /**
     * Get the status of recovery for this transaction
     */
    public int getRecoveryStatus ()
    {
	return _recoveryStatus;
    }

/**
 * Check the status of this transaction state, i.e., that represented
 * by get_uid and not getSavingUid
 */

public Status getOriginalStatus()
{
    if (_recoveryStatus != RecoveryStatus.ACTIVATE_FAILED)
    {
	try
	{
	    /*
	     * Remember to get the status on the actual global transaction
	     * and not on the local branch, i.e., use get_uid and not
	     * getSavingUid
	     */

	    return StatusChecker.get_status(get_uid(), _originalProcessUid);
	}
	catch (Inactive ex)
	{
	    // shouldn't happen!!

	    return Status.StatusUnknown;
	}
    }
    else
    {
	// if it can't be activated, we cant get the process uid
	return Status.StatusUnknown;
    }

}


    private Status getStatusFromParent ()
    {
      org.omg.CosTransactions.Status theStatus = org.omg.CosTransactions.Status.StatusUnknown;
#ifdef ORBIX2000
      int not_exist_count; //= _assumed_not_exist;
#endif
      if ((super._recoveryCoordinator != null) && (get_status() == org.omg.CosTransactions.Status.StatusPrepared))
      {
	OTS_ServerControl sc = new OTS_ServerControl((OTS_ServerTransaction) this);
	OTS_ServerRecoveryTopLevelAction tla = new OTS_ServerRecoveryTopLevelAction(sc);

	if (tla.valid())
	{
	  try
	  {
	    theStatus = super._recoveryCoordinator.replay_completion(tla.getReference());
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
			     FacilityCode.FAC_CRASH_RECOVERY,
			     "RecoveredServerTransaction.getStatusFromParent - replay_completion status = " + OTS_Utility.printStatus(theStatus));
	    }
	  }
#ifdef ORBIX2000
	// orbix seems to count unreachable as transient. Over infinite time, all
	// addresses are valid
	  catch (TRANSIENT ex_trans) 
	  {
	    // the original application has (probably) died 
	    if (!assumed_not_exist.containsKey(get_uid()))
		assumed_not_exist.put(get_uid(), new Integer(_assumed_not_exist));

	    Integer n = (Integer)assumed_not_exist.get(get_uid());
	    not_exist_count = n.intValue();

	    not_exist_count--;

	    if (not_exist_count == 0) 
	    {
	     ErrorStream.warning().println("Got TRANSIENT from ORB for tx "+get_uid()+" and assuming OBJECT_NOT_EXIST");
	     theStatus = org.omg.CosTransactions.Status.StatusRolledBack;
	     assumed_not_exist.remove(get_uid());
	    }
	    else
	    {
	     theStatus = org.omg.CosTransactions.Status.StatusUnknown;
	     assumed_not_exist.remove(get_uid());  // check if the value can be changed rather remove then put in
	     assumed_not_exist.put(get_uid(), new Integer(not_exist_count)); 
	    }
	 }
#endif
	  catch (OBJECT_NOT_EXIST ex)
	  {
	      // i believe this state should be notran - ots explicitly objnotexist is
	      // rollback

	      theStatus = org.omg.CosTransactions.Status.StatusRolledBack;

	      //	    theStatus = org.omg.CosTransactions.Status.StatusNoTransaction;
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
			     FacilityCode.FAC_CRASH_RECOVERY,
			     "RecoveredServerTransaction.getStatusFromParent - replay_completion got object_not_exist = " + OTS_Utility.printStatus(theStatus));
	    }
	  }
#ifdef ORBIXWEB
	  catch (INV_OBJREF exception)
	  {
	    theStatus = org.omg.CosTransactions.Status.StatusUnknown;
	    if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
			     FacilityCode.FAC_CRASH_RECOVERY,
			     "RecoveredServerTransaction.getStatusFromParent - replay_completion got INV_OBJREF = " + OTS_Utility.printStatus(theStatus));
	    }
	  }
#endif
	  catch (NotPrepared ex1)
	  {
	    ErrorStream.warning().println("RecoveredServerTransaction: caught NotPrepared");

	    theStatus = org.omg.CosTransactions.Status.StatusActive;
	  }
	  catch (Exception e)
	  {
	    // Unknown error, so better to do nothing at this stage.
	    ErrorStream.warning().println("RecoveredServerTransaction: caught unexpected exception: "+e);
	  }
	}
	else
	  ErrorStream.warning().println("RecoveredServerTransaction "+get_uid()+" is invalid!");

	// Make sure we "delete" these objects when we are finished
	// with them or there will be a memory leak. If they are deleted
	// "early", and the root coordinator needs them then it will find
	// them unavailable, and will have to retry recovery later.

	sc = null;
	tla = null;
      }
      else
      {
	if (DebugController.enabled())
	    {
		DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
			     FacilityCode.FAC_CRASH_RECOVERY,
			     "RecoveredServerTransaction.getStatusFromParent - no recovcoord or status not prepared");
	    }

      }
    
      return theStatus;
    }

    public boolean allCompleted ()
    {
	//	return (boolean) (_recoveryStatus == RecoveryStatus.REPLAYED);

	return false;
    }

    public String type()
    {
	if (_typeName == null) {
	    return super.type();
	} else {
	    return _typeName;
	}
    }

    public void removeOldStoreEntry()
    {
	try {
	    store().remove_committed(getSavingUid(), super.type());
	} catch (ObjectStoreException ex) {
	    ErrorStream.warning().println("RecoveredServerTransaction.removeOldStoreEntry " + ex);
	}
    }
    
    public boolean assumeComplete()
    {
	_typeName = AssumedCompleteServerTransaction.typeName();
	return true;
    }
    /**
     * Override StateManager packHeader so it gets the original processUid, not
     * this process's
     *
     * @since JTS 2.1.
     */

protected void packHeader (OutputObjectState os, Uid txId,
			   Uid processUid) throws IOException
    {
	/*
	 * If there is a transaction present than pack the process Uid of
	 * this JVM and the tx id. Otherwise pack a null Uid.
	 */
	
	super.packHeader(os, get_uid(), _originalProcessUid);
    }

    /**
     * Override StateManager's unpackHeader to save the processUid of the
     * original process
     *
     * @since JTS 2.1.
     */

protected void unpackHeader (InputObjectState os, Uid txId,
			     Uid processUid) throws IOException
    {
	_originalProcessUid = new Uid(Uid.nullUid());
	super.unpackHeader(os, super.objectUid, _originalProcessUid);

	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_CRASH_RECOVERY,
						 "RecoveredServerTransaction.unpackHeader - txid = "+get_uid()+" and processUid = "+_originalProcessUid);
	}
    }

public boolean save_state (OutputObjectState objectState, int ot)
{
    // do the other stuff
    boolean result = super.save_state(objectState,ot);
    
   // iff assumed complete, include the time (this should happen only once)
    if (_typeName != null && result) {
	Date lastActiveTime = new Date();
	try {
	    objectState.packLong(lastActiveTime.getTime());
	} catch (java.io.IOException ex) {
	}
    }
    return result;
}

/** do not admit to being inactive */
public Date getLastActiveTime()
{
    return null;
}

    protected Uid _originalProcessUid;

    private String _typeName;
    private boolean  _reportHeuristics = false;
    private int	 _recoveryStatus = RecoveryStatus.NEW;

    private int _assumed_not_exist = 10;

    private org.omg.CosTransactions.Status _txStatus;

    static Hashtable assumed_not_exist;
    
    static {
	assumed_not_exist = new Hashtable();
    }

}
