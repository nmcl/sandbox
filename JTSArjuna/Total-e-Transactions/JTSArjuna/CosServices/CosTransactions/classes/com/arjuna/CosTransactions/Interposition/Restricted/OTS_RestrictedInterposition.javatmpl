/*
 * Copyright (C) 1998, 1999, 2000,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: OTS_RestrictedInterposition.javatmpl,v 1.2.14.1.18.1.2.1 2000/12/04 12:12:08 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.CosTransactions.Interposition.Restricted;

import com.arjuna.ArjunaCommon.Template.*;
import com.arjuna.ArjunaCommon.Common.Uid;
import com.arjuna.CosTransactions.Interposition.OTS_ServerControl;
import com.arjuna.CosTransactions.Interposition.OTS_ServerFactory;
import com.arjuna.CosTransactions.Interposition.Arjuna.*;
import com.arjuna.CosTransactions.*;
import org.omg.CosTransactions.*;
import com.arjuna.ArjunaOTS.*;
import org.omg.CORBA.CompletionStatus;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UNKNOWN;

#include <CosTransactions/CosTranExceptions.h>

public class OTS_RestrictedInterposition extends OTS_Interposition
{

public OTS_RestrictedInterposition ()
    {
    }

public static OTS_Control create (PropagationContext context) throws SystemException
    {
	if (__list != null)
	    return __list.setupHierarchy(context);
	else
	    return null;
    }
    
    /*
     * Assume that all actions in the imported hierarchy are of the same
     * type, i.e., all Arjuna transactions.
     *
     * Because of the way garbage collection works in the ORB we have to
     * run an explicit garbage collection phase for finished hierarchies.
     */

public synchronized OTS_Control setupHierarchy (PropagationContext context) throws SystemException
    {
	OTS_Control controlPtr = null;
	Uid theUid = null;
	InterposedHierarchy proxyAction = null;

	if (context.parents.length == 0)
	    theUid = OTS_Utility.otidToUid(context.currentTransaction.otid);
	else
	    theUid = OTS_Utility.otidToUid(context.parents[context.parents.length-1].otid);

	proxyAction = super.present(theUid);

	if (proxyAction == null)
	{
	    /*
	     * Create a new proxyAction element and return the
	     * "current" transaction.
	     */

	    controlPtr = createHierarchy(context, theUid);
	}
	else
	{
	    /*
	     * Check hierarchy of existing element.
	     */

	    controlPtr = checkHierarchy(proxyAction, context);
	}

	return controlPtr;	    
    }

protected synchronized OTS_Control createHierarchy (PropagationContext ctx, Uid tlUid) throws SystemException
    {
	/*
	 * Start at the parent and work our way down to "current". The current
	 * transaction is not in the IDL sequence, but sent as separate field
	 * of the propagation context. This tends to make the code more
	 * complex than it would be if the entire hierarchy was represented in
	 * one place.
	 */

	int depth = ctx.parents.length;
	OTS_ServerTopLevelAction tlAction = null;
	Coordinator tmpCoord = null;
	Terminator tmpTerm = null;
	
	/*
	 * First deal with top-level transaction, which may be
	 * the current transaction.
	 */

	if (depth == 0)
	{
	    tmpCoord = ctx.currentTransaction.coord;
	    tmpTerm = ctx.currentTransaction.term;
	}
	else
	{
	    tmpCoord = ctx.parents[depth-1].coord;
	    tmpTerm = ctx.parents[depth-1].term;
	}

	OTS_ServerControl control = OTS_ServerFactory.create_transaction(tlUid, null, null,
									 tmpCoord, tmpTerm, ctx.timeout);

	tlAction = new OTS_ServerRestrictedTopLevelAction(control);

	if (!tlAction.valid())
	{
	    /*
	     * Just deal with current transaction. Others must have been
	     * registered successfully, and will be deal with automatically
	     * when the parent transaction terminates.
	     */
		
	    try
	    {
		tlAction.rollback();
		tlAction = null;
	    }
	    catch (Exception e)
	    {
	    }

#ifdef ORB_OTS_SUPPORT
	    throw new TransactionRolledBack();
#else
	    throw new UNKNOWN(OTS_Exceptions.UNKNOWN_EXCEPTION, CompletionStatus.COMPLETED_NO);
#endif
	}
	
	InterposedHierarchy newElement = new InterposedHierarchy(tlAction);

	super._head.add(newElement);

	if (depth > 0) // current is a nested transaction
	{
	    /*
	     * Now deal with any nested transactions.
	     * As we create, register with the original transactions.
	     */

	    OTS_ServerRestrictedNestedAction nestedAction = null;
    
	    for (int i = depth -2; i >= 0; i--)
	    {
		tmpCoord = ctx.parents[i].coord;
		tmpTerm = ctx.parents[i].term;
		
		control = OTS_ServerFactory.create_subtransaction(OTS_Utility.otidToUid(ctx.parents[i].otid),
								  tmpCoord, tmpTerm, control);

		nestedAction = new OTS_ServerRestrictedNestedAction(control);

		if (!nestedAction.valid())
		{
		    /*
		     * Just deal with current transaction. Others must have been
		     * registered successfully, and will be deal with automatically
		     * when the parent transaction terminates.
		     */
		
		    try
		    {
			nestedAction.rollback();
			nestedAction = null;
		    }
		    catch (Exception e)
		    {
		    }
	
#ifdef ORB_OTS_SUPPORT
		    throw new TransactionRolledBack();
#else
		    throw new UNKNOWN(OTS_Exceptions.UNKNOWN_EXCEPTION, CompletionStatus.COMPLETED_NO);
#endif
		}
		
		/*
		 * Add transaction resource to list.
		 */

		tlAction.addChild(nestedAction);
	    }

	    /*
	     * Now deal with current transaction. If there is only one transaction we do nothing.
	     */

	    tmpCoord = ctx.currentTransaction.coord;
	    tmpTerm = ctx.currentTransaction.term;
	    
	    control = OTS_ServerFactory.create_subtransaction(OTS_Utility.otidToUid(ctx.currentTransaction.otid),
							      tmpCoord, tmpTerm, control);
	    nestedAction = new OTS_ServerRestrictedNestedAction(control);

	    if (!nestedAction.valid())
	    {
		/*
		 * Just deal with current transaction. Others must have been
		 * registered successfully, and will be deal with automatically
		 * when the parent transaction terminates.
		 */
		
		try
		{
		    nestedAction.rollback();
		    nestedAction = null;
		}
		catch (Exception e)
		{
		}
	
#ifdef ORB_OTS_SUPPORT
		throw new TransactionRolledBack();
#else
		throw new UNKNOWN(OTS_Exceptions.UNKNOWN_EXCEPTION, CompletionStatus.COMPLETED_NO);
#endif
	    }
	    
	    tlAction.addChild(nestedAction);
	}

	return control;
    }
    
    /*
     * Work our way down the hierarchy, aborting any actions which are no
     * longer valid, and creating any new ones. These new actions must be
     * nested actions.
     */
    
protected synchronized OTS_Control checkHierarchy (InterposedHierarchy hier,
						   PropagationContext context) throws SystemException
    {
	OTS_ServerRestrictedTopLevelAction tlAction = (OTS_ServerRestrictedTopLevelAction) hier.action();
	OTS_ServerControl control = tlAction.control();  // top-level's control
	int depth = context.parents.length;
	int differenceIndex = -1;  // index of the new transactions in the hierarchy
	OTS_ServerRestrictedNestedAction nestedAction = tlAction.child();  // top-level's nested action
	
	/*
	 * Abort any old actions before we check whether we need to create
	 * additional ones.
	 *
	 * To get here we have already checked the id of the parent
	 * transaction, i.e., depth -1.
	 *
	 * Remember: the context hierarchy *does not* include the current
	 * transaction!
	 */

	if (depth == 0)
	{
	    /*
	     * If there are no transactions in the sent hierarchy then
	     * current is the only nested transaction. So, abort the
	     * rest of our local hierarchy.
	     */

	    if (nestedAction != null)
	    {
		tlAction.abortChild(nestedAction);  // automatically removed from resource list
		nestedAction = null;
		control = tlAction.deepestControl();
	    }
	}
	else
	{
	    /*
	     * Start at -2 and work our way down the hierarchy. We
	     * use -2 since the length gives us the number of elements,
	     * which is 0 to n-1, and the n-1th element is the top-level
	     * transaction, which we have dealt with to get this far.
	     */
	    
	    for (int i = depth -2; (i >= 0) && (nestedAction != null); i--)
	    {
		if (nestedAction.get_uid().equals(OTS_Utility.otidToUid(context.parents[i].otid)))
		{
		    /*
		     * nestedAction *always* points to the next transaction
		     * in the hierarchy when we leave this loop.
		     */

		    nestedAction = nestedAction.child();

		    if ((nestedAction == null) && (i > 0))
		    {
			differenceIndex = i -1;
			control = tlAction.deepestControl();
		    }
		}
		else
		{
		    /*
		     * Uids not equal, so abort. No need to continue down the
		     * hierarchy, as aborting from this point will implicitly
		     * abort out children.
		     */
		
		    differenceIndex = i;    // remember for later so that we can add new actions.

		    tlAction.abortChild(nestedAction);
		    nestedAction = null;
		    control = tlAction.deepestControl();
		    
		    break;
		}
	    }

	    /*
	     * Do we have anything left in the sent hierarchy (other than
	     * current)? If so, add it now.
	     */

	    if (differenceIndex != -1)
	    {
		Coordinator tmpCoord;
		Terminator tmpTerm;
		
		for (int j = differenceIndex; j >= 0; j--)
		{
		    tmpCoord = context.parents[j].coord;
		    tmpTerm = context.parents[j].term;
		    
		    control = OTS_ServerFactory.create_subtransaction(OTS_Utility.otidToUid(context.parents[j].otid),
								      tmpCoord, tmpTerm, control);
		    nestedAction = new OTS_ServerRestrictedNestedAction(control);
		    
		    if (!nestedAction.valid())
		    {
			/*
			 * Just deal with current transaction. Others must have been
			 * registered successfully, and will be deal with automatically
			 * when the parent transaction terminates.
			 */
		
			try
			{
			    nestedAction.rollback();  // does dispose as well!
			    nestedAction = null;
			}
			catch (Exception e)
			{
			}
	
#ifdef ORB_OTS_SUPPORT
			throw new TransactionRolledBack();
#else
			throw new UNKNOWN(OTS_Exceptions.UNKNOWN_EXCEPTION, CompletionStatus.COMPLETED_NO);
#endif
		    }

		    tlAction.addChild(nestedAction);
		}

		nestedAction = null;
	    }
	    else
	    {
		if (nestedAction != null)
		{
		    /*
		     * If current transaction has a child then we should
		     * abort it, since it does not exist in the hierarchy
		     * we have just received.
		     */
		    
		    nestedAction = nestedAction.child();
		    
		    if (nestedAction != null)
		    {
			tlAction.abortChild(nestedAction);
			nestedAction = null;
			control = tlAction.deepestControl();
		    }
		}
	    }
	}

	boolean newCurrent = false;	
	Uid sentCurrent = OTS_Utility.otidToUid(context.currentTransaction.otid);

	/*
	 * If differentIndex is not -1 then we already found a difference
	 * between the sent hierarchy and the one we already had, so we
	 * must have a new current.
	 */
	
	if (differenceIndex == -1)
	{
	    /*
	     * Now determine whether we have to create any new nested actions.
	     */

	    Uid currentUid = null;

	    /*
	     * Get hold of our local notion of current.
	     */
	
	    if (nestedAction == null)
	    {
		nestedAction = tlAction.child();
		
		if (nestedAction != null)
		{
		    while (nestedAction.child() != null)
			nestedAction = nestedAction.child();

		    currentUid = nestedAction.get_uid();
		}
		else
		    currentUid = tlAction.get_uid();
	    }
	    else
		currentUid = nestedAction.get_uid();
	
	    /*
	     * Is our notion of the current transaction the same as
	     * that sent?
	     */

	    if (currentUid.notEquals(sentCurrent))
	    {
		newCurrent = true;
	    }
	}
	else
	    newCurrent = true;

	if (newCurrent)
	{
	    if (depth == 1)
	    {
		/*
		 * Old current is gone.
		 */
		
		nestedAction = tlAction.child();

		if (nestedAction != null)
		{
		    tlAction.abortChild(nestedAction);
		    nestedAction = null;
		}
	    
		control = (OTS_ServerControl) tlAction.control();
	    }
	    else
		control = tlAction.deepestControl();
	    
	    TransIdentity currentID = context.currentTransaction;
	    
	    control = OTS_ServerFactory.create_subtransaction(sentCurrent,
							      currentID.coord, currentID.term, control);
	    nestedAction = new OTS_ServerRestrictedNestedAction(control);
	    
	    if (!nestedAction.valid())
	    {
		/*
		 * Just deal with current transaction. Others must have been
		 * registered successfully, and will be deal with automatically
		 * when the parent transaction terminates.
		 */
		
		try
		{
		    nestedAction.rollback();  // does dispose as well!
		    nestedAction = null;
		}
		catch (Exception e)
		{
		}
	
#ifdef ORB_OTS_SUPPORT
		throw new TransactionRolledBack();
#else
		throw new UNKNOWN(OTS_Exceptions.UNKNOWN_EXCEPTION, CompletionStatus.COMPLETED_NO);
#endif
	    }

	    tlAction.addChild(nestedAction);

	    nestedAction = null;
	}

	return control;
    }

private static OTS_RestrictedInterposition __list = new OTS_RestrictedInterposition();

};
