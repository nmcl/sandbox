/*
 * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
 *
 * HP Arjuna Labs,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: ArjunaOTS.tmpl,v 1.3.26.3.2.2.44.2.2.1.40.1 2001/12/11 13:36:05 nmcl Exp $
 */

#ifndef ARJUNAOTS_IDL_
#define ARJUNAOTS_IDL_

#ifndef NO_PRAGMA_SUPPORT
#pragma prefix "arjuna.com"
#endif

#ifndef RCPORB
INCLUDE_DIRECTIVE <idl/CosTransactions.idl>
#else
INCLUDE_DIRECTIVE "CosTransactions.idl"  // uugghh!!
#endif

#ifdef HAVE_JAVAPACKAGE
#pragma javaPackage "com.arjuna"
#endif

#ifdef ORBIX_IR_MODULE_BUG

/*
 * These interfaces are here because of a bug in Orbix which
 * does not allow us to narrow to any interface which is
 * within a module!
 */

// Some useful exceptions

exception ActiveTransaction {};
exception BadControl {};
exception Destroyed {};
exception ActiveThreads {};
exception InterpositionFailed {};

interface UidCoordinator : CosTransactions::Coordinator
{
    readonly attribute string uid;
    readonly attribute string topLevelUid;
};

interface ActionControl : CosTransactions::Control
{
    CosTransactions::Control getParentControl () raises(CosTransactions::Unavailable);

    void destroy () raises (ActiveTransaction, ActiveThreads, BadControl, Destroyed);
};

interface ArjunaSubtranAwareResource : SubtransactionAwareResource
{
    CosTransactions::Vote prepare_subtransaction ();
};

interface OTSAbstractRecord : ArjunaSubtranAwareResource
{
    readonly attribute long type_id;
    readonly attribute string uid;

    boolean propagateOnAbort ();
    boolean propagateOnCommit ();

    boolean saveRecord ();

    void merge (in OTSAbstractRecord record);
    void alter (in OTSAbstractRecord record);

    boolean shouldAdd (in OTSAbstractRecord record);
    boolean shouldAlter (in OTSAbstractRecord record);
    boolean shouldMerge (in OTSAbstractRecord record);
    boolean shouldReplace (in OTSAbstractRecord record);
};

#endif

module ArjunaOTS
{
    enum TransactionType { TransactionTypeActive, TransactionTypeTerminated, TransactionTypeUnresolved };

    struct GlobalTransactionInfo
    {
	long  totalNumberOfTransactions;
	long  numberOfCommittedTransactions;
	long  numberOfAbortedTransactions;
	float averageLifetime;
	long  numberOfHeuristics;
	long  reaperTimeout;
	long  defaultTimeout;
    };

    struct TransactionInfo
    {
	long currentDepth;
	long timeout;
	long numberOfThreads;
    };
    
    typedef sequence<CosTransactions::otid_t> txIds;
    
#ifndef ORBIX_IR_MODULE_BUG
    // Some useful exceptions

    exception ActiveTransaction {};
    exception BadControl {};
    exception Destroyed {};
    exception ActiveThreads {};
    exception InterpositionFailed {};
#endif

    exception NoContext {};

    interface UidCoordinator : CosTransactions::Coordinator
    {
	readonly attribute string uid;
	readonly attribute string topLevelUid;
    };

    interface ActionControl : CosTransactions::Control
    {
        CosTransactions::Control getParentControl () raises(CosTransactions::Unavailable);

        void destroy () raises (ActiveTransaction, ActiveThreads, BadControl, Destroyed);
    };

    interface ArjunaSubtranAwareResource : CosTransactions::SubtransactionAwareResource
    {
	CosTransactions::Vote prepare_subtransaction ();
    };

    /*
     * At the moment these management methods occur on the ArjunaFactory.
     * However, we could have a separate interface which the factory gives
     * out an implementation to, and that is then used.
     */

    interface ArjunaFactory : CosTransactions::TransactionFactory
    {
	txIds numberOfTransactions (in ArjunaOTS::TransactionType t) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);

	txIds getChildTransactions (in CosTransactions::otid_t parent) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);

	CosTransactions::Status getCurrentStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
	CosTransactions::Status getStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);

	GlobalTransactionInfo getGlobalInfo ();
	TransactionInfo getTransactionInfo (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);

	CosTransactions::Control getTransaction (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
    };

    interface ArjunaTransaction : UidCoordinator, CosTransactions::Terminator
    {
    };

    interface Current : CosTransactions::Current
    {
	long get_timeout ();
    };

#ifndef ORBIX_IR_MODULE_BUG
    interface OTSAbstractRecord : ArjunaSubtranAwareResource
    {
	readonly attribute long type_id;
	readonly attribute string uid;

	boolean propagateOnAbort ();
	boolean propagateOnCommit ();

	boolean saveRecord ();
    
	void merge (in OTSAbstractRecord record);
	void alter (in OTSAbstractRecord record);

	boolean shouldAdd (in OTSAbstractRecord record);
	boolean shouldAlter (in OTSAbstractRecord record);
	boolean shouldMerge (in OTSAbstractRecord record);
	boolean shouldReplace (in OTSAbstractRecord record);
    };
#endif    
};

#ifdef ORBIX_IR_MODULE_BUG
interface ArjunaFactory : CosTransactions::TransactionFactory
{
    txIds numberOfTransactions (in ArjunaOTS::TransactionType t) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);

    txIds getChildTransactions (in CosTransactions::otid_t parent) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);

    CosTransactions::Status getCurrentStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
    CosTransactions::Status getStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);

    GlobalTransactionInfo getGlobalInfo ();
    TransactionInfo getTransactionInfo (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);

    CosTransactions::Control getTransaction (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
};
#endif

#endif

