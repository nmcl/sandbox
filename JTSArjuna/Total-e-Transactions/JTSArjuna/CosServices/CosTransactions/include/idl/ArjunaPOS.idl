/*
 * Copyright (C) 1997, 1998, 1999, 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: ArjunaPOS.idl,v 1.1.42.1 2001/03/20 16:24:47 nmcl Exp $
 */

#ifndef ARJUNAPOS_IDL_
#define ARJUNAPOS_IDL_

#include <idl/CosPersistencePID.idl>
#include <idl/CosPersistencePDS.idl>
#include <idl/CosPersistencePO.idl>

module ArjunaPOS
{
    enum ObjectType { RECOVERABLE, ANDPERSISTENT, NEITHER };

    enum ObjectStatus { CONNECTED, DISCONNECTED, DELETED };
    
    exception CreateFailure {};
    exception PackError {};
    exception UnpackError {};

    interface PID_Uid : CosPersistencePID::PID
    {
	attribute string uid;
	attribute string typeName;
	attribute string objectStore;
    };
    
    interface PID_RemoteService : CosPersistencePID::PID
    {
	attribute string hostName;
	attribute string pidString;
    };

    struct PID_Group
    {
	sequence <CosPersistencePID::PID> member;
    };
    
    interface PID_ReplicatedService : CosPersistencePID::PID
    {
	attribute long numberOfReplicas;
	attribute PID_Group replicas;
    };
    
    interface PDSFactory
    {
	CosPersistencePDS::PDS create_from_string (in string key) raises (CreateFailure);
	CosPersistencePDS::PDS create_from_PID (in CosPersistencePID::PID p) raises (CreateFailure);

	CosPersistencePDS::PDS create_from_pidstring (in string pidstring) raises (CreateFailure);    
    };

    interface PIDFactory
    {
	CosPersistencePID::PID create_PID_from_key (in string key) raises (CreateFailure);
	CosPersistencePID::PID create_PID_from_string (in string pid_string) raises (CreateFailure);
	CosPersistencePID::PID create_PID_from_key_and_string (in string key, in string pid_string) raises (CreateFailure);
    };
    
    interface ObjectBuffer
    {
	readonly attribute any contents;

	boolean good ();
    
	/* pack operations for standard types */
    
	void packChar (in char c) raises (PackError);
	void packBoolean (in boolean b) raises (PackError);
	void packShort (in short s) raises (PackError);
	void packUShort (in unsigned short us) raises (PackError);
	void packLong (in long l) raises (PackError);
	void packULong (in unsigned long ul) raises (PackError);
	void packFloat (in float f) raises (PackError);
	void packDouble (in double d) raises (PackError);
	void packMappedString (in string s) raises (PackError);
	void packNonMappedString (in string s) raises (PackError);

	void unpackChar (inout char c) raises (UnpackError);
	void unpackBoolean (inout boolean b) raises (UnpackError);
	void unpackLong (inout long l) raises (UnpackError);
	void unpackULong (inout unsigned long ul) raises (UnpackError);
	void unpackShort (inout short s) raises (UnpackError);
	void unpackUShort (inout unsigned short us) raises (UnpackError);
	void unpackFloat (inout float f) raises (UnpackError);
	void unpackDouble (inout double d) raises (UnpackError);
	void unpackString (inout string s) raises (UnpackError);
    };

    interface SerializablePO : CosPersistencePO::PO
    {
	readonly attribute string type;

	/*
	 * We don't do anything with an ObjectType parameter yet.
	 */
	
	void save_state (in ObjectBuffer os) raises (PackError);
	void restore_state (in ObjectBuffer os) raises (UnpackError);
    };
    
};

#endif
