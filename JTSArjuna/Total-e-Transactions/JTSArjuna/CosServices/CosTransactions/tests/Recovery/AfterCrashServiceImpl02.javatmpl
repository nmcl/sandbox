//
// Copyright (C) 2000,
//
// Arjuna Solutions, Ltd.,
// Newcastle upon Tyne,
// Tyne and Wear,
// UK.
//
// $Id: AfterCrashServiceImpl02.javatmpl,v 1.1.2.2 2002/07/04 10:41:29 delsworthy Exp $
//

#include <Common/OrbPortability.h>

import org.omg.CORBA.*;
import com.arjuna.OrbCommon.*;
import org.omg.CosTransactions.*;
import com.arjuna.CosTransactions.OTS;
import Recovery.*;

public class AfterCrashServiceImpl02 implements TIE_CLASS_(AfterCrashService)
{
    public AfterCrashServiceImpl02(int serviceNumber, int objectNumber)
    {
        _serviceNumber = serviceNumber;
        _objectNumber  = objectNumber;
    }

    public void setup_oper(int number_of_resources)
    {
        _resourceImpl        = new ResourceImpl02[number_of_resources];
        _resource            = new Resource[number_of_resources];
        _recoveryCoordinator = new RecoveryCoordinator[number_of_resources];

        for (int index = 0; index < number_of_resources; index++)
        {
            try
            {
                _resourceImpl[index] = new ResourceImpl02(_objectNumber, index);
                TIE_INSTANCE_(Resource) servant = new TIE_INSTANCE_(Resource)(_resourceImpl[index]);
                
                READY_IMPL_(servant);
                _resource[index] = CORBA_REF_(servant, Resource);
            
                String recoveryCoordinatorIOR = ServerIORStore.loadIOR("RecoveryCoordinator_" + _serviceNumber + "_" + _objectNumber + "_" + index);

                if (recoveryCoordinatorIOR != null)
                    _recoveryCoordinator[index] = NARROW_(RecoveryCoordinator,ORBInterface.orb().string_to_object(recoveryCoordinatorIOR));
                else
                    _recoveryCoordinator[index] = null;
            }
            catch (Exception exception)
            {
                System.err.println("AfterCrashServiceImpl02.setup_oper: " + exception);
                exception.printStackTrace(System.err);
                _isCorrect = false;
            }
        }
    }

    public boolean check_oper(CheckBehavior[] check_behaviors)
    {
        boolean correct = true;

        for (int index = 0; index < _recoveryCoordinator.length; index++)
        {
            if (_recoveryCoordinator[index] == null)
            {
                System.err.println("AfterCrashServiceImpl02.check_oper [O" + _objectNumber + ".R" + index + "]: Done");
                correct = correct && check_behaviors[index].allow_done;
            }
            else
                try
                {
                    Status status = _recoveryCoordinator[index].replay_completion(_resource[index]);
                    System.err.println("AfterCrashServiceImpl02.check_oper [O" + _objectNumber + ".R" + index + "]: replay_completion returned: " + status);
                    correct = correct && (((status == Status.StatusPrepared) && check_behaviors[index].allow_returned_prepared) ||
                                          ((status == Status.StatusCommitting) && check_behaviors[index].allow_returned_committing) ||
                                          ((status == Status.StatusCommitted) && check_behaviors[index].allow_returned_committed) ||
                                          ((status == Status.StatusRolledBack) && check_behaviors[index].allow_returned_rolledback));
                }
                catch (NotPrepared notPrepared)
                {
                    correct = correct && check_behaviors[index].allow_raised_not_prepared;
                    System.err.println("AfterCrashServiceImpl02.check_oper [O" + _objectNumber + ".R" + index + "]: replay_completion raised NotPrepared");
                }
                catch (Exception exception)
                {
                    System.err.println("AfterCrashServiceImpl02.check_oper [O" + _objectNumber + ".R" + index + "]:" + exception);
                    exception.printStackTrace(System.err);
                    correct = false;
                }
        }

        return correct;
    }

    public boolean is_correct()
    {
        System.err.println("AfterCrashServiceImpl02.is_correct [O" + _objectNumber + "]: " + _isCorrect);

        return _isCorrect;
    }

    public ResourceTrace get_resource_trace(int resource_number)
    {
        ResourceTrace resourceTrace = ResourceTrace.ResourceTraceUnknown;

        if ((resource_number >= 0) && (resource_number <_resourceImpl.length))
             resourceTrace = _resourceImpl[resource_number].getTrace();

        System.err.println("AfterCrashServiceImpl02.get_resource_trace [O" + _objectNumber + ".R" + resource_number + "]: " + resourceTrace);

        return resourceTrace;
    }

    private int                   _serviceNumber;
    private int                   _objectNumber;
    private boolean               _isCorrect           = true;

    private ResourceImpl02[]      _resourceImpl        = null;
    private Resource[]            _resource            = null;
    private RecoveryCoordinator[] _recoveryCoordinator = null;
}
