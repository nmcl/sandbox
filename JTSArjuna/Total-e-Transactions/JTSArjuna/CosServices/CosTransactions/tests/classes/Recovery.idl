//
// Copyright (C) 2000,
//
// Arjuna Solutions, Ltd.,
// Newcastle upon Tyne,
// Tyne and Wear,
// UK.
//
// $Id: Recovery.idl,v 1.1.2.1 2002/06/27 11:04:12 delsworthy Exp $
//


/*
 * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
 *
 * HP Arjuna Labs,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: Recovery.idl,v 1.1.2.1 2002/06/27 11:04:12 delsworthy Exp $
 */





#pragma prefix "omg.org"




//
// If Draft3 is defined includes most (but not all of the features
// of the revised OTS spec at Draft3 (Nov 22, 96).
// Those missing generally need support from other services or the ORB
// itself
//

/*
 * We provide minimal support for drafts before 3.
 * Because some systems (e.g., Orbix) do their own parsing and
 * can't cope with '#if defined' statements, we have some "extended"
 * conditional compilation lines!
 */



module CosTransactions
{
    enum Status { StatusActive, StatusMarkedRollback, StatusPrepared,
		  StatusCommitted, StatusRolledBack, StatusUnknown,

		  StatusPreparing, StatusCommitting, StatusRollingBack,

		  StatusNoTransaction };

    enum Vote { VoteCommit, VoteRollback, VoteReadOnly };




    exception WrongTransaction {};


    // Heuristic exceptions

    exception HeuristicRollback {};
    exception HeuristicCommit {};
    exception HeuristicMixed {};
    exception HeuristicHazard {};

    // Other transaction related exceptions
    
    exception SubtransactionsUnavailable {};
    exception NotSubtransaction {};
    exception Inactive {};
    exception NotPrepared {};
    exception NoTransaction {};
    exception InvalidControl {};
    exception Unavailable {};
    exception SynchronizationUnavailable {};

    // Forward references for later interfaces
	
    interface Control;
    interface Terminator;
    interface Coordinator;
    interface Resource;
    interface RecoveryCoordinator;

    interface SubtransactionAwareResource;

    interface TransactionFactory;

    interface TransactionalObject;

    interface Current;
    

    interface Synchronization;
    
    // Formally part of CosTSInteroperation



    struct otid_t
    {
	long formatID;
	long bequal_length;

	sequence <octet> tid;

    };

    struct TransIdentity
    {
	Coordinator coord;
	Terminator term;
	otid_t otid;
    };



    struct PropagationContext
    {
	unsigned long timeout;
	TransIdentity currentTransaction;

	sequence <TransIdentity> parents;

	any implementation_specific_data;
    };

    

    interface Current

    {
	void begin () raises (SubtransactionsUnavailable);

	void commit (in boolean report_heuristics) raises (NoTransaction, HeuristicMixed, HeuristicHazard);

	void rollback () raises (NoTransaction);
	void rollback_only () raises (NoTransaction);

	Status get_status ();
	string get_transaction_name ();
	void set_timeout (in unsigned long seconds);

	Control get_control ();
	Control suspend ();
	void resume (in Control which) raises (InvalidControl);
    };
    
    interface TransactionFactory
    {
	Control create (in unsigned long time_out);

	Control recreate (in PropagationContext ctx);

    };

    interface Control
    {
	Terminator get_terminator () raises (Unavailable);
	Coordinator get_coordinator () raises (Unavailable);
    };

    interface Terminator
    {

	void commit (in boolean report_heuristics) raises (HeuristicMixed, HeuristicHazard);

	void rollback ();
    };

    interface Coordinator
    {
	Status get_status ();
	Status get_parent_status ();
	Status get_top_level_status ();
    
	boolean is_same_transaction (in Coordinator tc);
	boolean is_related_transaction (in Coordinator tc);
	boolean is_ancestor_transaction (in Coordinator tc);
	boolean is_descendant_transaction (in Coordinator tc);
	boolean is_top_level_transaction ();

	unsigned long hash_transaction ();
	unsigned long hash_top_level_tran ();


	RecoveryCoordinator register_resource (in Resource r) raises (Inactive);



	void register_synchronization (in Synchronization sync) raises (Inactive, SynchronizationUnavailable);



	void register_subtran_aware (in SubtransactionAwareResource r) raises (Inactive, NotSubtransaction);


	void rollback_only () raises (Inactive);

	string get_transaction_name ();

	Control create_subtransaction () raises (SubtransactionsUnavailable, Inactive);



	PropagationContext get_txcontext () raises (Unavailable);

    };

    interface RecoveryCoordinator
    {

	Status replay_completion (in Resource r) raises (NotPrepared);

    };
    
    interface Resource
    {

	Vote prepare () raises (HeuristicMixed, HeuristicHazard);

	void rollback () raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
	void commit () raises (NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);


	void commit_one_phase () raises (HeuristicHazard);


	void forget ();
    };


    interface SubtransactionAwareResource : Resource
    {
	void commit_subtransaction (in Coordinator parent);
	void rollback_subtransaction ();
    };
    
    interface TransactionalObject
    {
    };



    interface Synchronization : TransactionalObject
    {
	void before_completion ();
	void after_completion (in Status s);
    };

    
};







#pragma prefix "Recovery.arjuna.com"


module Recovery
{
    enum CrashBehavior
    {
        CrashBehaviorCrashInPrepare,
        CrashBehaviorCrashInCommit,
        CrashBehaviorCrashInRollback,
        CrashBehaviorCrashInCommitOnePhase,
        CrashBehaviorCrashInForget,
        CrashBehaviorNoCrash
    };

    struct ResourceBehavior
    {
        CrashBehavior   crash_behavior;
    };
    typedef sequence<ResourceBehavior> ResourceBehaviorSeq;

    struct CheckBehavior
    {
        boolean allow_done;
        boolean allow_returned_prepared;
        boolean allow_returned_committing;
        boolean allow_returned_committed;
        boolean allow_returned_rolledback;
        boolean allow_raised_not_prepared;
    };
    typedef sequence<CheckBehavior> CheckBehaviorSeq;

    enum ResourceTrace
    {
        ResourceTraceUnknown,
        ResourceTraceNone,
        ResourceTracePrepare,
        ResourceTracePrepareCommit,
        ResourceTracePrepareRollback,
        ResourceTraceCommitOnePhase,
        ResourceTraceRollback,
        ResourceTracePrepareForget,
        ResourceTracePrepareCommitForget,
        ResourceTracePrepareRollbackForget,
        ResourceTraceCommitOnePhaseForget,
        ResourceTraceCommit
    };

    interface BeforeCrashService
    {
        void    setup_oper(in CosTransactions::Control ctrl, in ResourceBehaviorSeq resource_behaviors);
        boolean is_correct();
    };

    interface AfterCrashService
    {
        void          setup_oper(in long number_of_resources);
        boolean       check_oper(in CheckBehaviorSeq check_behaviors);
        boolean       is_correct();
        ResourceTrace get_resource_trace(in long resource_number);
    };
};


