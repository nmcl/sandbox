/*
 * Copyright (C) 1999-2001 by HP Bluestone Software, Inc. All rights Reserved.
 *
 * HP Arjuna Labs,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: OrbPortability_Rule.def,v 1.1.2.1.10.2.6.1.14.1.12.2.42.1 2001/08/09 16:15:41 delsworthy Exp $
 */

/*
 *  OrbPortability_Rule.def
 */

/*
 * Useful macros etc.
 */

#ifndef IDL_SUFF
#  define IDL_SUFF idl
#endif

#ifndef IDLTMPL_SUFF
#  define IDLTMPL_SUFF tmpl
#endif

#ifndef IDL_SOURCE
#  define IDL_SOURCE(root) Concat(root,.IDL_SUFF)
#endif

#ifndef IDLTMPL_SOURCE
#  define IDLTMPL_SOURCE(root) Concat(root,.IDLTMPL_SUFF)
#endif

#ifndef TMPIR_FILE
#  define TMPIR_FILE(root) Concat(.ir_,root)
#endif

#ifndef TMPSTUBS_FILE
#  define TMPSTUBS_FILE(root) Concat(.stubs_,root)
#endif

#ifndef IDL_CFLAGS_DEFAULT
#  define IDL_CFLAGS_DEFAULT
#endif

#ifndef IDL_SFLAGS_DEFAULT
#  define IDL_SFLAGS_DEFAULT
#endif

#ifndef IDL_HFLAGS_DEFAULT
#  define IDL_HFLAGS_DEFAULT
#endif

#ifndef IDLFLAGS_DEFAULT
#  define IDLFLAGS_DEFAULT
#endif

#ifndef IRFLAGS_DEFAULT
#  define IRFLAGS_DEFAULT
#endif

#ifndef ORB_INCLUDES_DEFAULT
#  define ORB_INCLUDES_DEFAULT -I$$ORB_ROOT/include 
#endif

#ifndef ORB_LDFLAGS_DEFAULT
#  define ORB_LDFLAGS_DEFAULT
#endif

#ifndef ORB_LIBS_DEFAULT
#  define ORB_LIBS_DEFAULT
#endif

/*
 * Most rules appear in the individual Orb configuration files o_xxxx.cf
 * The rules here are generally applicable.
 */

#ifdef HAS_RECURSIVEMAKEVARIABLES

#ifndef AddToIdlFlags
#define AddToIdlFlags(flags)						@@\
IDLFLAGS = $(IDLFLAGS) flags
#endif

#ifndef AddToIdlIncludeFlags
#define AddToIdlIncludeFlags(flags)						@@\
IDLFLAGS = $(IDLFLAGS) Concat(-I,flags)
#endif

#ifndef AddToIRFlags
#define AddToIRFlags(flags)						@@\
IRFLAGS = $(IRFLAGS) flags
#endif

#ifndef AddToIRIncludeFlags
#define AddToIRIncludeFlags(flags)						@@\
IRFLAGS = $(IRFLAGS) Concat(-I,flags)
#endif

#else

#ifndef AddToIdlFlags
#define AddToIdlFlags(flags)						@@\
IDLFLAGS += flags
#endif

#ifndef AddToIdlIncludeFlags
#define AddToIdlIncludeFlags(flags)						@@\
IDLFLAGS += Concat(-I,flags)
#endif

#ifndef AddToIRFlags
#define AddToIRFlags(flags)						@@\
IRFLAGS += flags
#endif

#ifndef AddToIRIncludeFlags
#define AddToIRIncludeFlags(flags)						@@\
IRFLAGS += Concat(-I,flags)
#endif

#endif

#ifndef GlobalPackageRename
#define GlobalPackageRename(name,scope)
#endif

#ifndef LocalPackageRename
#define LocalPackageRename(name,scope,rule)
#endif

#ifndef CorbaJavaStubsPrefix
#define CorbaJavaStubsPrefix(idl,flags)
#endif

#ifndef AddPrefixFlags
#define AddPrefixFlags(pre,pkg)
#endif

#ifndef RetrieveIDLFile
#define RetrieveIDLFile(file1,file2)					@@\
Concat(file1,.IDL_SUFF): Concat(file2,.IDL_SUFF)			@@\
	CommandPrefix(echo) Retrieving Concat(file1,.IDL_SUFF)		@@\
	CommandPrefix($(CP)) Concat(file2,.IDL_SUFF) Concat(file1,.IDL_SUFF)
#endif

#ifndef CorbaJavaStubs
#define CorbaJavaStubs(file,flags)					@@\
Target(TMPSTUBS_FILE(file))						@@\
									@@\
TMPSTUBS_FILE(file): IDL_SOURCE(file)					@@\
	@echo Processing IDL_SOURCE(file)		                @@\
	CommandPrefix($(JAVAIDL)) $(IDLFLAGS) flags IDL_SOURCE(file)	@@\
	CommandPrefix(touch TMPSTUBS_FILE(file))			@@\
									@@\
Clean(TMPSTUBS_FILE(file))						@@\
Clean(JAVA_SOURCE(file))
#endif

#ifndef CorbaJavaStubsIR
#define CorbaJavaStubsIR(file,options)					@@\
CorbaJavaStubs(file,flags)
#endif

#ifndef CorbaJavaStubsPackage
#define CorbaJavaStubsPackage(idl,package,flags)			@@\
CorbaJavaStubs(idl,flags)
#endif

#ifndef CorbaJavaStubsIdlPackage
#define CorbaJavaStubsIdlPackage(file,idl,package,flags)		@@\
CorbaJavaStubsPackage(file,package,flags)
#endif

#if !defined(GNU_CPP) && !defined(WIN32)

#ifdef HAS_RECURSIVEMAKEVARIABLES

#ifndef ProcessIDL
#define ProcessIDL(file,flags)							@@\
IDL_GEN_FILES = $(IDL_GEN_FILES) IDL_SOURCE(file)						@@\
										@@\
IDL_SOURCE(file): IDLTMPL_SOURCE(file)						@@\
	CommandPrefix(echo) Generating $@ from IDLTMPL_SOURCE(file)		@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)		@@\
	CommandPrefix(ln -s) IDLTMPL_SOURCE(file) CPLUSPLUS_SOURCE(file)	@@\
	CommandPrefix(exec $(CPP)) $(CPPINCLUDES) $(CPPFLAGS) CPLUSPLUS_SOURCE(file) flags > Concat(file,.i)	@@\
	CommandPrefix(sed -e) "s;INCLUDE_DIRECTIVE;#include;" < Concat(file,.i) > IDL_SOURCE(file)	@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)
#endif

#else

#ifndef ProcessIDL
#define ProcessIDL(file,flags)							@@\
IDL_GEN_FILES += IDL_SOURCE(file)						@@\
										@@\
IDL_SOURCE(file): IDLTMPL_SOURCE(file)						@@\
	CommandPrefix(echo) Generating $@ from IDLTMPL_SOURCE(file)		@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)		@@\
	CommandPrefix(ln -s) IDLTMPL_SOURCE(file) CPLUSPLUS_SOURCE(file)	@@\
	CommandPrefix(exec $(CPP)) $(CPPINCLUDES) $(CPPFLAGS) CPLUSPLUS_SOURCE(file) flags > Concat(file,.i)	@@\
	CommandPrefix(sed -e) "s;INCLUDE_DIRECTIVE;#include;" < Concat(file,.i) > IDL_SOURCE(file)	@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)
#endif

#endif

#else

#ifdef HAS_RECURSIVEMAKEVARIABLES

#ifndef ProcessIDL
#define ProcessIDL(file,flags)							@@\
IDL_GEN_FILES = $(IDL_GEN_FILES) IDL_SOURCE(file)						@@\
										@@\
IDL_SOURCE(file): IDLTMPL_SOURCE(file)						@@\
	CommandPrefix(echo) Generating $@ from IDLTMPL_SOURCE(file)		@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)		@@\
	CommandPrefix($(CPP)) $(CPPINCLUDES) $(CPPFLAGS) IDLTMPL_SOURCE(file) flags > Concat(file,.i)	@@\
	CommandPrefix(sed -e) "s;INCLUDE_DIRECTIVE;#include;" < Concat(file,.i) > IDL_SOURCE(file)	@@\
	CommandPrefix($(RM)) Concat(file,.i)
#endif

#else

#ifndef ProcessIDL
#define ProcessIDL(file,flags)							@@\
IDL_GEN_FILES += IDL_SOURCE(file)						@@\
										@@\
IDL_SOURCE(file): IDLTMPL_SOURCE(file)						@@\
	CommandPrefix(echo) Generating $@ from IDLTMPL_SOURCE(file)		@@\
	CommandPrefix($(RM)) Concat(file,.i) CPLUSPLUS_SOURCE(file)		@@\
	CommandPrefix($(CPP)) $(CPPINCLUDES) $(CPPFLAGS) IDLTMPL_SOURCE(file) flags > Concat(file,.i)	@@\
	CommandPrefix(sed -e) "s;INCLUDE_DIRECTIVE;#include;" < Concat(file,.i) > IDL_SOURCE(file)	@@\
	CommandPrefix($(RM)) Concat(file,.i)
#endif

#endif

#endif

#ifndef CopyIDL
#define CopyIDL(file,dir)							@@\
Target(Concat(dir,/file.IDL_SUFF))						@@\
										@@\
Concat(dir,/file.IDL_SUFF): file.IDL_SUFF					@@\
	CommandPrefix(echo) Copying file.IDL_SUFF to $@				@@\
	CommandPrefix($(CP) file.IDL_SUFF Concat(dir,/file.IDL_SUFF))		@@\
										@@\
Clean(Concat(dir,file.IDL_SUFF))
#endif

#ifndef BuildIDLCode
#define BuildIDLCode(file)							@@\
Target(TMPSTUBS_FILE(file))							@@\
										@@\
TMPSTUBS_FILE(file): file.IDL_SUFF						@@\
	CommandPrefix(javac) *.java						@@\
	CommandPrefix(touch TMPSTUBS_FILE(file))				@@\
										@@\
Clean(TMPSTUBS_FILE(file))							@@\
Clean(*.class)									@@\
Clean(*.java)
#endif
