/*
 * Copyright (C) 1998, 1999, 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.  
 *
 * $Id: ArjunaJDBC2Connection.javatmpl,v 1.3.4.2.4.2.4.5.4.5.8.1.2.1.2.2.8.1.2.1.48.5.4.8 2001/11/05 12:45:54 nmcl Exp $
 */

#include <Common/OrbPortability.h>

package com.arjuna.JDBC2;

import com.arjuna.OrbCommon.*;
import com.arjuna.ArjunaCommon.Common.*;
import com.arjuna.CosTransactions.OTS;
import com.arjuna.CosTransactions.OTS_Current;
import com.arjuna.CosTransactions.ArjunaOTS.AtomicTransaction;
import com.arjuna.CosTransactions.ArjunaOTS.TopLevelTransaction;
import com.arjuna.jta.*;
import org.omg.CosTransactions.*;
import javax.transaction.*;
import javax.transaction.xa.*;
import javax.sql.*;
import java.util.*;
import java.sql.*;
import org.omg.CosTransactions.Unavailable;
import org.omg.CosTransactions.NotPrepared;
import org.omg.CosTransactions.HeuristicRollback;
import org.omg.CosTransactions.HeuristicCommit;
import org.omg.CosTransactions.HeuristicMixed;
import org.omg.CosTransactions.HeuristicHazard;
import org.omg.CosTransactions.SubtransactionsUnavailable;
import org.omg.CosTransactions.NoTransaction;
import javax.transaction.RollbackException;
import java.sql.SQLException;

/**
 * A transactional JDBC 2.0 connection. This wraps the real connection and
 * registers it with the transaction at appropriate times to ensure that
 * all worked performed by it may be committed or rolled back.
 *
 * Once a connection is used within a transaction, that instance is bound to
 * that transaction for the duration. It can be used by any number of threads,
 * as long as they all have the same notion of the "current" transaction. When
 * the transaction terminates, the connection is freed for use in another
 * transaction.
 *
 * Applications must not use this class directly.
 *
 * @author Mark Little (mark@arjuna.com)
 * @version $Id: ArjunaJDBC2Connection.javatmpl,v 1.3.4.2.4.2.4.5.4.5.8.1.2.1.2.2.8.1.2.1.48.5.4.8 2001/11/05 12:45:54 nmcl Exp $
 * @since JTS 2.0.
 */

public class ArjunaJDBC2Connection implements java.sql.Connection
{

public ArjunaJDBC2Connection (String dbName, Properties info) throws SQLException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_JDBC, "ArjunaJDBC2Connection.ArjunaJDBC2Connection ( "+dbName+" )");
	}

	String user = info.getProperty(ArjunaJDBC2Driver.userName);
	String passwd = info.getProperty(ArjunaJDBC2Driver.password);
	String dynamic = info.getProperty(ArjunaJDBC2Driver.dynamicClass);

	if ((dynamic == null) || (dynamic.equals("")))
	{
	    _recoveryConnection = new ArjunaJDBC2RecoveryConnection(dbName, user, passwd, this);
	}
	else
	{
	    _recoveryConnection = new ArjunaJDBC2DynamicRecoveryConnection(dbName, user, passwd, dynamic, this);
	}

	/*
	 * Is there any "modifier" we are required to work with?
	 */

	_theModifier = ArjunaJDBC2ModifierFactory.getModifier(((ConnectionInfo)_recoveryConnection).dataSourceName());
	_theConnection = null;
    }

public ArjunaJDBC2Connection (String dbName, String user, String passwd) throws SQLException
    {
	this(dbName, user, passwd, null);
    }
    
public ArjunaJDBC2Connection (String dbName, String user, String passwd, String dynamic) throws SQLException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.CONSTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_JDBC, "ArjunaJDBC2Connection.ArjunaJDBC2Connection ( "+dbName+", "+user+", "+passwd+", "+dynamic+" )");
	}

	if ((dynamic == null) || (dynamic.equals("")))
	{
	    _recoveryConnection = new ArjunaJDBC2RecoveryConnection(dbName, user, passwd, this);
	}
	else
	{
	    _recoveryConnection = new ArjunaJDBC2DynamicRecoveryConnection(dbName, user, passwd, dynamic, this);
	}

	/*
	 * Any "modifier" required to work with?
	 */

	_theModifier = ArjunaJDBC2ModifierFactory.getModifier(((ConnectionInfo)_recoveryConnection).dataSourceName());
	_theConnection = null;
    }

public void finalize ()
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.DESTRUCTORS, VisibilityLevel.VIS_PUBLIC,
						 FacilityCode.FAC_JDBC, "ArjunaJDBC2Connection.finalize ()");
	}

	_recoveryConnection = null;
	_theConnection = null;
    }

public Statement createStatement () throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}

	return getConnection().createStatement();
    }

public Statement createStatement (int rs, int rc) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().createStatement(rs, rc);
    }    
    
public PreparedStatement prepareStatement (String sql) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().prepareStatement(sql);
    }

public PreparedStatement prepareStatement (String sql, int rs, int rc) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().prepareStatement(sql, rs, rc);
    }
    
public CallableStatement prepareCall (String sql) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().prepareCall(sql);
    }

public CallableStatement prepareCall (String sql, int rs, int rc) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().prepareCall(sql, rs, rc);
    }

public String nativeSQL (String sql) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}
	
	return getConnection().nativeSQL(sql);
    }

public Map getTypeMap () throws SQLException
    {
	return getConnection().getTypeMap();
    }

public void setTypeMap (Map map) throws SQLException
    {
	getConnection().setTypeMap(map);
    }

    public void setHoldability(int holdability) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public int getHoldability() throws SQLException {
        throw new SQLException("feature not supported");
    }

    public Savepoint setSavepoint() throws SQLException {
        throw new SQLException("feature not supported");
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency,
                             int resultSetHoldability) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType,
              int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public CallableStatement prepareCall(String sql, int resultSetType,
             int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new SQLException("feature not supported");
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        throw new SQLException("feature not supported");
    }

    public PreparedStatement prepareStatement(String sql, int columnIndexes[])
            throws SQLException {
        throw new SQLException("feature not supported");
    }

    public PreparedStatement prepareStatement(String sql, String columnNames[])
            throws SQLException {
        throw new SQLException("feature not supported");
    }
    
    /**
     * Not allowed if within a transaction.
     */
    
public void setAutoCommit (boolean autoCommit) throws SQLException
    {
	if (transactionRunning())
	{
	    if (autoCommit)
		throw new SQLException("AutoCommit not allowed by Transaction Service.");
	}
	else
	{
	    getConnection().setAutoCommit(autoCommit);
	}
    }

public boolean getAutoCommit () throws SQLException
    {
	return getConnection().getAutoCommit();
    }

public void commit () throws SQLException
    {
	/*
	 * If there is a transaction running, then it cannot be terminated
	 * via the driver - the user must go through current.
	 */

	if (transactionRunning())
	{
	    throw new SQLException("Commit not allowed by Transaction Service.");
	}
	else
	    getConnection().commit();
    }

public void rollback () throws SQLException
    {
	if (transactionRunning())
	{
	    throw new SQLException("Rollback not allowed by Transaction Service.");
	}
	else
	    getConnection().rollback();
    }

    /*
     * This needs to be reworked in light of experience and requirements.
     */

public void close () throws SQLException
    {
	try
	{
	    /*
	     * Need to know whether this particular connection has
	     * outstanding resources waiting for it. If not then we
	     * can close, otherwise we can't.
	     */
	    
	    if (!_recoveryConnection.inuse())
	    {
		JDBC2ConnectionManager.remove(this);  // finalize?
	    }

	    /*
	     * Delist resource if within a transaction.
	     */

	    TransactionManager tm = JTA_TransactionManager.transactionManager();
	    JTA_Transaction tx = (JTA_Transaction) tm.getTransaction();
		
	    /*
	     * Don't delist if transaction not running. Rely on exception
	     * for this. Also only delist if the transaction is the one
	     * the connection is enlisted with!
	     */

	    if (tx != null)
	    {
		if (_recoveryConnection.validTransaction(tx))
		{
		    XAResource xares = _recoveryConnection.getResource();

		    if (!tx.delistResource(xares, XAResource.TMSUCCESS))
			throw new SQLException("Delist of resource failed");
		
		    if (_theModifier != null)
		    {
			if (!_theModifier.canReuseAfterDelist())
			    _recoveryConnection.close();
		    }
		}
	    }
	    else
		_recoveryConnection.close();

	    // what about connections without xaCon?
	}
	catch (IllegalStateException ex)
	{
	    // transaction not running, so ignore.
	}
	catch (SQLException sqle)
	{
	    throw sqle;
	}
	catch (Exception e1)
	{
	    e1.printStackTrace();
	    
	    throw new SQLException("ArjunaJDBC2Connection.close error: "+e1);
	}
    }

public boolean isClosed () throws SQLException
    {
	/*
	 * A connection may appear closed to a thread if another thread
	 * has bound it to a different transaction. If this is the case
	 * then we'll create a new connection for the new thread.
	 */

	try
	{
	    checkTransaction();
	}
	catch (SQLException ex)
	{
	    return true;
	}
	catch (Exception e)
	{
	}
	
	try
	{
	    XAConnection xaConn = _recoveryConnection.getCurrentConnection();

	    if (xaConn != null)
	    {
		return xaConn.getConnection().isClosed();
	    }
	    else
		return false;  // not opened yet.
	}
	catch (Exception e)
	{
	    // probably never opened!

	    return false; // NullPointerException et al
	}
    }
    
public DatabaseMetaData getMetaData () throws SQLException
    {
	return getConnection().getMetaData();
    }

    /**
     * Can only set readonly before we use the connection in a
     * given transaction!
     */
    
public void setReadOnly (boolean ro) throws SQLException
    {
	if (!_recoveryConnection.inuse())
	{
	    getConnection().setReadOnly(ro);
	}
	else
	    throw new SQLException("Cannot set readonly when within a transaction!");
    }
    
public boolean isReadOnly () throws SQLException
    {
	return getConnection().isReadOnly();
    }

public void setCatalog (String cat) throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}

	getConnection().setCatalog(cat);
    }
	    
public String getCatalog () throws SQLException
    {
	try
	{
	    checkTransaction();

	    registerDatabase();
	}
	catch (Unavailable e)
	{
	    /*
	     * No transaction running, so do nothing.
	     */
	}

	return getConnection().getCatalog();
    }

public void setTransactionIsolation (int iso) throws SQLException
    {
	if (iso != Connection.TRANSACTION_SERIALIZABLE)
	    throw new SQLException("Must be Connection.TRANSACTION_SERIALIZABLE");
    }

public int getTransactionIsolation () throws SQLException
    {
	return getConnection().getTransactionIsolation();
    }

public SQLWarning getWarnings () throws SQLException
    {
	return getConnection().getWarnings();
    }
    
public void clearWarnings () throws SQLException
    {
	getConnection().clearWarnings();
    }

    /**
     * @return the Arjuna specific recovery connection information. This
     * should not be used by anything other than Arjuna.
     */

public final JTA_XAConnectionRecovery recoveryConnection ()
    {
	return _recoveryConnection;
    }

    /**
     * @return the XAResource associated with the current XAConnection.
     */

protected final XAResource getXAResource ()
    {
	try
	{
	    return _recoveryConnection.getResource();
	}
	catch (Exception e)
	{
	    return null;
	}
    }

    /**
     * Remove this connection so that we have to get another one when
     * asked. Some drivers allow connections to be reused once any
     * transactions have finished with them.
     */

final void reset ()
    {
	try
	{
	    _theConnection.close();
	}
	catch (Exception ex)
	{
	}
	
	_theConnection = null;
    }
    
final java.sql.Connection getConnection () throws SQLException
    {
	if (_theConnection != null)
	    return _theConnection;
	
	XAConnection xaConn = _recoveryConnection.getConnection();

	if (xaConn != null)
	{
	    _theConnection =  xaConn.getConnection();

	    try
	    {
		DatabaseMetaData metaData = _theConnection.getMetaData();

		if (metaData.supportsTransactionIsolationLevel(Connection.TRANSACTION_SERIALIZABLE))
		{
		    try
		    {
			if (_theConnection.getTransactionIsolation() != Connection.TRANSACTION_SERIALIZABLE)
			{
			    _theConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
			}
		    }
		    catch (SQLException e)
		    {
			ErrorStream.warning().println("ArjunaJDBC2Connection - failed to set isolation level: "+e);

			throw e;
		    }
		}
	    }
	    catch (SQLException ex)
	    {
		ex.printStackTrace();
		
		throw ex;
	    }
	    catch (Exception e)
	    {
		ErrorStream.warning().println("ArjunaJDBC2Connection - failed to get isolation level: "+e);

		throw new SQLException("JDBC2 connection initialisation problem:" +e);
	    }
	    
	    return _theConnection;
	}
	else
	    return null;
    }

final ConnectionInfo connectionInfo ()
    {
	return (ConnectionInfo) _recoveryConnection;
    }
    
private final boolean transactionRunning () throws SQLException
    {
	try
	{
	    if (JTA_TransactionManager.transactionManager().getTransaction() != null)
	    {
		return true;
	    }
	    else
	    {
		return false;
	    }
	}
	catch (Exception e)
	{
	    throw new SQLException(e.toString());
	}
    }

    /*
     * Whenever a JDBC call is invoked on us we get an XAResource and
     * try to register it with the transaction. If the same thread
     * causes this to happen many times within the same transaction then
     * we will currently attempt to get and register many redundant XAResources
     * for it. The JTA implementation will detect this and ignore all but the
     * first for each thread. However, a further optimisation would be to trap
     * such calls here and not do a registration at all. This would require the
     * connection object to be informed whenever a transaction completes so
     * that it could flush its cache of XAResources though.
     */

private final synchronized void registerDatabase () throws SQLException
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PRIVATE,
						 FacilityCode.FAC_JDBC, "ArjunaJDBC2Connection.registerDatabase ()");
	}

	Connection theConnection = getConnection();

	if (theConnection != null)
	{
	    XAResource xares = null;

	    try
	    {
		TransactionManager tm = JTA_TransactionManager.transactionManager();
		JTA_Transaction tx = (JTA_Transaction) tm.getTransaction();

		if (tx == null)
		    return;

		/*
		 * Already enlisted with this transaction?
		 */

		if (!_recoveryConnection.setTransaction(tx))
		    throw new SQLException("Connection is already associated with a different transaction! Obtain a new connection for this transaction.");
		
		Object[] params;
		
		if (_theModifier != null)
		    params = new Object[2];
		else
		    params = new Object[1];

		params[JTA_Transaction.XACONNECTION] = _recoveryConnection;

		if (_theModifier != null)
		    params[JTA_Transaction.XAMODIFIER] = _theModifier;

		/*
		 * Use our extended version of enlistResource.
		 */

		xares = _recoveryConnection.getResource();

		if (!tx.enlistResource(xares, params))
		{
		    /*
		     * Failed to enlist, so mark transaction as rollback only.
		     */

		    try
		    {
			tx.setRollbackOnly();
		    }
		    catch (Exception e)
		    {
			ErrorStream.warning().println("ArjunaJDBC2Connection.registerDatabase - could not mark transaction rollback");
			
			throw new SQLException(e.toString());
		    }

		    throw new SQLException("ArjunaJDBC2Connection.registerDatabase - enlistResource failed");
		}

		params = null;
		xares = null;
		tx = null;
		tm = null;
	    }
	    catch (RollbackException e1)
	    {
		throw new SQLException("ArjunaJDBC2Connection.registerDatabase - "+e1);
	    }
	    catch (SystemException e2)
	    {
		throw new SQLException("ArjunaJDBC2Connection.registerDatabase - "+e2);
	    }
	    catch (SQLException e3)
	    {
		throw e3;
	    }
	    catch (Exception e4)
	    {
		if (DebugController.enabled())
		    e4.printStackTrace();

		throw new SQLException(e4.toString());
	    }
	}
    }

private final void checkTransaction () throws SQLException, Unavailable
    {
	if (DebugController.enabled())
	{
	    DebugController.controller().println(DebugLevel.FUNCTIONS, VisibilityLevel.VIS_PRIVATE,
						 FacilityCode.FAC_JDBC, "ArjunaJDBC2Connection.checkTransaction ()");
	}

	try
	{
	    TransactionManager tm = JTA_TransactionManager.transactionManager();
	    JTA_Transaction tx = (JTA_Transaction) tm.getTransaction();

	    if (tx == null)
		throw new Unavailable();

	    /*
	     * Now check that we are not already associated with a transaction.
	     */

	    if (!_recoveryConnection.validTransaction(tx))
		throw new SQLException("Connection is already associated with a different transaction! Obtain a new connection for this transaction.");
	}
	catch (Unavailable e1)
	{
	    throw e1;
	}
	catch (SQLException ex)
	{
	    throw ex;
	}
	catch (Exception e3)
	{
	    throw new SQLException("Could not get transaction information.");
	}
    }

private JTA_XAConnectionRecovery _recoveryConnection;
private JTA_XAModifier           _theModifier;
private Connection               _theConnection;

}

