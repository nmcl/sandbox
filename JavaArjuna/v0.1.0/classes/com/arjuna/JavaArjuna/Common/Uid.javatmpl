/*
 * Copyright (C) 1996, 1997, 1998, 1999,
 *
 * Department of Computing Science,
 * University of Newcastle upon Tyne,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: Uid.javatmpl,v 1.11.2.1 1999/02/17 15:19:53 nmcl Exp $
 */

package com.arjuna.JavaArjuna.Common;

import java.net.InetAddress;
import java.lang.Math;
import java.lang.Cloneable;
import java.io.PrintStream;

import java.io.IOException;
import java.net.UnknownHostException;
import java.lang.StringIndexOutOfBoundsException;
import java.lang.NumberFormatException;
import java.lang.CloneNotSupportedException;
import java.lang.OutOfMemoryError;

public class Uid implements Cloneable
{

public Uid ()
    {
	hostAddr = -1;
	process = 0;
	sec = 0;
	other = 0;
	_hashValue = -1;	
	_valid = true;
	
	try
	{
	    hostAddr = hostInetAddr();	/* calculated only once */

	    if (Uid.processId == 0)
		Uid.processId = Uid.getpid();
	    
	    process = Uid.processId;

	    if (Uid.initTime == 0)    
		Uid.initTime = (int) (System.currentTimeMillis()/1000);

	    sec = Uid.initTime;

	    if ((Uid.uidsCreated & 0xf0000000) > 0)
	    {
		Uid.uidsCreated = 0;
		Uid.initTime = (int) (System.currentTimeMillis()/1000);
	    }

	    other = Uid.uidsCreated++;
	    
	    generateHash(); 
	}
	catch (UnknownHostException e)
	{
	    System.err.println("Uid - cannot get local host.");
	    _valid = false;
	}
    }

public Uid (Uid copyFrom)
    {
	try
	{
	    copy(copyFrom);
	}
	catch (UidException e)
	{
	    _valid = false;
	}
    }

    /*
     * Create Uid from string representation. boolean arg says whether
     * to give up if an error is detected or to simply replace with NIL_UID
     */

public Uid (String uidString)
    {
	this(uidString, true);
    }
    
public Uid (String uidString, boolean errsOk)
    {
	char theBreakChar = Uid.getBreakChar(uidString);
	
	hostAddr = -1;
	process = 0;
	sec = 0;
	other = 0;
	_hashValue = -1;
	_valid = false;

	if (uidString.length() > 0)
	{
	    int startIndex = 0;
	    int endIndex = 0;
	    String s = null;

	    try
	    {
		while (uidString.charAt(endIndex) != theBreakChar)
		    endIndex++;

		s = uidString.substring(startIndex, endIndex);
		hostAddr = (int) Utility.hexStringToLong(s);
		
		startIndex = endIndex+1;
		endIndex++;
	
		while (uidString.charAt(endIndex) != theBreakChar)
		    endIndex++;

		s = uidString.substring(startIndex, endIndex);
		process = (int) Utility.hexStringToLong(s);
	    	
		startIndex = endIndex+1;
		endIndex++;
	
		while (uidString.charAt(endIndex) != theBreakChar)
		    endIndex++;

		s = uidString.substring(startIndex, endIndex);
		sec = (int) Utility.hexStringToLong(s);

		s = uidString.substring(endIndex+1, uidString.length());
		other = (int) Utility.hexStringToLong(s);

		_valid = true;
	    }
	    catch (NumberFormatException e)
	    {
		System.err.println("Uid general parsing error: "+uidString);
		_valid = false;
	    }
	    catch (StringIndexOutOfBoundsException e)
	    {
		_valid = false;		
	    }
	}
	else
	{
	    try
	    {
		this.copy(Uid.nullUid());
	    }
	    catch (UidException e)
	    {
	    }
	}

	if (!_valid)
	{
	    if (errsOk)
	    {
		try
		{
		    this.copy(Uid.nullUid());
		}
		catch (Exception e)
		{
		    System.err.println("Uid.Uid string constructor could not create nullUid for incorrect string: "+uidString);
		    System.exit(0);    
		}
	    }
	    else
	    {
		System.err.println("Uid.Uid string constructor incorrect: "+uidString);
		System.exit(0);
	    }
	}

	if (_valid)
	    generateHash();
    }

    /*
     * Override Object.hashCode.
     *
     * generateHash should have been called by now.
     */
    
public int hashCode ()
    {
	return _hashValue;
    }

    /*
     * Routines to pack and unpack Uids into Buffers (for RPC, storage etc)
     */

public synchronized void pack (OutputBuffer packInto) throws IOException
    {
	if (_valid)
	{
	    packInto.packInt(hostAddr);
	    packInto.packInt(process);
	    packInto.packInt(sec);
	    packInto.packInt(other);
	}
	else
	    throw new IOException("Invalid Uid object.");
    }

public synchronized void unpack (InputBuffer unpackFrom) throws IOException
    {
	_valid = true;  // should not be able to pack an invalid Uid.

	try
	{
	    hostAddr = unpackFrom.unpackInt();
	    process = unpackFrom.unpackInt();
	    sec = unpackFrom.unpackInt();
	    other = unpackFrom.unpackInt();

	    generateHash();
	}
	catch (IOException e)
	{
	    _valid = false;

	    throw e;
	}
    }

public void print (PrintStream strm)
    {
	strm.print("<Uid:"+this.toString()+">");
    }

public String stringForm ()
    {
	return new String(Utility.intToHexString(hostAddr)+Uid.breakChar+Utility.intToHexString(process)+Uid.breakChar+Utility.intToHexString(sec)+Uid.breakChar+Utility.intToHexString(other));
    }
    
public String toString ()
    {
	return stringForm();
    }

public Object clone () throws CloneNotSupportedException
    {
	return new Uid(this);
    }
    
public synchronized void copy (Uid toCopy) throws UidException
    {
	if (toCopy == this)
	    return;
	
	hostAddr = toCopy.hostAddr;
	process = toCopy.process;
	sec = toCopy.sec;
	other = toCopy.other;
	_hashValue = toCopy._hashValue;
	_valid = toCopy._valid;
    }
    
    /*
     * Uid comparisons
     */

    /*
     * Override Object.equals
     */
     
public boolean equals (Uid u)
    {
	if (u == this)
	    return true;
	
	return ((other == u.other) &&
		(sec == u.sec) &&
		(process == u.process) &&
		(hostAddr == u.hostAddr));
    }

public boolean notEquals (Uid u)
    {
	if (u == this)
	    return false;
	
	return ((other != u.other) ||
		(sec != u.sec) ||
		(process != u.process) ||
		(hostAddr != u.hostAddr));
    }

public boolean lessThan (Uid u)
    {
	if (u == this)
	    return false;
	
	if (hostAddr < u.hostAddr)
	    return true;
	else if (hostAddr == u.hostAddr)
	{
	    if (process < u.process)
		return true;
	    else if (process == u.process)
	    {
		if (sec < u.sec)
		    return true;
		else if ((sec == u.sec) && (other < u.other))
		    return true;
	    }
	}
	return false;
    }

public boolean greaterThan (Uid u)
    {
	if (u == this)
	    return false;
	
	if (hostAddr > u.hostAddr)
	    return true;
	else if (hostAddr == u.hostAddr)
	{
	    if (process > u.process)
		return true;
	    else if (process == u.process)
	    {
		if (sec > u.sec)
		    return true;
		else if ((sec == u.sec) && (other > u.other))
		    return true;
	    }
	}
	return false;
    }

public synchronized final boolean valid ()
    {
	return _valid;
    }

public static synchronized Uid nullUid ()
    {
	if (NIL_UID == null)
#ifndef WIN32
	    NIL_UID = new Uid("0:0:0:0");
#else
	    NIL_UID = new Uid("0_0_0_0");
#endif

	return NIL_UID;
    }
    
private final synchronized void generateHash ()
    {
	if (_valid)
	{
	    int g = 0;
	    String p = toString();
	    int len = p.length();
	    int index = 0;
    
	    if (len > 0)
	    {
		while (len-- > 0)
		{
		    _hashValue = (_hashValue << 4) + (int) (p.charAt(index));
		    g = _hashValue & 0xf0000000;
	    
		    if (g > 0)
		    {
			_hashValue = _hashValue ^ (g >> 24);
			_hashValue = _hashValue ^ g;
		    }
		    
		    index++;
		}
	    }

	    _hashValue = Math.abs(_hashValue);
	}
	else
	    System.err.println("Uid.generateHash called for invalid Uid. Will ignore.");
    }

private static synchronized int hostInetAddr () throws UnknownHostException
    {
	/*
	 * Calculate only once.
	 */

	if (myAddr == 0)
	{
	    Utility.loadProperties();

	    InetAddress addr = InetAddress.getLocalHost();
	    byte[] b = addr.getAddress();
	
	    for (int i = 0; i < b.length; i++)
	    {
		/*
		 * Convert signed byte into unsigned.
		 */
		
		int l = 0x7f & b[i];

		l += (0x80 & b[i]);
		    
		myAddr = (myAddr << 8) | l;
	    }
	}

	return myAddr;
    }
    
    /*
     * This had better be unique between processes on the same
     * machine. If not we're in trouble!
     */
    
private static int getpid ()
    {
	return Math.abs((new Object()).hashCode());
    }
    
private static char getBreakChar (String uidString)
    {
	if (uidString == null)
	    return Uid.breakChar;

	if (uidString.indexOf(fileBreakChar) != -1)
	    return Uid.fileBreakChar;
	else
	    return Uid.breakChar;
    }
    
private int hostAddr;      // use ints rather than longs for interoperability with C++ version
private int process;
private int sec;
private int other;
private int _hashValue;
private boolean _valid;
    
private static int uidsCreated = 0;
private static int processId = 0;
private static int initTime = 0;
private static boolean ticilDone = false;
    
private static char breakChar = ':';
private static char fileBreakChar = '_';
    
private static Uid NIL_UID = null;

private static int myAddr = 0;
    
}
