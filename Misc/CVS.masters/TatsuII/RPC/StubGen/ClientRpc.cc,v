head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	97.06.09.19.52.06;	author nmcl;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial cut
@
text
@/*
 * Copyright (C) 1993
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 *
 * $Id: ClientRpc.cc,v 1.4 1995/07/18 10:12:50 ngdp Exp $
 */

static const char RCSid[] = "$Id: ClientRpc.cc,v 1.4 1995/07/18 10:12:50 ngdp Exp $";

#ifndef BUFFER_H_
#  include <Common/Buffer.h>
#endif

#include <StubGen/ClientRpc.h>

ClientRpc::ClientRpc ( const char* sname ) : SimpleRpcClient(sname)
{
}

ClientRpc::~ClientRpc ()
{
}

RPC_Status ClientRpc::initiate ()
{
    return SimpleRpcClient::initiate();
}

RPC_Status ClientRpc::call ( Int32 opcode, Buffer& call, Int32& errcode,
			     Buffer& result )

{
    if (call.readState() == BUFFER_GOOD)
    {
	Buffer *sendBuffer[2], *recBuffer[2];
        Buffer opBuff, errBuff;
        int number = -1;
        RPC_Status res;

        opBuff.pack(opcode);

        sendBuffer[0] = &opBuff;
        sendBuffer[1] = &call;
        recBuffer[0] = &errBuff;
        recBuffer[1] = &result;

	res = SimpleRpcClient::call(sendBuffer, 2, recBuffer, number);
	
	if ((res == OPER_DONE) && (number == 2))
            errBuff.unpack(errcode);

        return res;     
    }
    else
	return OPER_NOTDONE;
}

RPC_Status ClientRpc::terminate ()
{
    return SimpleRpcClient::terminate();
}
@
