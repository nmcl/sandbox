/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ClientRpc.h>

#include "NewStudentRecordNumber_stub.h"

RemoteNewStudentRecordNumber::RemoteNewStudentRecordNumber ( const ClientRpcManager& manager, const RpcBuffer& phv ): RemoteLockManager(manager, RpcBuffer(phv,208647890)), _clientManager(manager), _myHashVal(phv)
{
_myHashVal << 208647890 << -1;
}

RemoteNewStudentRecordNumber::RemoteNewStudentRecordNumber ( SOutCome& res, int number, ClientRpcManager *_cRpcMan_ ): RemoteLockManager(*_cRpcMan_, RpcBuffer()), _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &res;
_callBuffer_ << number;

_rpcStatus_ = _clientManager.call(197604361, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteNewStudentRecordNumber::RemoteNewStudentRecordNumber ( SOutCome& res, const Uid& myUid, ClientRpcManager *_cRpcMan_ ): RemoteLockManager(*_cRpcMan_, RpcBuffer()), _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &res;
_callBuffer_ << &myUid;

_rpcStatus_ = _clientManager.call(69029060, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteNewStudentRecordNumber::~RemoteNewStudentRecordNumber ( )
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;


_rpcStatus_ = _clientManager.call(235758822, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteNewStudentRecordNumber::setNumber ( SOutCome& res, int number)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << number;

_rpcStatus_ = _clientManager.call(28897865, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteNewStudentRecordNumber::getNumber ( SOutCome& res, int& number)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << &number;

_rpcStatus_ = _clientManager.call(193966489, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
int* numberPtr = &number;
_replyBuffer_ >> numberPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteNewStudentRecordNumber::getThenIncreaseNumber ( SOutCome& res, int& number)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << &number;

_rpcStatus_ = _clientManager.call(125127561, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
int* numberPtr = &number;
_replyBuffer_ >> numberPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

Boolean RemoteNewStudentRecordNumber::hasRemoteState ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;

_rpcStatus_ = _clientManager.call(169145798, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteNewStudentRecordNumber::useStoreLocation ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;

_rpcStatus_ = _clientManager.call(26673606, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteNewStudentRecordNumber::save_state ( ObjectState& Par_0_, ObjectType Par_1_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;

_rpcStatus_ = _clientManager.call(142033461, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
ObjectState* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteNewStudentRecordNumber::restore_state ( ObjectState& Par_0_, ObjectType Par_1_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;

_rpcStatus_ = _clientManager.call(200938517, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
ObjectState* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

const TypeName RemoteNewStudentRecordNumber::type ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

TypeName _returnedValue_ = 0;

_rpcStatus_ = _clientManager.call(267827174, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}
