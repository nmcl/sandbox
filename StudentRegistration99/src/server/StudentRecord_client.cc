/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ClientRpc.h>

#include "StudentRecord_stub.h"

RemoteStudentRecord::RemoteStudentRecord ( const ClientRpcManager& manager, const RpcBuffer& phv ): RemoteLockManager(manager, RpcBuffer(phv,53496452)), _clientManager(manager), _myHashVal(phv)
{
_myHashVal << 53496452 << -1;
}

RemoteStudentRecord::RemoteStudentRecord ( enum SOutCome& res, ClientRpcManager *_cRpcMan_ ): RemoteLockManager(*_cRpcMan_, RpcBuffer()), _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &res;

_rpcStatus_ = _clientManager.call(257251797, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteStudentRecord::RemoteStudentRecord ( SOutCome& res, const Uid& myUid, ClientRpcManager *_cRpcMan_ ): RemoteLockManager(*_cRpcMan_, RpcBuffer()), _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &res;
_callBuffer_ << &myUid;

_rpcStatus_ = _clientManager.call(223600228, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteStudentRecord::~RemoteStudentRecord ( )
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;


_rpcStatus_ = _clientManager.call(195690166, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteStudentRecord::storeRecord ( SOutCome& res, Buffer toStore)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << toStore;

_rpcStatus_ = _clientManager.call(31187698, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteStudentRecord::fetchRecord ( SOutCome& res, Buffer& toRetrieve)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << &toRetrieve;

_rpcStatus_ = _clientManager.call(80055922, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
Buffer* toRetrievePtr = &toRetrieve;
_replyBuffer_ >> toRetrievePtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteStudentRecord::fetchExclusiveRecord ( SOutCome& res, Buffer& toRetrieve)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << &toRetrieve;

_rpcStatus_ = _clientManager.call(212180354, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
Buffer* toRetrievePtr = &toRetrieve;
_replyBuffer_ >> toRetrievePtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteStudentRecord::replaceRecord ( SOutCome& res, Buffer replaceWith)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;
_callBuffer_ << replaceWith;

_rpcStatus_ = _clientManager.call(33872498, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

void RemoteStudentRecord::resetRecord ( SOutCome& res)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_callBuffer_ << &res;

_rpcStatus_ = _clientManager.call(140900197, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
SOutCome* resPtr = &res;
_replyBuffer_ >> resPtr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

Boolean RemoteStudentRecord::hasRemoteState ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;

_rpcStatus_ = _clientManager.call(45858054, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteStudentRecord::useStoreLocation ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;

_rpcStatus_ = _clientManager.call(234554646, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteStudentRecord::save_state ( ObjectState& Par_0_, ObjectType Par_1_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;

_rpcStatus_ = _clientManager.call(120944197, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
ObjectState* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

Boolean RemoteStudentRecord::restore_state ( ObjectState& Par_0_, ObjectType Par_1_)
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

Boolean _returnedValue_;
_callBuffer_ << &Par_0_;
_callBuffer_ << Par_1_;

_rpcStatus_ = _clientManager.call(169823749, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
ObjectState* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}

const TypeName RemoteStudentRecord::type ( ) const 
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

TypeName _returnedValue_ = 0;

_rpcStatus_ = _clientManager.call(110749670, _callBuffer_, _serverStatus_, _replyBuffer_);
if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}
