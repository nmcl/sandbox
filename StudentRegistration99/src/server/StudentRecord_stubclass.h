/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 5.5.3 - $Date: 1996/09/10 15:38:44 $
 *
 * Do Not Edit By Hand
 *
 */

#ifdef STUB
#  pragma @NoRename
#endif

#ifndef STUB
#include <StubGen/RpcBuffer.h>
#include <StubGen/ClientRpcMan.h>


#ifndef STUDENTRECORD_SERVER
#undef StudentRecord
#define StudentRecord RemoteStudentRecord
#endif

class RemoteStudentRecord: public RemoteLockManager
{
public:
	RemoteStudentRecord ( enum SOutCome& , ClientRpcManager *_cRpcMan_ = ClientRpcManager::createInstance("RecordServer",1));
	RemoteStudentRecord ( SOutCome& , const Uid& , ClientRpcManager *_cRpcMan_ = ClientRpcManager::createInstance("RecordServer",1));
	~RemoteStudentRecord ( );
	void storeRecord ( SOutCome& , Buffer );
	void fetchRecord ( SOutCome& , Buffer& );
	void fetchExclusiveRecord ( SOutCome& , Buffer& );
	void replaceRecord ( SOutCome& , Buffer );
	void resetRecord ( SOutCome& );
	virtual Boolean hasRemoteState ( ) const ;
	virtual Boolean useStoreLocation ( ) const ;
	virtual Boolean save_state ( ObjectState& , ObjectType );
	virtual Boolean restore_state ( ObjectState& , ObjectType );
	virtual const TypeName type ( ) const ;
protected:
	RemoteStudentRecord(const ClientRpcManager&, const RpcBuffer&);
private:
	ClientRpcManager _clientManager;
	RpcBuffer _myHashVal;
}
;


#ifdef STUDENTRECORD_SERVER
#undef StudentRecord
#define StudentRecord LocalStudentRecord
#endif

class LocalStudentRecord;

class ServerStudentRecord: public ServerLockManager
{

public:
	ServerStudentRecord ();
	~ServerStudentRecord ();

	void serve (int, char **);
	Int32 dispatchToClass (LocalStudentRecord*, Int32, RpcBuffer&, RpcBuffer&);

private:
	Int32 dispatchToOper (LocalStudentRecord *,Int32, RpcBuffer&, RpcBuffer&);

	Int32 StudentRecord257251797(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 StudentRecord223600228(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 StudentRecord195690166(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 storeRecord31187698(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 fetchRecord80055922(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 fetchExclusiveRecord212180354(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 replaceRecord33872498(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 resetRecord140900197(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 hasRemoteState45858054(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 useStoreLocation234554646(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 save_state120944197(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 restore_state169823749(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);
	Int32 type110749670(LocalStudentRecord *, RpcBuffer&, RpcBuffer&);

	LocalStudentRecord *theRealObject;
	RpcBuffer _constructArgs_;
	Int32 _constructOpcode_;
	Int32 _constructRefCount_;
	RpcBuffer _constructResult_;
};
#endif


#ifdef STUB
#  define LocalStudentRecord StudentRecord
#endif

/* @Remote, @NoMarshall */ class LocalStudentRecord: public LocalLockManager
{
public:
	/* @NoMarshall */ LocalStudentRecord ( enum SOutCome& );
	/* @NoMarshall */ LocalStudentRecord ( SOutCome& , const Uid& );
	/* @NoMarshall */ ~LocalStudentRecord ( );
	/* @NoMarshall */ void storeRecord ( SOutCome& , Buffer );
	/* @NoMarshall */ void fetchRecord ( SOutCome& , Buffer& );
	/* @NoMarshall */ void fetchExclusiveRecord ( SOutCome& , Buffer& );
	/* @NoMarshall */ void replaceRecord ( SOutCome& , Buffer );
	/* @NoMarshall */ void resetRecord ( SOutCome& );
	/* @NoMarshall */ virtual Boolean hasRemoteState ( ) const ;
	/* @NoMarshall */ virtual Boolean useStoreLocation ( ) const ;
	/* @NoMarshall */ virtual Boolean save_state ( ObjectState& , ObjectType );
	/* @NoMarshall */ virtual Boolean restore_state ( ObjectState& , ObjectType );
	/* @NoMarshall */ virtual const TypeName type ( ) const ;
private:
	Buffer* studentInformation;
};

