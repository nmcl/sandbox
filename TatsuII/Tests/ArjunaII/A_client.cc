/*
 * Automatically Generated by:
 * Arjuna Stub Generator Version 6.0.0 - $Date: 1997/06/11 20:25:11 $
 *
 * Do Not Edit By Hand
 */

#ifdef STUB
#  pragma @NoRename
#endif

#include <StubGen/ClientRpc.h>

#include "BufferCheck_stub.h"

RemoteA::RemoteA ( const ClientRpcManager& manager, const RpcBuffer& phv ): _clientManager(manager), _myHashVal(phv)
{
_myHashVal << 65 << -1;
}

RemoteA::RemoteA ( int& Par_0_, ClientRpcManager *_cRpcMan_ ): _clientManager (*_cRpcMan_), _myHashVal(-1)
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

_cRpcMan_->destroy();

_callBuffer_ << &Par_0_;

_rpcStatus_ = _clientManager.call(173227561, _callBuffer_, _serverStatus_, _replyBuffer_);

if (_rpcStatus_ == OPER_DONE)
{
int* Par_0_Ptr = &Par_0_;
_replyBuffer_ >> Par_0_Ptr;
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

RemoteA::~RemoteA ( )
{
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;


_rpcStatus_ = _clientManager.call(195383430, _callBuffer_, _serverStatus_, _replyBuffer_);

if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

}

int RemoteA::bar ( )
{
RpcBuffer _rvBuffer_;
RpcBuffer _callBuffer_(_myHashVal);
RpcBuffer _replyBuffer_;
RPC_Status _rpcStatus_ = OPER_UNKNOWN;
Int32 _serverStatus_ = OPER_INVOKED_OK;

int _returnedValue_ = -1;

_rpcStatus_ = _clientManager.call(142947158, _callBuffer_, _serverStatus_, _replyBuffer_);

if (_rpcStatus_ == OPER_DONE)
{
switch(_serverStatus_)
{
case OPER_INVOKED_OK:
_replyBuffer_ >> _rvBuffer_;
_rvBuffer_ >> _returnedValue_;
break;
default:
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);
}
}
else
_clientManager.rpcAbort(_rpcStatus_, _serverStatus_);

return (_returnedValue_);
}
