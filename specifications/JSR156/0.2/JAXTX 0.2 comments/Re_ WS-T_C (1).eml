Received: from cheviot1.ncl.ac.uk (cheviot1.ncl.ac.uk [128.240.233.15])
	by ingram.ncl.ac.uk (8.8.8+Sun/8.8.8) with ESMTP id LAA20451
	for <nmcl@ingram.ncl.ac.uk>; Fri, 8 Nov 2002 11:01:37 GMT
Received: from d06lmsgate-4.uk.ibm.COM (d06lmsgate-4.uk.ibm.com [195.212.29.4])
	by cheviot1.ncl.ac.uk (8.10.1/8.10.1) with ESMTP id gA8B4p728822;
	Fri, 8 Nov 2002 11:04:51 GMT
Received: from d06relay02.portsmouth.uk.ibm.com (d06relay02.portsmouth.uk.ibm.com [9.166.84.148])
	by d06lmsgate-4.uk.ibm.COM (1.0.0) with ESMTP id KAA105474;
	Fri, 8 Nov 2002 10:45:41 GMT
Received: from d06ml007.portsmouth.uk.ibm.com (d06ml007_cs0 [9.180.35.36])
	by d06relay02.portsmouth.uk.ibm.com (8.12.3/NCO/VER6.4) with ESMTP id gA8B4bKA113772;
	Fri, 8 Nov 2002 11:04:38 GMT
Subject: Re: WS-T/C
To: "Mark Little" <m.c.little@ncl.ac.uk>
Cc: mark@arjuna.com, "Tom Freund" <TJFREUND@uk.ibm.com>
X-Mailer: Lotus Notes Release 5.0.7  March 21, 2001
Message-ID: <OF07010FD3.5FB2E5C7-ON80256C6A.007715E2@portsmouth.uk.ibm.com>
From: "Ian Robinson" <ian_robinson@uk.ibm.com>
Date: Fri, 8 Nov 2002 11:03:41 +0000
X-MIMETrack: Serialize by Router on d06ml007/06/M/IBM(Release 5.0.9a |January 7, 2002) at
 08/11/2002 11:04:38
MIME-Version: 1.0
Content-type: text/plain; charset=us-ascii
X-Newcastle-MailScanner: Found to be clean (of known viruses)
Content-Length: 6029


Hi Mark.
I thought about this a bit more.I think there are a number of separate
things here.
1) The client API. Here, I'm sure we're in agreement. JSR156 provides one
and WS-C/WS-Tx does not, so javax.jaxtx.UserXMLTransaction or whataver for
begin/complete is good.

2) The SPI. WS-C/WS-Tx provides WSDL from which the SPI interfaces can be
generated in any language (cf IDL). Java bindings, for example, can be
generated by Axis wsdl2java. Now, we could document the Java bindings for
the WS-C/WS-Tx WSDL. Documenting these would be of about as much value at
the JTS specification's documentation of the java bindings for OTS IDL
(i.e. none). Beyond that I think we need to consider WS-C, WS-Tx/AT and
WS-Tx/BA separately.

2a) WS-Tx/AT. The J2EE view on WS-Tx/AT should be that it defines an XML
protocol for 2PC *between* execution domains. Within a J2EE domain,
participants in 2PC are defined by the JTA specification (as
Synchronizations and XAResources). So I think there is no more need to
document model SPIs for WS-Tx than there is to document the model JAXTX JTA
SPIs (which I commented on previously).

2b) WS-Tx/BA is a little more interesting and I think as this could benefit
from model SPIs for BusinessAgreementParticipant and
BusinessAgreementCoordinator since there is nothing in J2EE today that
equates to these. The SPI should deal with the in-JVM representation of
these components, again following the JTA and JSR95 models. Inter-process
messages and interfaces are separate and are derived from the WSDL and XSD.

3) WS-C. This overlaps with the JAXTXP (optional XML protocol) in the JSR
but provides a different style of generic coordination. JAXTXP is more like
the Activity service - for example, defining a generic Participant with a
generic process_message operation. WS-C doesn't define Participants at all
and leaves that to the specific protocol-providers. We could define a model
SPI for the WS-C Activiation and Registration services to allow providers
of WS-C CoordinationTypes to register java.lang.Object Coordinators and
Particpants (locally within the JVM). This would not, however, exploit any
of JAXTPX and would be awkward to position within the JSR. I'm not saying
we shouldn't do it, I'm just wondering whether we want to.

3a) One way to demonstrate interlock between JSR156, WS-C and the Activity
service would be to propose a WS-C CoordinationType of WS-Activity which
conformed entirely to the WS-C specification; it would have a WS-C
CoordinationContext schema with the optional element containing a schema
derived from the CosActivity ActivityContext (i.e to support nested
ActivityIdentities, relationships with transactions and PopertyGroups). The
WS-Activity would require an ActivityParticipant and ActivityCoordinator
whose wsdl definition would be that of the JAXTXP Participant and
Participant.

Regards....Ian

Ian Robinson,
Senior Technical Staff Member,
WebSphere Transactions Architecture & Development,
IBM Hursley Lab, UK
Tel +44-(0)1962-818626    Tie: 724-8626
ian_robinson@uk.ibm.com



|---------+---------------------------->
|         |           "Mark Little"    |
|         |           <m.c.little@ncl.a|
|         |           c.uk>            |
|         |                            |
|         |           02/11/2002 17:53 |
|         |                            |
|---------+---------------------------->
  >----------------------------------------------------------------------------------------------------------------|
  |                                                                                                                |
  |       To:       Ian Robinson/UK/IBM@IBMGB                                                                      |
  |       cc:       Tom Freund/UK/IBM@IBMGB, <mark@arjuna.com>                                                     |
  |       Subject:  Re: WS-T/C                                                                                     |
  |                                                                                                                |
  |                                                                                                                |
  >----------------------------------------------------------------------------------------------------------------|



> Mark - WS-Tx is, for the most part, consumed by middleware and need not
be
> visible to application-level components. If a J2EE application component
> wishes to manage its transaction demarcation (rather than defer to the
> container) and is developed independently of the underlying transaction
> protocol, that it should use the JSR 156 client API for the demarcation
and
> a WS-Tx coordination service should be pluggable beneath this. The Java
> SPIs for the Coordinator/Participant services described in WS-Tx/Acid
will
> be generated from the WSDL definitions and I don't think any model jaxtx
> packages need to be defined for these, although you may have scenarios
that
> you can describe to show how this might be useful.  Is this along the
lines
> you are thinking?

Not quite. Users and application developers need a standardised API at both
the client and server/container side. Now, the on-the-wire XML format
obviously already is standardised in the specifications, but, as with BTP,
they don't say anything about a higher-level programming interface (and
they
shouldn't since they could be used in COBOL, rather than Java). In JSR 156
we can define both sides of the programmer interfaces as we've done for
BTP.
They are obviously optional, but the value of having standardised
interfaces
is obvious.

The optional XML protocol that JSR 156 also provides was based on WSCF, so
in principle at least, it should be possible to layer WS-C/WS-Tx on it too.
Now, I'm not saying that everyone would want to do that, but it seems
logical to try to have a protocol that is close to WS-C: why have two
generic coordination protocols when one should suffice.

Hope this makes some sense.

Mark.






