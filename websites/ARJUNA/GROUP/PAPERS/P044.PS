%!PS-Adobe-3.0
%%Title: (IWOOOS95)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (11:34 am Monday, April 10, 1995)
%%For: (Graham Parrington)
%%Pages: 20
%%DocumentFonts: Times-Roman Symbol Times-Bold Times-Italic Times-BoldItalic Palatino-BoldItalic Palatino-Roman
%%DocumentNeededFonts: Times-Roman Symbol Times-Bold Times-Italic Times-BoldItalic Palatino-BoldItalic Palatino-Roman
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 207 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Graham Parrington)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Italic
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Palatino-BoldItalic
%%IncludeFont: Palatino-Roman
/f0_1/Times-Roman :mre
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f1_1/Symbol :bsr
240/apple pd
:esr /f1_12 f1_1 12 scf
/f2_1/Times-Bold :mre
/f2_14 f2_1 14 scf
/f2_12 f2_1 12 scf
/f3_1 f1_1 def
/f3_12 f3_1 12 scf
/f4_1/Times-Italic :mre
/f4_12 f4_1 12 scf
/f5_1 f1_1 :mi
/f5_12 f5_1 12 scf
/f6_1/Times-BoldItalic :mre
/f6_14 f6_1 14 scf
/f6_12 f6_1 12 scf
/f7_1 f0_1 :v def
/f8_1/Palatino-BoldItalic :mre
/f8_10 f8_1 10 scf
/f9_1/Palatino-Roman :mre
/f9_10 f9_1 10 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Graham Parrington; page: 1 of 20)setjob
%%EndPageSetup
gS 0 0 552 730 rC
274 31 :M
f0_12 sf
(1)S
87 71 :M
f2_14 sf
3.177 .318(Architectural Support for Mobile Objects in Large Scale)J
210 86 :M
4.24 .424(Distributed Systems)J
188 110 :M
f0_12 sf
.358 .036(S. J. Caughey and S. K. Shrivastava)J
205 123 :M
f0_10 sf
.062 .006(Department of Computing Science,)J
226 135 :M
-.029(University of Newcastle,)A
197 147 :M
.179 .018(Newcastle upon Tyne,  NE1 7RU, UK.)J
202 171 :M
-.038(e-mail: s.j.caughey@newcastle.ac.uk)A
217 195 :M
-.034(Tel:)A
253 195 :M
.427 .043(+44  191  222 7873)J
219 219 :M
.075(Fax:)A
255 219 :M
.421 .042(+44  191 222 8232)J
60 265 :M
f2_14 sf
.56(Abstract)A
96 290 :M
f0_12 sf
-.006(The paper discusses the relevant features of an object support system that provides)A
60 305 :M
-.02(basic facilities for building flexible distributed applications in environments where objects)A
60 320 :M
-.005(can be mobile and occasional failures \(node crashes, real or virtual network partitions\) are)A
60 335 :M
.648 .065(possible. These facilities are for naming, locating and invoking objects, persistence and)J
60 350 :M
.837 .084(garbage collection. One of the key features is an efficient and reliable object reference)J
60 365 :M
.869 .087(scheme that is particularly good for dealing with mobile objects. The design presented)J
60 380 :M
.89 .089(scales to systems of arbitrary size and is portable since it only requires a few standard)J
60 395 :M
-.107(capabilities from the underlying operating system.)A
60 432 :M
.044(Keywords:)A
132 432 :M
-.077(distribution, mobility, persistence, garbage-collection, fault-tolerance,)A
60 444 :M
(naming.)S
60 479 :M
f8_10 sf
.403 .04(Note: Full Paper for IWOOOS95)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Graham Parrington; page: 2 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(2)S
90 122 :M
f2_14 sf
4.495 .45(1. Introduction)J
126 147 :M
f0_12 sf
-.075( Large-scale distributed computing systems \(LSDCS\) comprising several thousands)A
90 162 :M
.734 .073(to millions of individual computer systems \(nodes\) are coming into existence both as a)J
90 177 :M
.32 .032(consequence of technological advances and the demands placed by applications. LSDCS)J
90 192 :M
-.111(exhibit great diversity of node and communications capabilities. Nodes range from \(mobile\))A
90 207 :M
.338 .034(laptop computers, workstations to supercomputers. Whereas mobile computers may well)J
90 222 :M
-.072(have unreliable, low bandwidth communications to the rest of the system, other parts of the)A
90 237 :M
-.082(system may well possess high bandwidth communications capability.)A
126 262 :M
2.463 .246(By their very nature, communication network in LSDCS will not be fully)J
90 277 :M
1.894 .189(connected, but will be rather sparse. Given that the computing and communication)J
90 292 :M
.723 .072(resources may be shared by a large number of processes and messages, the load on the)J
90 307 :M
-.104(system will be highly variable and unpredictable. Further, the communications environment)A
90 322 :M
-.045(will be subject to \(real or virtual\) partitions caused by events such as physical breakdowns,)A
90 337 :M
.633 .063(radio interference/blackouts and network congestion. In general therefore, it will not be)J
90 352 :M
1.508 .151(possible to place bounds on communication delays and relative speeds of processes.)J
90 367 :M
.281 .028(Provision of fault tolerance in such an environment is fraught with difficulties. The main)J
90 382 :M
.052 .005(difficulty stems from the inability of a process to distinguish slow processes from crashed)J
90 397 :M
-.07(ones, so accurate failure detection is not possible.)A
126 422 :M
1.338 .134( LSDCS should support mobility of users, services and objects. Users tend to)J
90 437 :M
-.079(move around, visiting meetings and conferences and they should have the same view of the)A
90 452 :M
.894 .089(system wherever they are. Services and objects can move from one set of machines to)J
90 467 :M
.864 .086(another forced by crashes, power failures or scheduled maintenance, or they can move)J
90 482 :M
.256 .026(because of changes in system topology, reconfiguration of the system and a host of other)J
90 497 :M
.146(reasons.)A
126 522 :M
.439 .044( We therefore examine how to facilitate the sharing of objects in an environment)J
90 537 :M
-.002(where objects are capable of being moved about the system. At the applications level, it is)A
90 552 :M
-.094(assumed that clients are free to create, copy and exchange references to objects, and a client)A
90 567 :M
-.042(holding a reference should be able to invoke operations on that object with ease even if the)A
90 582 :M
.11 .011(object has moved to some other location. How can this requirement be met when existing)J
90 597 :M
-.065(operating systems do not even support the notions of objects and references? The answer is)A
90 612 :M
.07 .007(to provide the necessary architectural support by constructing an )J
f4_12 sf
.084 .008(object support layer)J
f0_12 sf
.052 .005( that)J
90 627 :M
1.41 .141(can run on top of any given operating system. For this reason, such a layer must be)J
90 642 :M
f4_12 sf
.07(portable)A
f0_12 sf
.25 .025(. We argue that the layer should provide basic facilities for naming, locating and)J
90 657 :M
-.045(invoking objects, persistence, migration and garbage collection for objects. These facilities)A
90 672 :M
.184 .018(should be )J
f4_12 sf
.051(fault-tolerant)A
f0_12 sf
.2 .02( in that they should work well despite occasional failures, such as)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Graham Parrington; page: 3 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(3)S
90 99 :M
.748 .075(node crashes and real or virtual network partitions. Further, the solutions adopted must)J
90 114 :M
f4_12 sf
-.09(scale)A
f0_12 sf
-.085( to systems of arbitrary size.)A
126 139 :M
.739 .074(In this paper we present the main elements of the architecture of such an object)J
90 154 :M
1.423 .142(support layer, )J
f4_12 sf
.44(Shadows)A
f0_12 sf
1.547 .155(, that we have designed and implemented. Shadows supports)J
90 169 :M
1.514 .151(context relative naming and an efficient and reliable object reference scheme that is)J
90 184 :M
.008 .001(particularly good for dealing with mobile objects \(including object managers\). Our design)J
90 199 :M
-.083(philosophy has been to provide only the essential facilities, leaving it to higher levels to use)A
90 214 :M
-.126(these facilities for meeting application specific requirements. A distinguishing feature of our)A
90 229 :M
.344 .034(design is the manner in which we maintain garbage collection of objects to be both  )J
f4_12 sf
.134(safe)A
90 244 :M
f0_12 sf
.201 .02(and )J
f4_12 sf
.236 .024(lively )J
f0_12 sf
.276 .028(: objects with references are not garbage collected \(safety\) and objects without)J
90 259 :M
-.1(any reference are eventually garbage collected \(liveness\). Shadows incorporates )A
f4_12 sf
-.111(lightweight)A
90 274 :M
f0_12 sf
1.231 .123(fault tolerance mechanisms for achieving the above safety and liveness requirements.)J
90 289 :M
.856 .086(Shadows is portable since it only requires a few basic capabilities from the underlying)J
90 304 :M
-.03(operating system. In particular, it only requires a means of creating processes on particular)A
90 319 :M
-.076(nodes in the system and some form of interprocess communications channel, both of which)A
90 334 :M
-.132(are either available or can be easily implemented in modern operating systems.)A
126 359 :M
.052 .005(The basic architecture of our system is presented in section two. In this section we)J
90 374 :M
1.696 .17(assume a failure-free environment \(nodes do not crash and communication between)J
90 389 :M
.913 .091(functioning entities is always possible\). Then in section three and four, we discuss the)J
90 404 :M
-.079(necessary enhancements for coping with failures. Some implementation details of Shadows)A
90 419 :M
-.089(are presented in section five; section six compares our work with other work reported in the)A
90 434 :M
-.13(literature.)A
90 469 :M
f2_14 sf
4.113 .411(2. Basic Architecture)J
126 494 :M
f0_12 sf
.827 .083(Our architecture is based on the now well known Client/Server model in which)J
90 509 :M
.834 .083(remote access to objects is provided by server processes executing on the remote node)J
90 524 :M
-.077(performing the required operations on behalf of the client. The communication between the)A
90 539 :M
.276 .028(client and any server takes the form of Remote Procedure Calls \(RPCs\) - an equally well)J
90 554 :M
.497 .05(understood extension of a familiar programming paradigm to a distributed environment.)J
90 569 :M
.462 .046(Objects in our model are fully encapsulated entities which accept messages specifying a)J
90 584 :M
-.115(particular method to be invoked and a set of parameters to be applied; they return a message)A
90 599 :M
-.051(specifying the results of the invocation. We now describe how object mobility is supported)A
90 614 :M
-.112(in a failure-free environment.)A
90 649 :M
f6_14 sf
4.814 .481(Object Mobility and Persistence)J
126 674 :M
f0_12 sf
.101 .01( Object mobility is a fundamental feature of our architecture where )J
f4_12 sf
.168 .017(mobile objects)J
90 689 :M
f0_12 sf
-.067(are those which have the capacity to marshall and unmarshall their state for the purposes of)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Graham Parrington; page: 4 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(4)S
90 99 :M
.168 .017(transmitting and receiving that state over the network. For the remainder of this paper we)J
90 114 :M
.089 .009(shall assume that all objects are mobile objects. We assume a heterogeneous environment)J
90 129 :M
1.141 .114(so it is most appropriate to consider migration of )J
f4_12 sf
2.07 .207(quiescent objects)J
f0_12 sf
.733 .073(  \(an object is in a)J
90 144 :M
-.077(quiescent state if no calls to its methods are in progress\).)A
126 169 :M
-.057(In our architecture an object at any time is managed by an )A
f4_12 sf
-.064(object manager)A
f0_12 sf
-.059( \(a server)A
90 184 :M
.619 .062(process with its own address space\); each object manager manages a number of objects)J
90 199 :M
2.41 .241(inside a single address space. Each object manager listens at a particular port \(a)J
90 214 :M
-.041(communication endpoint\) to which messages for its objects are directed. When we migrate)A
90 229 :M
-.103(objects, it is to and between object managers that the objects move.)A
126 254 :M
.583 .058(All objects are created locally within a client from where they may be migrated.)J
90 269 :M
.106 .011(Once migrated, an object leaves behind a )J
f4_12 sf
.031(Reference)A
f0_12 sf
.091 .009( which is a handle via which the, now)J
90 284 :M
-.06(remote, object may be accessed through the use of RPC. The process of migration involves)A
90 299 :M
-.005(the migrating object creating a copy of itself at the destination, creating a Reference to the)A
90 314 :M
2.279 .228(destination copy and then replacing itself with that Reference. In our system this)J
90 329 :M
.361 .036('replacement' occurs, and migration is completed by, the flipping of a Boolean switch. A)J
90 344 :M
.704 .07(failure during migration prior to this point may result in the destination copy being left)J
90 359 :M
-.084(unreferenced \(so, it will eventually be garbage collected, see below\).)A
126 384 :M
2.213 .221(References may be created, copied and/or sent to other clients. Whilst any)J
90 399 :M
.934 .093(Reference to an object remains, the object )J
f4_12 sf
.236(persists)A
f0_12 sf
.931 .093(, but once all References have been)J
90 414 :M
-.176(deleted the object becomes available for garbage collection)A
126 439 :M
.728 .073(Our References make use of SSP \(stub-scion pair\) chains [Shapiro92]. The SSP)J
90 454 :M
.041 .004(chain design uses forward references which may be 'chained' together and along which an)J
90 469 :M
-.094(invocation may be passed until it reaches the target object, and the result returned. Hints are)A
90 484 :M
-.002(maintained which allow long chains to be short-cut at invocation time. These mechanisms)A
90 499 :M
-.051(ensure that by binding a new Reference to some )A
f4_12 sf
-.049(local)A
f0_12 sf
-.05( link in a chain of References leading)A
90 514 :M
-.081(to the target object, the target object is guaranteed to persist while the Reference exists \(this)A
90 529 :M
.2 .02(avoids costly RPCs to the target object when new References are created and deleted\). In)J
90 544 :M
.216 .022(the example \(see fig. 1\(i\)\), client )J
f4_12 sf
.073(c1)A
f0_12 sf
.19 .019( has a Reference, )J
f4_12 sf
.078(a)A
f0_12 sf
.156 .016(, to object )J
f4_12 sf
.078(o1)A
f0_12 sf
.188 .019( and wishes to send a)J
90 559 :M
-.03(copy of the Reference to client )A
f4_12 sf
-.036(c2)A
f0_12 sf
-.03(. To do so )A
f4_12 sf
-.036(c1)A
f0_12 sf
-.031( creates a new Reference, )A
f4_12 sf
(b)S
f0_12 sf
-.034(, which is bound)A
90 574 :M
-.045(by setting it to point to )A
f4_12 sf
-.063(a)A
f0_12 sf
-.052( and informing )A
f4_12 sf
-.063(a)A
f0_12 sf
-.047( that it is now referenced; )A
f4_12 sf
-.063(b)A
f0_12 sf
-.044( is then sent to )A
f4_12 sf
-.059(c2)A
f0_12 sf
-.049( \(fig.)A
90 589 :M
.98 .098(1\(ii\)\). Whilst )J
f4_12 sf
.313(b)A
f0_12 sf
.654 .065( exists, )J
f4_12 sf
.313(a)A
f0_12 sf
.805 .08( is guaranteed to exist, and whilst )J
f4_12 sf
.313(a)A
f0_12 sf
.654 .065( exists, )J
f4_12 sf
.313(o1)A
f0_12 sf
.897 .09( is guaranteed to)J
90 604 :M
1.968 .197(exist. We rely on the SSP mechanisms to provide efficient reference counting and)J
90 619 :M
-.076(distributed garbage collection, the basic principles of which are discussed in [Shapiro92].)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Graham Parrington; page: 5 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(5)S
95 92 414 124 rC
40 46 132.5 122.5 @f
135 135 -2 2 173 169 2 135 133 @a
213.5 128.5 18 @e
28 29 437.5 112 @f
.5 G
166 169 19 19 rF
0 G
166.5 169.5 18 18 rS
462 116 :M
(=address          )S
462 128 :M
-.161(space)A
445 151 :M
-.139(= Reference)A
460 184 :M
-.155(= object)A
100 129 :M
-.326(c1)A
235 131 :M
-.326(c2)A
150 178 :M
(o1)S
1 G
427 142 22 21 rC
428 143 11 12 rF
0 G
428.5 143.5 10 11 rS
gS
1.1 1.05 scale
390.885 146.677 :M
(R)S
gR
gR
1 G
gS 128 123 20 20 rC
129 124 10 11 rF
0 G
129.5 124.5 9 10 rS
130 134 :M
f0_12 sf
(R)S
gR
gS 128 105 20 20 rC
129 106 10 11 rF
0 G
129.5 106.5 9 10 rS
130 116 :M
f0_12 sf
(R)S
gR
.5 G
gS 95 92 414 124 rC
430 171 19 19 rF
0 G
430.5 171.5 18 18 rS
120 132 :M
f0_12 sf
(a)S
119 116 :M
(b)S
-2 -2 135 125 2 2 133 116 @b
40 46 292.5 124.5 @f
296 137 -2 2 334 171 2 296 135 @a
374.5 129.5 18 @e
.5 G
326 171 19 19 rF
0 G
326.5 171.5 18 18 rS
260 131 :M
-.326(c1)A
397 134 :M
-.326(c2)A
310 180 :M
(o1)S
1 G
288 125 20 20 rC
289 126 10 11 rF
0 G
289.5 126.5 9 10 rS
290 136 :M
(R)S
gR
1 G
gS 368 124 20 20 rC
369 125 10 11 rF
0 G
369.5 125.5 9 10 rS
370 135 :M
f0_12 sf
(R)S
gR
gS 95 92 414 124 rC
280 134 :M
0 G
f0_12 sf
(a)S
381 134 :M
(b)S
298 133 -2 2 370 131 2 298 131 @a
129 119 -1 1 136 123 1 129 118 @a
-1 -1 134 123 1 1 140 118 @b
-1 -1 156 154 1 1 156 147 @b
149 154 -1 1 156 153 1 149 153 @a
-1 -1 316 155 1 1 316 148 @b
309 155 -1 1 316 154 1 309 154 @a
332 133 -1 1 340 137 1 332 132 @a
-1 -1 333 132 1 1 338 126 @b
177 211 :M
-.16(\(i\))A
331 212 :M
-.218(\(ii\))A
gR
gS 30 31 552 730 rC
252 231 :M
0 G
f2_12 sf
3.192 .319(Fig. 1: SSP chains)J
126 256 :M
f0_12 sf
.481 .048(References maintain the )J
f4_12 sf
.107(location)A
f0_12 sf
.296 .03( of the next link in the chain and in our design a)J
90 271 :M
.325 .033(location consists of the identity of the relevant object manager \(in the form of the port at)J
90 286 :M
.675 .067(which the manager is listening\) and the name by which the object is known within that)J
90 301 :M
1.284 .128(object manager. Maintaining the location of the next link in the chain guarantees the)J
90 316 :M
.68 .068(persistence properties but References also maintain a 'hint')J
f6_12 sf
.086 .009( )J
f0_12 sf
.636 .064(\(the assumed location of the)J
90 331 :M
.234 .023(target object\) to bypass the chain for efficiency, e.g. in the example above Reference )J
f4_12 sf
.078(b)A
f0_12 sf
.119 .012( is)J
90 346 :M
1.153 .115(created with the real location of )J
f4_12 sf
.419(o1)A
f0_12 sf
1.011 .101( \(taken from )J
f4_12 sf
.419(a)A
f0_12 sf
.738 .074(\) as a hint so that )J
f4_12 sf
.395(c2)A
f0_12 sf
1.002 .1( may access )J
f4_12 sf
.838(o1)A
90 361 :M
f0_12 sf
-.101(directly. This hint remains valid until )A
f4_12 sf
-.134(o1)A
f0_12 sf
-.111( migrates. When an object migrates it leaves behind)A
90 376 :M
-.135(a Reference containing the new location. Messages for the migrated object are automatically)A
90 391 :M
.713 .071(forwarded, via the Reference, to the new location and that location is returned with the)J
90 406 :M
.965 .097(reply allowing hints to be updated. Lazy short-cutting of chains is carried out on each)J
90 421 :M
1.019 .102(invocation along a chain.  For example an invocation by )J
f4_12 sf
.33(c2)A
f0_12 sf
.437 .044( on )J
f4_12 sf
.35(o1)A
f0_12 sf
.481 .048( via )J
f4_12 sf
.35(b)A
f0_12 sf
.871 .087(, results in the)J
90 436 :M
1.291 .129(creation of a new Reference directly connecting )J
f4_12 sf
.371(c2)A
f0_12 sf
.418 .042( to )J
f4_12 sf
.393(o1)A
f0_12 sf
1.008 .101( and the old Reference, )J
f4_12 sf
.393(b)A
f0_12 sf
.705 .07(, is)J
90 451 :M
1.253 .125(removed \(this will cause Reference )J
f4_12 sf
.371(a)A
f0_12 sf
1.093 .109( to be garbage collected, providing )J
f4_12 sf
.371(b)A
f0_12 sf
.8 .08( is the only)J
90 466 :M
-.122(reference to )A
f4_12 sf
-.159(a)A
f0_12 sf
-.186(\).)A
90 501 :M
f6_14 sf
4.422 .442(Object Manager Mobility and Persistence)J
126 526 :M
f0_12 sf
.808 .081( So far we have described the mechanisms to make objects mobile and garbage)J
90 541 :M
-.045(collectable. We now describe some simple enhancements which enable object managers to)A
90 556 :M
.658 .066(be made mobile and garbage collectable \(a useful feature that can be exploited for load)J
90 571 :M
-.043(balancing, planned removal of nodes, disconnected operation, etc.\).)A
126 596 :M
-.069(In our architecture, object managers are also treated as mobile objects. These object)A
90 611 :M
.173 .017(managers have two states, 'active' and 'passive')J
f2_12 sf
.042 .004(. )J
f0_12 sf
.149 .015(When first created they are in the passive)J
90 626 :M
.294 .029(state and in this state they offer the standard functionality of any mobile object, i.e., they)J
90 641 :M
-.136(may be migrated and are garbage collectable. They may be moved into the active state by an)A
90 656 :M
-.095(explicit 'activate' operation which causes 1\) an object manager server to be executed \(on the)A
90 671 :M
.909 .091(same node as the object manager object\) and 2\) the object to be replaced by an object)J
90 686 :M
.657 .066(Reference. This is illustrated in fig. 2 where object manager object )J
f4_12 sf
.219(o1)A
f0_12 sf
.622 .062( is 'activated' and)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Graham Parrington; page: 6 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(6)S
90 99 :M
.684 .068(henceforth operations on )J
f4_12 sf
.185(o1)A
f0_12 sf
.588 .059( are forwarded transparently via the Reference to the object)J
90 114 :M
-.113(manager server which offers precisely the same interface as a mobile object.)A
145 137 322 69 rC
37 36 366 168.5 @f
392 170 :M
-.202(object manager)A
.5 G
179 159 19 19 rF
0 G
179.5 159.5 18 18 rS
304 171 -2 2 347 169 2 304 169 @a
1 G
293 163 20 20 rC
294 164 10 11 rF
0 G
294.5 164.5 9 10 rS
295 174 :M
(R)S
gR
gS 145 137 322 69 rC
182 158 :M
f0_12 sf
(o1)S
291 157 :M
(o1)S
157 201 :M
-.185(before activation)A
335 202 :M
-.219(after activation)A
323 164 -1 1 329 168 1 323 163 @a
-1 -1 324 178 1 1 328 170 @b
gR
gS 30 31 552 730 rC
203 228 :M
f2_12 sf
1.921 .192(Fig. 2:)J
f0_12 sf
.273 .027( )J
f2_12 sf
2.66 .266(Activating an object manager)J
126 253 :M
f0_12 sf
.807 .081(Migrating an object manager in its passive state is treated exactly as previously)J
90 268 :M
.582 .058(described, but, as mobile objects are migrated to object managers, what does it mean to)J
90 283 :M
.066 .007(migrate an object manager in its active state to another object manager? This is illustrated)J
90 298 :M
.244 .024(with the help of fig. 3 where an active object manager, )J
f4_12 sf
.092(o1)A
f0_12 sf
.284 .028(, is migrated to object manager)J
90 313 :M
f4_12 sf
(o2)S
f0_12 sf
.043 .004(. The migration causes the entire state of )J
f4_12 sf
(o1)S
f0_12 sf
.044 .004( \(including all the objects it is managing\) to)J
90 328 :M
-.035(be marshalled and sent to )A
f4_12 sf
-.044(o2)A
f0_12 sf
-.036(. On unmarshalling, the object manager is recognised as being)A
90 343 :M
.642 .064(active and so a new object manager server is executed and)J
f2_12 sf
.098 .01( )J
f0_12 sf
.668 .067(given )J
f4_12 sf
.216(o1)A
f0_12 sf
.546 .055('s state. The state is)J
90 358 :M
1.106 .111(unmarshalled within the new server. Following migration the state within the original)J
90 373 :M
-.058(object manager is discarded and replaced by a Reference. Now any operations on )A
f4_12 sf
-.07(o1)A
f0_12 sf
-.062( \(or on)A
90 388 :M
.224 .022(any object managed by )J
f4_12 sf
.073(o1)A
f0_12 sf
.185 .019(\) are forwarded to a Reference held by o2 and from there to )J
f4_12 sf
.146(o1)A
90 403 :M
f0_12 sf
1.481 .148(\(as before, chain short-cutting will occur as invocations are made\). Note that in this)J
90 418 :M
-.039(example, as )A
f4_12 sf
-.047(o2)A
f0_12 sf
-.036( was on a different node, )A
f4_12 sf
-.047(o1)A
f0_12 sf
-.039( has migrated across the network.)A
148 441 316 169 rC
37 36 225 476.5 @f
164 478 -2 2 207 476 2 164 476 @a
1 G
154 470 20 20 rC
155 471 10 11 rF
0 G
155.5 471.5 9 10 rS
156 481 :M
(R)S
gR
gS 148 441 316 169 rC
217 454 :M
f0_12 sf
(o1)S
37 36 299 476.5 @f
291 454 :M
(o2)S
:a
16 <EEDDBB77EEDDBB77
><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777
>fg bk :b
150.5 443.5 104 58 rS
267.5 443.5 104 58 rS
:e
0 G
164 563 -2 2 207 561 2 164 561 @a
1 G
154 555 20 20 rC
155 556 10 11 rF
0 G
155.5 556.5 9 10 rS
156 566 :M
(R)S
gR
gS 148 441 316 169 rC
339 539 :M
f0_12 sf
(o1)S
37 36 301 561.5 @f
291 539 :M
(o2)S
:a
16 <EEDDBB77EEDDBB77
><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777
>fg bk :b
150.5 528.5 104 58 rS
267.5 528.5 104 58 rS
:e
1 G
292 555 20 20 rC
293 556 10 11 rF
0 G
293.5 556.5 9 10 rS
294 566 :M
(R)S
gR
gS 148 441 316 169 rC
37 36 348 560.5 @f
302 563 -2 2 330 561 2 302 561 @a
214 518 :M
f0_12 sf
-.153(before migration)A
216 606 :M
-.188(after migration)A
:a
16 <EEDDBB77EEDDBB77
><EEEEEEDDDDDDBBBBBB777777EEEEEEDDDDDDBBBBBB777777
>fg bk :b
392.5 496.5 26 25 rS
:e
427 515 :M
0 G
-.019(= node)A
182 472 -1 1 190 476 1 182 471 @a
-1 -1 183 484 1 1 189 476 @b
184 556 -1 1 192 560 1 184 555 @a
-1 -1 185 568 1 1 191 560 @b
257 556 -1 1 265 560 1 257 555 @a
-1 -1 258 568 1 1 264 560 @b
306 556 -1 1 314 560 1 306 555 @a
-1 -1 307 568 1 1 313 560 @b
1 G
205 555 20 20 rC
206 556 10 11 rF
0 G
206.5 556.5 9 10 rS
207 566 :M
(R)S
gR
gS 148 441 316 169 rC
215 563 -2 2 294 561 2 215 561 @a
gR
gS 30 31 552 730 rC
204 632 :M
f2_12 sf
2.15 .215(Fig. 3: Migrating an object manager)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Graham Parrington; page: 7 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(7)S
90 102 :M
f6_14 sf
.866(Naming)A
126 127 :M
f0_12 sf
.38 .038(The design of our naming scheme has been influenced by the work of the ANSA)J
90 142 :M
1.299 .13(group [Linden93]. Our naming mechanism uses precisely the same facilities as those)J
90 157 :M
.223 .022(presented for the sharing and locating of objects. All of our names are context-dependant)J
90 172 :M
.527 .053(and an object is named by being migrated to an object manager along with the name by)J
90 187 :M
.261 .026(which it is to be known within that object manager. This is sufficient for the cases where)J
90 202 :M
.148 .015(the object requires only a single name and means that a group of clients with access to an)J
90 217 :M
-.138(object manager may share the object \(a situation which we believe will be the most common)A
90 232 :M
.342 .034(for shared objects\). In this case the name translation and object are co-located within the)J
90 247 :M
-.116(object manager.)A
126 272 :M
-.006(If an object needs to be shared by more than one group it may need to be named in)A
90 287 :M
-.086(more than one object manager, and potentially given a different name in each. In this case a)A
90 302 :M
.245 .024(Reference is placed in each of the required object managers, with the required name, and)J
90 317 :M
-.08(clients access the Reference via the name, treating it as if it were the actual target object i.e.)A
90 332 :M
.422 .042(each Reference acts as an alias for the target. In the example below \(see fig. 4\) client )J
f4_12 sf
.303(c1)A
90 347 :M
f0_12 sf
.718 .072(holds a Reference to an object known as )J
f4_12 sf
.263(o1)A
f0_12 sf
.788 .079( within object manager )J
f4_12 sf
.302(om1)A
f0_12 sf
.71 .071(, and wishes to)J
90 362 :M
-.118(make the object visible to client )A
f4_12 sf
-.146(c2)A
f0_12 sf
-.124( by registering its name with object manager )A
f4_12 sf
-.178(om2)A
f0_12 sf
(.)S
1 G
233 403 20 20 rC
234 404 10 11 rF
0 G
234.5 404.5 9 10 rS
235 414 :M
(R)S
gR
gS 204 385 203 84 rC
244 411 -2 2 339 409 2 244 409 @a
209 455 :M
f0_12 sf
-.326(c2)A
37 36 295 449.5 @f
.5 G
339 400 19 19 rF
0 G
339.5 400.5 18 18 rS
209 414 :M
-.326(c1)A
361 414 :M
(o1)S
240.5 411.5 14 @e
239.5 451.5 14 @e
310 405 -1 1 316 409 1 310 404 @a
-1 -1 311 416 1 1 315 409 @b
382 412 :M
-.167(om1)A
48 41 353.5 410 @f
318 455 :M
-.167(om2)A
gR
gS 30 31 552 730 rC
244 491 :M
f2_12 sf
2.406 .241(Fig. 4: Object naming)J
126 516 :M
f0_12 sf
-.085(To do so, )A
f4_12 sf
-.1(c1)A
f0_12 sf
-.077( creates a )A
f4_12 sf
-.124(Name)A
f0_12 sf
-.085( object which contains a reference to o1, and migrates it)A
90 531 :M
.337 .034(to )J
f4_12 sf
.245(om2)A
f0_12 sf
.477 .048( giving it the name ')J
f4_12 sf
.182(foo)A
f0_12 sf
.628 .063('. \(A Name object is simply a Reference inside a wrapper)J
90 546 :M
-.09(and is just shown as a Reference in the diagram\). Now )A
f4_12 sf
-.104(c2)A
f0_12 sf
-.084( \(or any other client\) can create its)A
90 561 :M
.489 .049(own Reference to foo, given knowledge of the identity of the object manager and of the)J
90 576 :M
.032 .003(name 'foo'; foo may now be accessed as if it were the actual target object. The state at this)J
90 591 :M
.181 .018(point is shown in fig. 5.)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Graham Parrington; page: 8 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(8)S
1 G
233 105 20 20 rC
234 106 10 11 rF
0 G
234.5 106.5 9 10 rS
235 116 :M
(R)S
gR
gS 204 90 203 84 rC
244 116 -2 2 339 114 2 244 114 @a
209 160 :M
f0_12 sf
-.326(c2)A
37 36 295 154.5 @f
.5 G
339 105 19 19 rF
0 G
339.5 105.5 18 18 rS
209 119 :M
-.326(c1)A
361 119 :M
(o1)S
239.5 156.5 14 @e
310 110 -1 1 316 114 1 310 109 @a
-1 -1 311 121 1 1 315 114 @b
382 117 :M
-.167(om1)A
48 41 353.5 115 @f
318 160 :M
-.167(om2)A
1 G
281 148 20 20 rC
282 149 10 11 rF
0 G
282.5 149.5 9 10 rS
283 159 :M
(R)S
gR
gS 204 90 203 84 rC
294 159 :M
f0_12 sf
(foo)S
1 G
234 148 20 20 rC
235 149 10 11 rF
0 G
235.5 149.5 9 10 rS
236 159 :M
(R)S
gR
gS 204 90 203 84 rC
244 156 -2 2 284 154 2 244 154 @a
-2 -2 293 152 2 2 338 114 @b
260 150 -1 1 266 154 1 260 149 @a
-1 -1 261 161 1 1 265 154 @b
-1 -1 311 130 1 1 320 128 @b
-1 -1 321 138 1 1 320 128 @b
1 G
233 118 20 20 rC
234 119 10 11 rF
0 G
234.5 119.5 9 10 rS
235 129 :M
f0_12 sf
(R)S
gR
gS 204 90 203 84 rC
28 37 238.5 118 @f
242 127 -2 2 286 150 2 242 125 @a
264 134 -1 1 266 138 1 264 133 @a
260 141 -1 1 265 140 1 260 140 @a
gR
gS 30 31 552 730 rC
244 196 :M
f2_12 sf
2.406 .241(Fig. 5: Object naming)J
126 221 :M
f0_12 sf
.606 .061(Name objects )J
12 f7_1 :p
21.262 :m
.201(may)A
.451 .045( be created in such a way that they appear to be referenced by)J
90 236 :M
.287 .029(some permanent entity which means they are never garbage collected, and so their target)J
90 251 :M
-.043(objects are never garbage collected. By this mechanism objects may persist over time even)A
90 266 :M
-.087(if unreferenced by clients.)A
90 301 :M
f2_14 sf
4.916 .492(3. Fault-tolerance)J
126 326 :M
f0_12 sf
2.022 .202(So far, we have considered the provision of support mechanisms for object)J
90 341 :M
-.074(mobility in the absence of failures. We now remove this restriction. In a distributed system,)A
90 356 :M
1.416 .142(a failure \(network partition, crash of the node holding the target object or a forward)J
90 371 :M
.33 .033(Reference\) can prevent a client from invoking the target object. Unfortunately, given the)J
90 386 :M
-.036(LSDCS communications characteristics discussed earlier, it will be not usually be possible)A
90 401 :M
.771 .077(for the client to determine the exact cause of such a disconnection. The use of forward)J
90 416 :M
.833 .083(referencing in support of mobility, although offering a scaleable and efficient solution,)J
90 431 :M
1.314 .131(aggravates the problem by introducing additional points of failure along the chain of)J
90 446 :M
.886 .089(References to the object. Short-cutting minimises the length of the chains, but even so)J
90 461 :M
.778 .078(fault-tolerant mechanisms which mask node or partition failures need to consider these)J
90 476 :M
.418 .042(circumstances. Similarly, if an object is unable to send a response to a client, there is no)J
90 491 :M
-.067(exact way for the object \(or its node\) to determine the cause, which could be either because)A
90 506 :M
.174 .017(the client node has crashed or because of a \(real or virtual\) partition. We distinguish such)J
90 521 :M
f4_12 sf
.085(involuntary)A
f0_12 sf
.342 .034( disconnections from )J
f4_12 sf
.086(voluntary)A
f0_12 sf
.325 .032( disconnections, where there need not be such)J
90 536 :M
.691 .069(uncertainty \(since a client can inform object managers before voluntarily disconnecting)J
90 551 :M
.205 .021(itself\). In this paper we will be concerned with involuntary disconnections. We next state)J
90 566 :M
-.094(the assumptions that have been made.)A
126 591 :M
1.029 .103(First of all with the view of obtaining crash-resistance, we assume that objects)J
90 606 :M
.328 .033(\(including References and object managers\) can be either )J
f4_12 sf
.073(volatile)A
f0_12 sf
.108 .011( or )J
f4_12 sf
.086(durable)A
f0_12 sf
.298 .03( and objects)J
90 621 :M
-.046(provide an operation for making themselves durable. The state of a volatile object does not)A
90 636 :M
-.005(survive a crash of its node; a durable object on the other hand has a backup state stored on)A
90 651 :M
.328 .033(some stable store, enabling the state to survive node crashes \(so after crash recovery, the)J
90 666 :M
-.063(object can be made available again\). The operation for durability is atomic in the sense that)A
90 681 :M
-.062(either the state is successfully written to the stable store, or, if it fails to do so, any previous)A
90 696 :M
1.153 .115(backup state is retained.)J
f2_12 sf
.15 .015( )J
f0_12 sf
1.082 .108(We assume that a crashed node eventually recovers, and that)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Graham Parrington; page: 9 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
304 62 :M
f0_12 sf
(9)S
90 99 :M
.063 .006(network partitions are not permanent. We also assume the existence of a )J
f4_12 sf
.107 .011(failure suspicion)J
90 114 :M
f0_12 sf
.022 .002(facility, enabling a client \(object\) to )J
f4_12 sf
(suspect)S
f0_12 sf
.02 .002( a crash of the object \(client\). This facility can)J
90 129 :M
.099 .01(only be based on detecting a disconnection with a previously connected object \(client\). In)J
90 144 :M
1.247 .125(practice, such a facility will make use of timeouts for detecting lack of responses. In)J
90 159 :M
-.085(principle, the probability of wrongly suspecting an entity as crashed can be made arbitrarily)A
90 174 :M
.404 .04(low by increasing the duration of the timeouts \(in addition, there could be network-level)J
90 189 :M
1.089 .109(services through which information about network connectivity can be obtained\). Our)J
90 204 :M
-.095(architecture does not insist on a specific design for such a facility.)A
126 229 :M
-.088(Given the uncertainty in failure detection mentioned above, we propose a pragmatic)A
90 244 :M
-.069(approach to constructing a fault-tolerant object reference scheme that does not compromise)A
90 259 :M
.123 .012(efficiency. Our approach is based on our earlier work on fault-tolerant reference counting)J
90 274 :M
-.103([Mancini91] adapted to the SSP chain environment.)A
126 299 :M
-.088(As a system requirement, we would like a )A
f4_12 sf
-.086(safe)A
f0_12 sf
-.083( and )A
f4_12 sf
-.077(lively)A
f0_12 sf
-.092( garbage collection scheme)A
90 314 :M
.766 .077(that works despite involuntary disconnections: objects with References are not garbage)J
90 329 :M
1.208 .121(collected \(safety\) and objects without any Reference are eventually garbage collected)J
90 344 :M
.036(\(liveness\).)A
126 369 :M
.551 .055(From a client's perspective, we would require that References held by that client)J
90 384 :M
.395 .04(remain )J
f4_12 sf
.089(valid)A
f0_12 sf
.383 .038( despite node crashes and the activities of the underlying garbage-collection)J
90 399 :M
.758 .076(mechanism. By validity we mean that whilst a Reference is held by a client, the object)J
90 414 :M
-.109(referred to continues to exist and is accessible via the Reference.)A
126 439 :M
-.006(The validity of References in a faulty environment could be guaranteed by making)A
90 454 :M
1.548 .155(all References and objects durable; further, atomic transactions could be utilised for)J
90 469 :M
.041 .004(atomically migrating objects. The Arjuna system designed and implemented by our group)J
90 484 :M
.296 .03([Dixon89, Shrivastava94] serves as an example. It supports persistent objects that can be)J
90 499 :M
.865 .086(manipulated under the control of atomic transactions. A system supporting mobility of)J
90 514 :M
.259 .026(objects can be constructed as an application of Arjuna. However such a system would be)J
90 529 :M
-.073(far too expensive for those applications that do not require all the objects and References to)A
90 544 :M
1.084 .108(be durable. We have therefore developed )J
f4_12 sf
1.403 .14(lightweight )J
f0_12 sf
1.687 .169(fault-tolerance mechanisms: we)J
90 559 :M
1.501 .15(provide a set of operations to make References and/or objects durable, which, when)J
90 574 :M
-.126(invoked by a client, give specific Reference validity guarantees to the client.)A
90 609 :M
f6_12 sf
3.567 .357(Durable objects and References)J
126 634 :M
f0_12 sf
1.732 .173( We now describe the conditions under which the validity of a Reference is)J
90 649 :M
.223 .022(maintained in an SSP chain based referencing scheme, where objects and References can)J
90 664 :M
-.096(be made durable. First of all, we define the concept of a durable chain of References:)A
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(Graham Parrington; page: 10 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(10)S
126 99 :M
f4_12 sf
2.724 .272(Durable chain of References)J
f0_12 sf
1.959 .196(: Let References )J
f4_12 sf
1.991 .199(a1, a2, ....an)J
f0_12 sf
1.572 .157( form a chain of)J
126 114 :M
-.014(References; a chain )A
f4_12 sf
-.013(ai..ak)A
f0_12 sf
(, )S
f4_12 sf
-.013(1 )A
cF f5_12 sf
-.013(\243)A
sf
-.013( i,k )A
cF f5_12 sf
-.013(\243)A
sf
-.013( n)A
f0_12 sf
-.013(, will be termed durable if all  )A
f4_12 sf
(al)S
f0_12 sf
(, )S
f4_12 sf
-.012(i )A
cF f5_12 sf
-.012(\243)A
sf
-.012( l )A
cF f5_12 sf
-.012(\243)A
sf
-.012( k)A
f0_12 sf
-.015(, are)A
126 129 :M
(durable.)S
126 154 :M
f4_12 sf
-.067(Making an object durable)A
f0_12 sf
-.06(: If a client holds a Reference to a durable object, then we)A
90 169 :M
-.068(require that the client be able to invoke the object \(possibly after a delay, if there have been)A
90 184 :M
1.588 .159(failures\). Making a volatile object durable involves the client invoking an operation)J
90 199 :M
.121(\()A
f4_12 sf
.165(make_object_durable)A
f0_12 sf
.504 .05(\) which is sent, as normal, to the object via the client's Reference)J
90 214 :M
-.055(\(and potentially via a chain\); the object makes itself durable and returns a response directly)A
90 229 :M
.172 .017(to the client. As is usual, a side-effect of the invocation is that any chain of References to)J
90 244 :M
-.002(the target is short-cut. However if the durable object is now migrated to another node, and)A
90 259 :M
.259 .026(leaves behind a volatile Reference, then a crash of the original node will make the object)J
90 274 :M
.233 .023(unreachable. So it is necessary to maintain the chain from the client  leading to the target)J
90 289 :M
.781 .078(object as durable. For this reason it is necessary that a migrating durable object should)J
90 304 :M
1.214 .121(leave behind a durable Reference. So, the process of migrating an object and leaving)J
90 319 :M
.505 .051(behind a durable Reference involves the migrating object creating a copy of itself at the)J
90 334 :M
.082 .008(destination \(as the object is durable the copy will be durable\), creating a Reference \(made)J
90 349 :M
.251 .025(durable by the process described below\) to the destination copy, and then replacing itself)J
90 364 :M
.796 .08(with that Reference. As before this 'replacement' occurs with the flipping of a Boolean)J
90 379 :M
1.673 .167(switch. However in this case migration is completed by the writing the state of the)J
90 394 :M
.744 .074(reference to stable store.)J
f2_12 sf
.097 .01( )J
f0_12 sf
.61 .061(A failure during migration prior to this point may result in the)J
90 409 :M
-.133(destination copy being left unreferenced \(but it will eventually be garbage collected\).)A
126 434 :M
1.409 .141(Making a durable object volatile again involves invoking a specific operation)J
90 449 :M
.185(\()A
f4_12 sf
.257(make_object_nondurable)A
f0_12 sf
.774 .077(\) on the object; the object makes itself volatile and returns a)J
90 464 :M
-.062(response directly to the client. As a side-effect of the invocation any chain of References to)A
90 479 :M
-.07(the target is short-cut.)A
126 504 :M
f4_12 sf
-.089(Making a Reference durable)A
f0_12 sf
-.079(: If a client holds a durable Reference to an object, then)A
90 519 :M
-.016(it is necessary that the chain leading to the target object be kept durable. Making a volatile)A
90 534 :M
7.51 .751(Reference durable involves invoking an operation on the Reference)J
90 549 :M
-.056(\()A
f4_12 sf
-.076(make_reference_durable)A
f0_12 sf
-.069(\); the Reference makes itself durable and then sends a message to)A
90 564 :M
-.006(the object informing it that the Reference is now durable. Objects which know themselves)A
90 579 :M
-.076(to be referenced by durable References must, if migrated, leave behind a durable Reference)A
90 594 :M
-.036(\(using the process described above\).)A
126 619 :M
1.35 .135(Making a Reference volatile involves invoking an operation on the Reference)J
90 634 :M
-.109(\()A
f4_12 sf
-.151(make_reference_nondurable)A
f0_12 sf
-.131(\); the Reference sends a message to the object informing it that)A
90 649 :M
-.123(the Reference is now volatile, and when the object replies the client makes itself volatile.)A
126 674 :M
.664 .066(Note that with each of these operations, with one exception, there is no window)J
90 689 :M
1.238 .124(during which an object has a volatile Reference, but believes itself to have a durable)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(Graham Parrington; page: 11 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(11)S
90 99 :M
.515(Reference.)A
f2_12 sf
.272 .027( )J
f0_12 sf
1.897 .19(The exception occurs when an object with a durable reference is being)J
90 114 :M
.057(migrated.)A
f2_12 sf
( )S
f0_12 sf
.2 .02(It is possible that a failure during migration, although it does not invalidate our)J
90 129 :M
-.049(reference validity guarantee, could leave an unreferenced object which our current garbage)A
90 144 :M
.663 .066(collection mechanisms cannot detect. An additional mechanism could be introduced  to)J
90 159 :M
-.086(detect such objects.)A
126 184 :M
-.056(We will now consider each of the four volatile/durable combinations of objects and)A
90 199 :M
.886 .089(References and examine the Reference validity and garbage collection guarantees they)J
90 214 :M
.575 .057(offer. We assume that an object maintains a record of the type of Reference \(durable or)J
90 229 :M
.047 .005(volatile\) each of its clients is holding; this information is used for the purposes of garbage)J
90 244 :M
-.115(collection. Similarly, a client also maintains information about the type of object \(durable or)A
90 259 :M
1.464 .146(volatile\) it is holding a Reference to. How this information is actually collected and)J
90 274 :M
-.073(maintained will be discussed shortly.)A
99 299 :M
f4_12 sf
-.16(\(i\))A
126 299 :M
.236 .024(Volatile Reference to a volatile object)J
f0_12 sf
.215 .022(: In the presence of crashes, References and)J
126 314 :M
.121 .012(objects may be lost. If a crash of a client holding a volatile Reference is suspected)J
126 329 :M
1.875 .187(by the object, then the reference count is decremented by one. The garbage)J
126 344 :M
-.014(collection scheme for this combination therefore ensures that garbage collection of)A
126 359 :M
.074 .007(volatile objects is lively, with a small risk - which can be made arbitrarily low - of)J
126 374 :M
.454 .045(being unsafe in the presence of involuntary disconnections. Therefore, as objects)J
126 389 :M
-.134(may be lost due to either premature removal by the garbage collection mechanism or)A
126 404 :M
1.443 .144(due to node crash, our referencing scheme can make no guarantees about the)J
126 419 :M
-.161(validity of a volatile Reference to a volatile object.)A
126 444 :M
-.092(In the example \(see fig. 6\), two clients )A
f4_12 sf
-.114(c1)A
f0_12 sf
-.094( and )A
f4_12 sf
-.114(c2)A
f0_12 sf
-.096( hold volatile References to volatile)A
90 459 :M
1.633 .163(object )J
f4_12 sf
.515(o1)A
f0_12 sf
1.681 .168( which go through two, separate, forward References, )J
f4_12 sf
.515(a)A
f0_12 sf
.802 .08( and )J
f4_12 sf
.515(b)A
f0_12 sf
1.186 .119(. If the node)J
90 474 :M
-.01(holding )A
f4_12 sf
(o1)S
f0_12 sf
-.009( crashes, then )A
f4_12 sf
(o1)S
f0_12 sf
-.009( will be lost and, of course, the References held by both clients)A
90 489 :M
.351 .035(become invalid. On the other hand, if )J
f4_12 sf
.125(o1)A
f0_12 sf
.321 .032( suspects a failure of the node holding )J
f4_12 sf
.125(a)A
f0_12 sf
.211 .021(, and )J
f4_12 sf
.236(c2)A
90 504 :M
f0_12 sf
-.084(deletes its Reference to )A
f4_12 sf
-.11(o1)A
f0_12 sf
-.078(, then )A
f4_12 sf
-.11(o1)A
f0_12 sf
-.087( stands the risk of being garbage collected.)A
228 517 191 115 rC
255.5 540.5 18 @e
276 543 :M
-.326(c1)A
1 G
249 536 20 20 rC
250 537 10 11 rF
0 G
250.5 537.5 9 10 rS
251 547 :M
(R)S
gR
gS 228 517 191 115 rC
254 548 -2 2 290 601 2 254 546 @a
403 628 :M
f0_12 sf
(o1)S
1 G
284 600 20 20 rC
285 601 10 11 rF
0 G
285.5 601.5 9 10 rS
286 611 :M
(R)S
gR
gS 228 517 191 115 rC
294 608 -2 2 398 606 2 294 606 @a
317.5 539.5 18 @e
338 542 :M
f0_12 sf
-.326(c2)A
1 G
311 535 20 20 rC
312 536 10 11 rF
0 G
312.5 536.5 9 10 rS
313 546 :M
(R)S
gR
gS 228 517 191 115 rC
-2 -2 318 579 2 2 316 546 @b
.5 G
397 597 19 19 rF
0 G
397.5 597.5 18 18 rS
1 G
311 577 20 20 rC
312 578 10 11 rF
0 G
312.5 578.5 9 10 rS
313 588 :M
f0_12 sf
(R)S
gR
gS 228 517 191 115 rC
317 590 -2 2 399 606 2 317 588 @a
274 610 :M
f0_12 sf
(a)S
300 589 :M
(b)S
262 572 -1 1 273 574 1 262 571 @a
-1 -1 273 575 1 1 273 566 @b
311 563 -1 1 318 567 1 311 562 @a
-1 -1 318 568 1 1 322 563 @b
334 602 -1 1 339 606 1 334 601 @a
348 591 -1 1 352 596 1 348 590 @a
-1 -1 344 601 1 1 351 596 @b
-1 -1 334 613 1 1 338 607 @b
gR
gS 30 31 552 730 rC
193 654 :M
f2_12 sf
2.631 .263(Fig. 6: Volatile References to a volatile object)J
99 679 :M
f4_12 sf
-.218(\(ii\))A
126 679 :M
.045 .005(Durable Reference to a volatile object)J
f0_12 sf
.034 .003(: If a client has a durable Reference then the)J
126 694 :M
1.311 .131(chain leading to the object is also durable. So, even if a crash of the client is)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(Graham Parrington; page: 12 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(12)S
126 99 :M
1.138 .114(suspected, no action to modify the reference count is undertaken. The garbage)J
126 114 :M
-.014(collection scheme for this combination therefore ensures that garbage collection of)A
126 129 :M
.519 .052(objects is lively with no risk of being unsafe even in the presence of involuntary)J
126 144 :M
.648 .065(disconnections. However the object may be lost due to a crash of the host node.)J
126 159 :M
-.013(Therefore our referencing scheme can only guarantee that a durable Reference to a)A
126 174 :M
.942 .094(volatile object will remain valid provided the host of the target object does not)J
126 189 :M
.137(crash.)A
99 214 :M
f4_12 sf
-.247(\(iii\))A
126 214 :M
-.074(Volatile Reference to a durable object)A
f0_12 sf
-.069(: If a failure of the client is suspected then the)A
126 229 :M
1.014 .101(reference count is decremented by one. The garbage collection scheme for this)J
126 244 :M
.602 .06(combination therefore ensures that garbage collection of objects is lively, with a)J
126 259 :M
.118 .012(small risk - which can be made arbitrarily low - of being unsafe in the presence of)J
126 274 :M
.245 .024(involuntary disconnections. Therefore our referencing scheme can only guarantee)J
126 289 :M
-.061(that a volatile  Reference to a durable object will remain valid in the absence of any)A
126 304 :M
-.142(premature removal of the object by the garbage collection mechanism.)A
99 329 :M
f4_12 sf
.118(\(iv\))A
126 329 :M
-.085(Durable Reference to a durable object)A
f0_12 sf
-.057(:)A
f2_12 sf
-.051( )A
f0_12 sf
-.084(This case is the combination of the previous)A
126 344 :M
.085 .008(two, so the garbage collection scheme for this combination is both safe and lively,)J
126 359 :M
1.736 .174(and as the object and the Reference cannot be lost due to node crashes, our)J
126 374 :M
-.005(referencing scheme can guarantee that a durable Reference to a durable object will)A
126 389 :M
-.085(always remain valid.)A
126 414 :M
.798 .08(We illustrate the above ideas with the help of an example. Fig. 7\(i\) depicts two)J
90 429 :M
-.022(clients )A
f4_12 sf
-.028(c1)A
f0_12 sf
-.023( and )A
f4_12 sf
-.028(c2)A
f0_12 sf
-.024( holding References, )A
f4_12 sf
(a)S
f0_12 sf
-.023( and )A
f4_12 sf
(b)S
f0_12 sf
-.022( to object )A
f4_12 sf
-.03(o1)A
f0_12 sf
-.025( which go through two, separate,)A
90 444 :M
.405 .041(forward References, )J
f4_12 sf
.086(c)A
f0_12 sf
.151 .015( and )J
f4_12 sf
.097(d)A
f0_12 sf
.288 .029(; all the References and objects are initially volatile. To both)J
90 459 :M
-.093(clients our referencing scheme offers no guarantees regarding the validity of the References)A
90 474 :M
-.009(they hold, as crashes and/or partitions may cause )A
f4_12 sf
(o1)S
f0_12 sf
-.009( \(or the path to )A
f4_12 sf
(o1)S
f0_12 sf
-.01(\) to be lost. Suppose)A
90 489 :M
f4_12 sf
(c1)S
f0_12 sf
( now invokes an operation of )S
f4_12 sf
(o1)S
f0_12 sf
( to make )S
f4_12 sf
(o1)S
f0_12 sf
.005 .001( durable, and also invokes an operation of )J
f4_12 sf
(a)S
90 504 :M
f0_12 sf
-.085(to make )A
f4_12 sf
-.098(a)A
f0_12 sf
-.077( durable. This will provide a guarantee to )A
f4_12 sf
-.093(c1)A
f0_12 sf
-.066( that )A
f4_12 sf
-.098(o1)A
f0_12 sf
-.071( will persist whilst )A
f4_12 sf
-.093(c1)A
f0_12 sf
-.075( holds )A
f4_12 sf
-.098(a)A
f0_12 sf
(.)S
90 519 :M
.092 .009(The resulting state is as shown in fig. 7\(ii\). Note that, by invoking the operation on )J
f4_12 sf
.034(o1)A
f0_12 sf
(, )S
f4_12 sf
.064(c1)A
90 534 :M
f0_12 sf
.873 .087(has established a direct path to )J
f4_12 sf
.325(o1)A
f0_12 sf
.956 .096(. However )J
f4_12 sf
.307(c2)A
f0_12 sf
1.046 .105( remains unaware of any change, even)J
90 549 :M
.353 .035(though it now benefits from )J
f4_12 sf
.121(o1)A
f0_12 sf
.393 .039( being crash-recoverable. If )J
f4_12 sf
.121(o1)A
f0_12 sf
.338 .034( is migrated then a durable)J
90 564 :M
-.097(forward Reference will be left behind to ensure a durable chain to )A
f4_12 sf
-.116(c1)A
f0_12 sf
(.)S
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(Graham Parrington; page: 13 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(13)S
90 90 413 134 rC
110.5 178.5 18 @e
102 153 :M
-.326(c1)A
1 G
104 174 20 20 rC
105 175 10 11 rF
0 G
105.5 175.5 9 10 rS
106 185 :M
(R)S
gR
gS 90 90 413 134 rC
256 200 :M
f0_12 sf
(o1)S
1 G
164 173 20 20 rC
165 174 10 11 rF
0 G
165.5 174.5 9 10 rS
166 184 :M
(R)S
gR
gS 90 90 413 134 rC
175 181 -2 2 251 179 2 175 179 @a
170.5 112.5 18 @e
191 115 :M
f0_12 sf
-.326(c2)A
1 G
164 108 20 20 rC
165 109 10 11 rF
0 G
165.5 109.5 9 10 rS
166 119 :M
(R)S
gR
gS 90 90 413 134 rC
-2 -2 171 152 2 2 169 119 @b
.5 G
253 170 19 19 rF
0 G
253.5 170.5 18 18 rS
1 G
164 150 20 20 rC
165 151 10 11 rF
0 G
165.5 151.5 9 10 rS
166 161 :M
f0_12 sf
(R)S
gR
gS 90 90 413 134 rC
175 161 -2 2 252 179 2 175 159 @a
106 173 :M
f0_12 sf
(a)S
166 108 :M
(b)S
164 136 -1 1 171 140 1 164 135 @a
-1 -1 171 141 1 1 175 136 @b
204 175 -1 1 209 179 1 204 174 @a
201 164 -1 1 205 169 1 201 163 @a
-1 -1 197 174 1 1 204 169 @b
-1 -1 204 186 1 1 208 180 @b
158 194 :M
(c)S
158 170 :M
(d)S
115 182 -2 2 168 180 2 115 180 @a
137 176 -1 1 142 180 1 137 175 @a
-1 -1 137 187 1 1 141 181 @b
169 217 :M
-.16(\(i\))A
335.5 176.5 18 @e
326 150 :M
-.326(c1)A
1 G
331 172 20 20 rC
332 173 10 11 rF
0 G
332.5 173.5 9 10 rS
333 183 :M
(R)S
gR
gS 90 90 413 134 rC
482 203 :M
f0_12 sf
(o1)S
341 179 -2 2 478 177 2 341 177 @a
397.5 110.5 18 @e
418 113 :M
-.326(c2)A
1 G
391 106 20 20 rC
392 107 10 11 rF
0 G
392.5 107.5 9 10 rS
393 117 :M
(R)S
gR
gS 90 90 413 134 rC
-2 -2 398 150 2 2 396 117 @b
.5 G
477 168 19 19 rF
0 G
477.5 168.5 18 18 rS
1 G
391 148 20 20 rC
392 149 10 11 rF
0 G
392.5 149.5 9 10 rS
393 159 :M
f0_12 sf
(R)S
gR
gS 90 90 413 134 rC
402 159 -2 2 479 177 2 402 157 @a
333 168 :M
f0_12 sf
(a)S
393 106 :M
(b)S
391 134 -1 1 398 138 1 391 133 @a
-1 -1 398 139 1 1 402 134 @b
431 173 -1 1 436 177 1 431 172 @a
428 162 -1 1 432 167 1 428 161 @a
-1 -1 424 172 1 1 431 167 @b
-1 -1 431 184 1 1 435 178 @b
385 168 :M
(d)S
396 220 :M
f9_10 sf
(\( ii\))S
2 lw
257 103 270 114 2 @s
276 111 :M
(= durable)S
276 123 :M
-.009(     entity)A
327 171 345 187 2 @s
473 164 501 192 2 @s
gR
gS 30 31 552 730 rC
179 246 :M
f2_12 sf
2.339 .234(Fig.7: A durable Reference to durable object)J
90 281 :M
f2_14 sf
3.009 .301(4. Redundant Chains of References)J
126 306 :M
f0_12 sf
1.141 .114(As we have seen, the necessity of following chains of References to an object)J
90 321 :M
-.05(introduces failure modes such that a crash of intermediate nodes may break the access path)A
90 336 :M
1.303 .13(to the target, or in the presence of communication failures, the object may be not be)J
90 351 :M
-.038(accessible via a route through a particular chain of References. A sensible way of reducing)A
90 366 :M
.094 .009(the probability of such occurrences is to provide redundant paths to an object and provide)J
90 381 :M
-.054(\(inexpensive\) mechanisms for their creation and exploitation. Note that although durability)A
90 396 :M
-.058(guarantees that a durable object will eventually be accessible via its References, it relies on)A
90 411 :M
-.078(recovery, so objects would, if this were the only mechanism employed, remain inaccessible)A
90 426 :M
-.113(until node and/or communication recovery occurred.)A
126 451 :M
.662 .066(In our architecture, objects may be made responsible for maintaining alternative)J
90 466 :M
.114 .011(paths to their own current location. In order to achieve this, we introduce the concept of a)J
90 481 :M
f4_12 sf
-.083(compound Reference)A
f0_12 sf
-.07(  which is a Reference consisting of a list of \(simple\) References.)A
126 506 :M
.283 .028(For example in fig. 8\(i\), two clients, )J
f4_12 sf
.099(c1)A
f0_12 sf
.163 .016( and )J
f4_12 sf
.099(c2)A
f0_12 sf
.294 .029(, hold References to object )J
f4_12 sf
.105(o1)A
f0_12 sf
.292 .029(, and)J
90 521 :M
f4_12 sf
.069(c1)A
f0_12 sf
.19 .019( decides to create an alternative path to )J
f4_12 sf
.157 .016(o1. )J
f0_12 sf
.159 .016(To do this, )J
f4_12 sf
.069(c1)A
f0_12 sf
.211 .021( first identifies \(or creates\) an)J
90 536 :M
-.05(appropriate object manager, )A
f4_12 sf
-.048(alt1)A
f0_12 sf
-.049(, which will be responsible for holding the alternative path)A
90 551 :M
.497 .05(to )J
f4_12 sf
.314(o1)A
f0_12 sf
.818 .082(, and then creates a Reference chain to )J
f4_12 sf
.314(o1)A
f0_12 sf
.433 .043( via )J
f4_12 sf
.244(alt1)A
f0_12 sf
1.151 .115( \(using the naming mechanism)J
90 566 :M
.512 .051(described in section 2\), leaving the state shown in fig. 8\(ii\). Client )J
f4_12 sf
.173(c1)A
f0_12 sf
.57 .057( then performs the)J
90 581 :M
-.007('alternate ref' operation of )A
f4_12 sf
(o1)S
f0_12 sf
-.008(, passing, as a parameter, a Reference to the alternative route.)A
90 596 :M
-.066(Object )A
f4_12 sf
-.08(o1)A
f0_12 sf
-.065( now has knowledge of its own alternative route and is henceforth responsible for)A
90 611 :M
-.05(piggy-backing this information on any reply it sends \(including the immediate reply to )A
f4_12 sf
-.059(c1)A
f0_12 sf
-.073(\),)A
90 626 :M
-.041(and for maintaining the alternative route. The Reference to the alternative route is received)A
90 641 :M
.05 .005(by )J
f4_12 sf
(c1)S
f0_12 sf
.067 .007( in the reply to the 'alternate ref' operation and now the Reference to )J
f4_12 sf
.026(o1)A
f0_12 sf
.063 .006( consists of a)J
90 656 :M
.493 .049(list of References, i.e., the original Reference and the Reference to the alternative route.)J
90 671 :M
-.007(The state is now as shown in fig. 8\(iii\).)A
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(Graham Parrington; page: 14 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(14)S
108 90 395 146 rC
37 36 321 124.5 @f
270 173 -2 2 313 171 2 270 171 @a
1 G
260 165 20 20 rC
261 166 10 11 rF
0 G
261.5 166.5 9 10 rS
262 176 :M
(R)S
gR
gS 108 90 395 146 rC
237 167 :M
f0_12 sf
-.326(c1)A
.5 G
313 162 19 19 rF
0 G
313.5 162.5 18 18 rS
1 G
261 197 20 20 rC
262 198 10 11 rF
0 G
262.5 198.5 9 10 rS
263 208 :M
(R)S
gR
gS 108 90 395 146 rC
236 205 :M
f0_12 sf
-.326(c2)A
-2 -2 273 205 2 2 312 171 @b
1 G
315 119 20 20 rC
316 120 10 11 rF
0 G
316.5 120.5 9 10 rS
317 130 :M
(R)S
gR
gS 108 90 395 146 rC
-2 -2 320 163 2 2 318 130 @b
1 G
260 151 20 20 rC
261 152 10 11 rF
0 G
261.5 152.5 9 10 rS
262 162 :M
f0_12 sf
(R)S
gR
gS 108 90 395 146 rC
-2 -2 273 158 2 2 316 126 @b
37 36 474 127.5 @f
423 176 -2 2 466 174 2 423 174 @a
1 G
413 168 20 20 rC
414 169 10 11 rF
0 G
414.5 169.5 9 10 rS
415 179 :M
f0_12 sf
(R)S
gR
gS 108 90 395 146 rC
389 177 :M
f0_12 sf
-.326(c1)A
.5 G
466 165 19 19 rF
0 G
466.5 165.5 18 18 rS
1 G
414 201 20 20 rC
415 202 10 11 rF
0 G
415.5 202.5 9 10 rS
416 212 :M
(R)S
gR
gS 108 90 395 146 rC
389 210 :M
f0_12 sf
-.326(c2)A
-2 -2 426 208 2 2 465 174 @b
1 G
468 122 20 20 rC
469 123 10 11 rF
0 G
469.5 123.5 9 10 rS
470 133 :M
(R)S
gR
1 G
gS 469 169 20 20 rC
470 170 10 11 rF
0 G
470.5 170.5 9 10 rS
471 180 :M
f0_12 sf
(R)S
gR
0 G
gS 108 90 395 146 rC
-2 -2 473 166 2 2 471 133 @b
-2 -2 478 171 2 2 476 133 @b
314 102 :M
f0_12 sf
-.331(alt1)A
467 106 :M
-.331(alt1)A
336 174 :M
0 0 rm
(o1)S
488 178 :M
0 0 rm
(o1)S
31 40 266 162.5 @f
29 30 265 203.5 @f
29 30 418 173.5 @f
29 30 420 208.5 @f
-2 -2 426 176 2 2 469 127 @b
289 140 -1 1 300 139 1 289 139 @a
-1 -1 299 148 1 1 299 139 @b
313 150 -1 1 320 155 1 313 149 @a
-1 -1 320 156 1 1 324 149 @b
290 167 -1 1 296 172 1 290 166 @a
-1 -1 290 178 1 1 295 172 @b
286 187 -1 1 296 186 1 286 186 @a
-1 -1 296 193 1 1 295 186 @b
442 146 -1 1 453 145 1 442 145 @a
-1 -1 453 153 1 1 452 145 @b
441 170 -1 1 447 175 1 441 169 @a
-1 -1 442 181 1 1 446 175 @b
-1 -1 442 188 1 1 450 186 @b
-1 -1 451 195 1 1 450 186 @b
466 150 -1 1 472 154 1 466 149 @a
-1 -1 472 155 1 1 475 150 @b
-1 -1 473 158 1 1 476 154 @b
476 155 -1 1 483 157 1 476 154 @a
310 232 :M
-.218(\(ii\))A
451 232 :M
-.247(\(iii\))A
153 145 -2 2 196 143 2 153 143 @a
1 G
143 137 20 20 rC
144 138 10 11 rF
0 G
144.5 138.5 9 10 rS
145 148 :M
(R)S
gR
gS 108 90 395 146 rC
120 146 :M
f0_12 sf
-.326(c1)A
.5 G
196 134 19 19 rF
0 G
196.5 134.5 18 18 rS
1 G
144 169 20 20 rC
145 170 10 11 rF
0 G
145.5 170.5 9 10 rS
146 180 :M
(R)S
gR
gS 108 90 395 146 rC
120 179 :M
f0_12 sf
-.326(c2)A
-2 -2 156 177 2 2 195 143 @b
218 146 :M
(o1)S
31 30 151 143.5 @f
31 30 151 177.5 @f
174 140 -1 1 180 144 1 174 139 @a
-1 -1 175 149 1 1 179 144 @b
170 158 -1 1 179 157 1 170 157 @a
-1 -1 179 165 1 1 178 157 @b
142 232 :M
-.16(\(i\))A
gR
gS 30 31 552 730 rC
193 258 :M
f2_12 sf
2.804 .28(Fig. 8: Redundant chains of References)J
126 283 :M
f0_12 sf
.276 .028(If another client \(not shown\) migrates the object to a new location then migration)J
90 298 :M
.292 .029(occurs as described previously, and )J
f4_12 sf
.066(after)A
f0_12 sf
.226 .023( the migration )J
f4_12 sf
.087(o1)A
f0_12 sf
.271 .027( updates the Reference held by)J
90 313 :M
f4_12 sf
-.08(alt1)A
f0_12 sf
-.079( with its new location leaving the state as shown in fig. 9\(i\).)A
125 336 361 153 rC
212 378 -2 2 262 415 2 212 376 @a
165 417 -2 2 208 415 2 165 415 @a
1 G
155 409 20 20 rC
156 410 10 11 rF
0 G
156.5 410.5 9 10 rS
157 420 :M
(R)S
gR
gS 125 336 361 153 rC
218 417 -2 2 262 415 2 218 415 @a
1 G
208 409 20 20 rC
209 410 10 11 rF
0 G
209.5 410.5 9 10 rS
210 420 :M
f0_12 sf
(R)S
gR
1 G
gS 156 441 20 20 rC
157 442 10 11 rF
0 G
157.5 442.5 9 10 rS
158 452 :M
f0_12 sf
(R)S
gR
gS 125 336 361 153 rC
127 451 :M
0 G
f0_12 sf
-.326(c2)A
-2 -2 168 449 2 2 207 415 @b
37 36 212 370.5 @f
1 G
206 365 20 20 rC
207 366 10 11 rF
0 G
207.5 366.5 9 10 rS
208 376 :M
(R)S
gR
.5 G
gS 125 336 361 153 rC
261 406 19 19 rF
0 G
261.5 406.5 18 18 rS
1 G
264 410 20 20 rC
265 411 10 11 rF
0 G
265.5 411.5 9 10 rS
266 421 :M
f0_12 sf
(R)S
gR
gS 125 336 361 153 rC
129 418 :M
0 G
f0_12 sf
-.326(c1)A
-2 -2 168 417 2 2 207 373 @b
216 374 -2 2 268 412 2 216 372 @a
202 348 :M
-.331(alt1)A
283 420 :M
(o1)S
161.5 415.5 14 @e
161.5 447.5 14 @e
181 391 -1 1 192 390 1 181 390 @a
-1 -1 192 399 1 1 191 390 @b
187 411 -1 1 193 416 1 187 410 @a
-1 -1 189 423 1 1 192 416 @b
-1 -1 182 430 1 1 192 428 @b
-1 -1 192 438 1 1 192 428 @b
234 412 -1 1 240 416 1 234 411 @a
-1 -1 234 422 1 1 239 416 @b
229 397 -1 1 238 396 1 229 396 @a
-1 -1 238 397 1 1 237 391 @b
-1 -1 243 400 1 1 243 394 @b
242 394 -1 1 252 394 1 242 393 @a
368 410 -2 2 411 408 2 368 408 @a
1 G
358 402 20 20 rC
359 403 10 11 rF
0 G
359.5 403.5 9 10 rS
360 413 :M
(R)S
gR
0 G
gS 125 336 361 153 rC
419 410 -2 2 462 408 2 419 408 @a
334 454 :M
f0_12 sf
-.326(c2)A
-2 -2 371 452 2 2 462 408 @b
37 36 413 363.5 @f
1 G
407 358 20 20 rC
408 359 10 11 rF
0 G
408.5 359.5 9 10 rS
409 369 :M
(R)S
gR
.5 G
gS 125 336 361 153 rC
462 399 19 19 rF
0 G
462.5 399.5 18 18 rS
1 G
465 403 20 20 rC
466 404 10 11 rF
0 G
466.5 404.5 9 10 rS
467 414 :M
f0_12 sf
(R)S
gR
gS 125 336 361 153 rC
334 413 :M
0 G
f0_12 sf
-.326(c1)A
-2 -2 370 410 2 2 410 369 @b
417 367 -2 2 469 403 2 417 365 @a
413 371 -2 2 464 408 2 413 369 @a
1 G
359 445 20 20 rC
360 446 10 11 rF
0 G
360.5 446.5 9 10 rS
361 456 :M
(R)S
gR
1 G
gS 409 402 20 20 rC
410 403 10 11 rF
0 G
410.5 403.5 9 10 rS
411 413 :M
f0_12 sf
(R)S
gR
0 G
gS 125 336 361 153 rC
-2 -2 372 452 2 2 410 369 @b
403 341 :M
f0_12 sf
-.331(alt1)A
467 429 :M
(o1)S
365.5 410.5 14 @e
364.5 450.5 14 @e
385 386 -1 1 394 385 1 385 385 @a
-1 -1 394 392 1 1 393 385 @b
-1 -1 389 399 1 1 396 395 @b
396 396 -1 1 400 401 1 396 395 @a
396 404 -1 1 402 408 1 396 403 @a
-1 -1 396 415 1 1 401 408 @b
433 404 -1 1 439 408 1 433 403 @a
-1 -1 434 415 1 1 438 408 @b
413 427 -1 1 421 429 1 413 426 @a
-1 -1 417 438 1 1 419 430 @b
435 395 -1 1 444 394 1 435 394 @a
-1 -1 444 395 1 1 444 387 @b
-1 -1 450 397 1 1 449 390 @b
449 391 -1 1 458 390 1 449 390 @a
207 483 :M
-.16(\(i\))A
409 485 :M
-.218(\(ii\))A
gR
gS 30 31 552 730 rC
124 511 :M
f2_12 sf
2.375 .238(Fig. 9: Migrating an object with redundant chains of References)J
126 536 :M
f0_12 sf
.509 .051(Note that, because this additional functionality has been built on top of the basic)J
90 551 :M
.216 .022(mobility mechanism, the process of migrating an object and then updating the alternative)J
90 566 :M
-.05(route is not atomic. This means that if the node holding the intermediate Reference were to)A
90 581 :M
.023 .002(crash immediately following the migration, but before the target has finished updating the)J
90 596 :M
.585 .058(alternative route, the object could temporarily appear as unavailable.)J
f2_12 sf
.073 .007( )J
f0_12 sf
.621 .062(If the intermediate)J
90 611 :M
.205 .02(node were to crash after )J
f4_12 sf
.078(o1)A
f0_12 sf
.223 .022( has updated the alternative route, )J
f4_12 sf
.074(c1)A
f0_12 sf
.24 .024( could use the alternative)J
90 626 :M
-.005(route to access )A
f4_12 sf
(o1)S
f0_12 sf
(, but )S
f4_12 sf
(c2)S
f0_12 sf
-.005( has not yet 'seen' the alternative route and so would be unable to)A
90 641 :M
.442 .044(do so. However, any client which accesses an object that has an alternative route gets to)J
90 656 :M
.702 .07(know about the alternative route, piggy-backed onto any reply from the object \(see fig.)J
90 671 :M
.457 .046(9\(ii\); it is assumed that the chain of References to )J
f4_12 sf
.174(o1)A
f0_12 sf
.327 .033( from )J
f4_12 sf
.164(c2)A
f0_12 sf
.424 .042( has been  short-cut by the)J
90 686 :M
-.103(referencing mechanism\).)A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(Graham Parrington; page: 15 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(15)S
90 102 :M
f2_14 sf
3.196 .32(5. Implementation Status and Performance)J
126 127 :M
f0_12 sf
1.81 .181(We built the first version of Shadows \(in C++\) to provide support for three)J
90 142 :M
.168 .017(facilities - object servers \(object managers\), object migration and the location-transparent)J
90 157 :M
.007 .001(invocation of operations upon objects [Caughey93]. Using only these three basic facilities)J
90 172 :M
-.002(we described how the Shadows system permits the creation of other more powerful object)A
90 187 :M
1.188 .119(capabilities through a simple use of multiple inheritance \(it is equally possible to use)J
90 202 :M
.895 .089(mechanisms such as delegation, subcontracts [Hamilton93a] and meta-object protocols)J
90 217 :M
-.065([Tenma92, Stroud93] in place of inheritance\). Our first implementation was on a collection)A
90 232 :M
1.948 .195(of transputers, running the Helios operating system [Perihelion91]. This version of)J
90 247 :M
-.009(Shadows has now been ported to run on networked Unix workstations.)A
126 272 :M
.041 .004(The current version of Shadows provides all the features described in sections two)J
90 287 :M
-.079(and three of the paper. This includes mobility, safe garbage collection, naming and location)A
90 302 :M
1.85 .185(and the fault tolerant mechanisms described here. The capability of creating object)J
90 317 :M
-.059(managers dynamically, migrating them around the system is also supported as is the ability)A
90 332 :M
-.01(to use them as name servers. This version of Shadows is in use by us as well as two of our)A
90 347 :M
-.021(industrial partners. Work on implementing the redundant chains of references described in)A
90 362 :M
.007 .001(section four is now under way.)J
126 387 :M
-.038(The following measurements were made on a SparcStation 1, running SUNOS. All)A
90 402 :M
-.091(timings are in ms. and the objects involved are approximately 100 bytes in size.)A
172 432 338 181 rC
174.5 435.5 217 176 rS
189 457 :M
-.075(Simple RPC)A
188 477 :M
-.192(Local make_object_durable)A
187 521 :M
-.184(Remote make_object_durable)A
188 544 :M
-.258(Client/OM migration)A
188 567 :M
-.332(OM/OM migration)A
190 587 :M
-.31(OM/OM migration )A
190 599 :M
-.152(\(durable object\))A
187 499 :M
-.175(Remote make_reference_durable)A
-1 -1 352 612 1 1 351 435 @b
366 456 :M
(4)S
365 567 :M
(25)S
401 523 :M
-.262(OM = Object Manager)A
367 546 :M
(9)S
360 592 :M
(159)S
359 500 :M
(100)S
363 479 :M
(80)S
360 523 :M
(100)S
gR
gS 30 31 552 730 rC
90 642 :M
f0_12 sf
1.732 .173(The RPC involves a simple operation invoked between address spaces on the same)J
90 657 :M
1.253 .125(processor. The local make_object_durable operation simply packs the state of a local)J
90 672 :M
.541 .054(object, creates a unix file and writes the state into the file. Neither the RPC, nor the file)J
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(Graham Parrington; page: 16 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(16)S
90 99 :M
-.054(system are a part of the Shadow's release and these figures are given in order to place other)A
90 114 :M
-.092(timings in context.)A
126 139 :M
.6 .06(Remote make_reference_durable makes the reference to a remote object durable)J
90 154 :M
-.135(whilst remote make_object_durable makes a remote object durable.)A
90 189 :M
f2_14 sf
3.129 .313(6. Related Work)J
126 214 :M
f0_12 sf
.919 .092(Many object support systems have been designed. Some examples are Emerald)J
90 229 :M
.336 .034([Black87], Cool [Lea93], Guide [Balter91], Spring [Hamilton93b, Radia93] and Choices)J
90 244 :M
.138 .014([Campbell93]. However, these systems have not been designed to run on general purpose)J
90 259 :M
3.108 .311(operating systems. Network Objects system [Birrell93] offers somewhat similar)J
90 274 :M
-.043(functionality to Shadows but does not support object mobility, a key feature of our system.)A
90 289 :M
1.416 .142(DC++  [Schill93] and Panda [Assenmacher93] provide C++ extensions and run-time)J
90 304 :M
.801 .08(systems, on top of DCE and a specialised 'picokernel' respectively, which offer similar)J
90 319 :M
-.016(functionality to Shadows although, as we discuss below, they lack Shadow's flexibility.)A
126 344 :M
1.252 .125(Emerald is the original inspiration for our work and we share its emphasis on)J
90 359 :M
.513 .051(support for object mobility. However we have chosen to support existing languages and)J
90 374 :M
-.043(although this makes our solution portable, we cannot offer the compiler support for remote)A
90 389 :M
-.006(invocation or type conformance that the Emerald language provides. Unlike Emerald \(and)A
90 404 :M
-.036(many other systems\) we have avoided the use of globally unique object identity, favouring)A
90 419 :M
.431 .043(context-dependant identity instead. Indeed our use of context-dependant naming scheme)J
90 434 :M
.274 .027(makes it simple for entirely new naming systems \(which may be disjoint from the rest of)J
90 449 :M
-.036(the naming  network\) to be created, shared within some distributed application and deleted)A
90 464 :M
-.12(when the application completes.)A
126 489 :M
.046 .005(Cool \(CHORUS Object-Oriented Layer\) provides generic object support on top of)J
90 504 :M
.518 .052(the CHORUS microkernel and a choice of language specific run-time layers above that.)J
90 519 :M
1.415 .142(The basic unit of distribution is the cluster, a collection of related objects, and Cool)J
90 534 :M
1.735 .174(provides the abstraction of distributed shared virtual memory, in which clusters are)J
90 549 :M
-.071(dynamically mapped/unmapped into address spaces on demand. In comparison, our system)A
90 564 :M
2.423 .242(does not rely on specialised operating system support but instead encourages the)J
90 579 :M
-.021(implementation of application specific mechanisms, such as those for concurrency-control)A
90 594 :M
.815 .081(and persistence, at the user level. In Shadows, the unit of distribution is the object and)J
90 609 :M
-.028(although this should provide performance gains where individual objects are being shared,)A
90 624 :M
-.109(it may be necessary to implement a clustering mechanism for the efficient sharing of groups)A
90 639 :M
-.09(of related objects.)A
126 664 :M
.412 .041(Spring seems closest to our system in its structure. Spring is a distributed object-)J
90 679 :M
-.084(oriented operating system which shares our aim of providing basic object support through a)A
90 694 :M
.104 .01(set of simple, versatile objects and servers built upon a communication mechanism. Low-)J
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(Graham Parrington; page: 17 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(17)S
90 99 :M
2.626 .263(level referencing in Spring is via a )J
f4_12 sf
1.058(Door)A
f0_12 sf
3.04 .304( which is a capability \(representing a)J
90 114 :M
.385 .038(communication endpoint\) and an associated integer value, whereby the Door identifies a)J
90 129 :M
-.023(server \(a Spring domain\) and the integer identifies a particular object within that server. In)A
90 144 :M
1.083 .108(Spring, user names \(which can be compound names\) are managed by a name service.)J
90 159 :M
-.093(Accessing a Spring object via the name service is a 2-step process whereby a client asks the)A
90 174 :M
-.024(name service to resolve a name and receives a handle to the object in the response and this)A
90 189 :M
-.013(is followed by the access itself. Spring uses persistent name servers which explicitly make)A
90 204 :M
.148 .015(an object persistent in its object manager and the object manager returns a freeze token, a)J
90 219 :M
-.001(reference, to the persistent state of the object which when unfrozen, obtains that persistent)A
90 234 :M
(state.)S
126 259 :M
.039 .004(Spring relies on a specialised kernel whilst Shadows only requires a standard RPC)J
90 274 :M
.679 .068(facility making it portable as we have shown through our implementations on two very)J
90 289 :M
.153 .015(different architectures \(an array of transputers, running the Helios operating system and a)J
90 304 :M
.089 .009(network of Unix workstations\). Additionally, Spring does not provide explicit support for)J
90 319 :M
-.13(fault-tolerance.)A
126 344 :M
.505 .05(In our system, objects are referenced by a communication endpoint identifying a)J
90 359 :M
1.18 .118(server \(an object manager in our system\) and a name interpreted by the server which)J
90 374 :M
-.056(identifies an object within that server. Our approach allows us to use our servers to provide)A
90 389 :M
.466 .047(a user-defined name space and thereby co-locate user name translations within the same)J
90 404 :M
1.043 .104(address space as their objects. In the cases where a separate name service is required,)J
90 419 :M
-.05(Name objects are managed by an object manager and treated by the client as aliases for the)A
90 434 :M
.613 .061(real object, i.e. the client performs the access on the Name object, and the Name object)J
90 449 :M
-.117(forwards the access to the real object and returns the result \(along with the actual location of)A
90 464 :M
.707 .071(the object so that subsequent accesses are performed directly\). Objects are made crash-)J
90 479 :M
2.063 .206(recoverable without the intervention of a name server and are subsequently crash-)J
90 494 :M
-.131(recoverable to all clients which access the object.)A
126 519 :M
.813 .081(Spring provides compound names which our system does not as yet offer. Also)J
90 534 :M
.227 .023(Spring provides considerable support for authentication and security which is beyond the)J
90 549 :M
.01 .001(scope of our current work.)J
126 574 :M
-.049(The main difference between Network Objects and Shadows is the lack of mobility)A
90 589 :M
.809 .081(in the former system. Garbage collection in Network Object relies on run-time support)J
90 604 :M
.287 .029(which allows the 'owner' of an object to maintain a list of clients and to attempt to detect)J
90 619 :M
-.009(termination of any client process by periodically 'pinging' the clients. All objects \(with the)A
90 634 :M
-.074(exception of those in cycles, and those which suffer from a local garbage collection failure\))A
90 649 :M
1.551 .155(are guaranteed to be lively but communication failures could result in objects being)J
90 664 :M
.655 .065(prematurely collected and references no longer being safe. In this respect, the approach)J
90 679 :M
1.468 .147(taken in Network objects is similar to ours. However, by introducing the concept of)J
90 694 :M
1.215 .121(durable objects and References, we have been able to guarantee liveness and provide)J
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(Graham Parrington; page: 18 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(18)S
90 99 :M
-.076(greater flexibility  in safety requirements. In large-scale systems there will be clients whose)A
90 114 :M
-.098(safety guarantee requirements will range from none to absolute .)A
126 139 :M
.441 .044(DC++ does provide support for object mobility \(although not for object manager)J
90 154 :M
1.102 .11(mobility\) and uses a forward referencing mechanism \(although one without the short-)J
90 169 :M
1.235 .124(cutting or reference counting efficiencies of the SSP approach\). No support for crash)J
90 184 :M
.008 .001(recovery is provided but birthnodes are used in a similar way to our redundant References)J
90 199 :M
-.108(to improve fault-tolerance of access.)A
126 224 :M
.25 .025(Panda supports object mobility through the use Distributed Shared Memory. Like)J
90 239 :M
-.035(many other systems the persistent objects which they offer are both persistent \(in the sense)A
90 254 :M
.228 .023(of persisting whilst referenced\) and durable \(being  able to survive node crash\). We offer)J
90 269 :M
1.572 .157(each of these as orthogonal properties. In addition, unlike Panda, we do not require)J
90 284 :M
-.073(specialist microkernel support for supporting distribution.)A
126 309 :M
.228 .023(Our work has a number of similarities with [Ferreira93], particularly in the use of)J
90 324 :M
.697 .07(SSP mechanisms for referencing, and in the use of object managers as the fundamental)J
90 339 :M
.07 .007(structuring entity of the architecture. In [Ferreira93] an object manager is termed a Bunch)J
90 354 :M
1.828 .183(Manager, and manages a number of segments each containing a number of objects)J
90 369 :M
1.395 .14(clustered for efficiency purposes. Bunch Managers, as in the object managers of our)J
90 384 :M
-.018(system, provide binding and access to the objects they manage but additionally implement)A
90 399 :M
-.054(sharing, consistency and persistence policies. In our system these policies are implemented)A
90 414 :M
.933 .093(on a per object class basis. Garbage collection in [Ferreira93] requires communication)J
90 429 :M
.076 .008(between Bunch Managers to determine which objects are unreferenced and all objects are)J
90 444 :M
-.047(treated identically for garbage collection purposes. We offer a much simpler mechanism in)A
90 459 :M
.691 .069(which Object Managers may act independently and where clients may perform specific)J
90 474 :M
-.078(actions to ensure their references to particular objects remain valid. The mechanism used in)A
90 489 :M
-.082([Ferreira93] could be added to our system to provide stricter safety guarantees.)A
90 524 :M
f2_14 sf
3.462 .346(7. Concluding Remarks)J
126 549 :M
f0_12 sf
.414 .041(The Shadows object support system provides basic facilities for building flexible)J
90 564 :M
1.4 .14(distributed applications in environments where objects can be mobile and occasional)J
90 579 :M
.23 .023(failures \(node crashes, real or virtual network partitions\) are possible. These facilities are)J
90 594 :M
.657 .066(for naming, locating and invoking objects, persistence and garbage collection. The SSP)J
90 609 :M
-.115(chain based object reference scheme is efficient because it allows new References to bind to)A
90 624 :M
.817 .082(a local link in a chain of References leading to the referenced object, thereby avoiding)J
90 639 :M
.571 .057(costly RPCs for reference counting purposes, and scales because the solution is entirely)J
90 654 :M
-.1(distributed with no reliance on centralised services.)A
126 679 :M
.118 .012(In this paper we have developed a modified version of SSP chains which supports)J
90 694 :M
-.055(both referencing and naming and have introduced enhancements to support fault-tolerance.)A
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(Graham Parrington; page: 19 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(19)S
90 99 :M
.471 .047(Our durable object/Reference mechanism offers a pragmatic solution to the provision of)J
90 114 :M
-.085(referencing guarantees whereby all objects are guaranteed to be lively but safety guarantees)A
90 129 :M
.098 .01(require specific client action. This approach allows clients to weigh the costs of obtaining)J
90 144 :M
.024 .002(such guarantees and to make their choice on a per object basis. Our redundant referencing)J
90 159 :M
.863 .086(mechanism offers clients a flexible means by which they can dynamically increase the)J
90 174 :M
-.121(probability of being able to access any particular object.)A
90 209 :M
f2_14 sf
.677(Acknowledgements)A
126 234 :M
f0_12 sf
-.07(Extensive discussions with members of the Arjuna group, particularly with Graham)A
90 249 :M
.395 .039(Parrington, Stuart Wheater and Mark Little clarified our ideas. Critical comments on the)J
90 264 :M
.44 .044(drafts of the paper from Mark Little are also acknowledged. The work reported here has)J
90 279 :M
2.402 .24(been supported in part by grants from the UK Ministry of Defence, Science and)J
90 294 :M
2.879 .288(Engineering Research Council \(Grant Number GR/H81078\) and ESPRIT project)J
90 309 :M
-.099(BROADCAST \(Basic Research Project Number 6360\).)A
90 344 :M
f2_14 sf
.747(References)A
90 383 :M
f0_10 sf
-.179([Assenmacher93])A
198 383 :M
2.358 .236(Assenmacher, H., T. Breitbach, P. Buhler, V. H\237bsch, and R. Schwarz,)J
108 395 :M
.404 .04("PANDA - Supporting Distributed Programming in C++", Proceedings of ECOOP93, Kaiserslautern,)J
108 407 :M
.701 .07(July 1993.)J
90 421 :M
-.232([Balter91])A
162 421 :M
2.276 .228(Balter, R. et al, "Architecture and Implementation of Guide, an Object-Oriented)J
108 433 :M
.479 .048(Distributed System", Computing Systems, 4 \(1\), pp. 31-67, April 1991.)J
90 447 :M
-.175([Birrell93])A
162 447 :M
1.88 .188(Birrell, A., G. Nelson, S. Owicki and E. Wobber, "Network Objects", 14th ACM)J
108 459 :M
1.525 .152(Symposium on Operating System Principles, pp. 217-230, Asheville, North Carolina, December)J
108 471 :M
.125(1993.)A
90 485 :M
-.248([Black87])A
162 485 :M
1.46 .146(Black, A., N. Hutchinson, E. Jul, H.Levy and L. Carter, "Distribution and Abstract)J
108 497 :M
.126 .013(Types in Emerald", IEEE Transactions on Software Engineering, Vol. SE-13, Issue 1, 1989.)J
90 511 :M
-.049([Campbell93])A
162 511 :M
1.81 .181(Campbell, R.H., N. Islam, D. Raila and P. Madany "Designing and Implementing)J
108 523 :M
1.713 .171(Choices : An Object-Oriented System in C++", Communications of the ACM, Vol. 36, No. 9,)J
108 535 :M
.1 .01(September 1993.)J
90 549 :M
-.12([Caughey93])A
162 549 :M
2.321 .232(Caughey, S.J., G.D. Parrington and S.K. Shrivastava, "SHADOWS - A Flexible)J
108 561 :M
1.038 .104(Support System for Objects in Distributed Systems", Proc. of 3rd IEEE Intl. Workshop on Object)J
108 573 :M
1.018 .102(Orientation in Operating Systems, pp. 73-82, Asheville, North Carolina, December 1993. \(also: in)J
108 585 :M
-.003(BROADCAST Project deliverable report, Vol. 3, October 1993\).)A
90 599 :M
-.082([Dixon89])A
162 599 :M
.515 .052(Dixon, G.N., et al, "The Treatment of Persistent Objects in Arjuna," Proceedings of the)J
108 611 :M
.908 .091(Third European Conference on Object-Oriented Programming, ECOOP89, pp. 169-189, July 1989.)J
108 623 :M
.456 .046(\(Also, The Computer Journal, Vol. 32, No. 4, pp. 323-332, 1989\).)J
90 637 :M
-.208([Ferreira93])A
162 637 :M
1.039 .104(Ferreira, P. and M. Shapiro, \322Distribution and Persistence in Multiple Heterogeneous)J
108 649 :M
.485 .048(Address Spaces", Proc. of 3rd IEEE Intl. Workshop on Object Orientation in Operating Systems, pp.)J
108 661 :M
.105 .01(83-92, Asheville, North Carolina, December 1993.)J
90 675 :M
-.072([Hamilton93a])A
162 675 :M
2.011 .201(Hamilton, G., M. L. Powell and J.G. Mitchell "Subcontract: A Flexible Base for)J
108 687 :M
.419 .042(Distributed Programming", 14th ACM Symposium on Operating System Principles, Asheville, North)J
108 699 :M
-.022(Carolina, December 1993.)A
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(Graham Parrington; page: 20 of 20)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
298 62 :M
f0_12 sf
(20)S
90 99 :M
f0_10 sf
-.035([Hamilton93b])A
162 99 :M
1.285 .128(Hamilton, G., and P. Kougiouris, "The Spring nucleus : A microkernel for objects",)J
108 111 :M
(Proceedings of the 1993 Summer Usenix Conference, June 1993.)S
90 125 :M
-.273([Lea93])A
162 125 :M
1.327 .133(Lea, R., C. Jacquemmot and E. Pillevesse "COOL : System Support for Distributed)J
108 137 :M
.457 .046(Programming", Communications of the ACM, Vol. 36, No. 9, September 1993.)J
90 151 :M
-.22([Linden93])A
162 151 :M
1.353 .135(van der Linden, R. J., "The ANSA naming model", ANSA Architecture Report No.)J
108 163 :M
.139 .014(AR.003.01, Freburary, 1993 \(available from APM Ltd., Poseidon House, Castle Park, Cambridge CB3)J
108 175 :M
.469 .047(0RD, UK\).)J
90 189 :M
-.098([Mancini91])A
162 189 :M
1.931 .193(Mancini L. and S.K. Shrivastava, "Fault-tolerant Reference Counting for Garbage)J
108 201 :M
.424 .042(Collection in Distributed Systems", The Computer Journal, Vol. 34, No. 6, 1991.)J
90 215 :M
-.058([Perihelion91])A
162 215 :M
.631 .063(Perihelion Software Ltd., "The Helios Parallel Operating System", Prentice Hall, 1991,)J
108 227 :M
.297 .03(ISBN 0 13 381237 5.)J
90 241 :M
-.248([Radia93])A
162 241 :M
.783 .078(Radia, S., P. Madany and M. Powell, "Persistence in the Spring System", Proc. of 3rd)J
108 253 :M
1.717 .172(IEEE Intl. Workshop on Object Orientation in Operating Systems, pp. 73-82, Asheville, North)J
108 265 :M
-.022(Carolina, December 1993.)A
90 279 :M
([Schill93])S
162 279 :M
.241 .024(Schill, A. B. and M. U. Mock, \322DC++: distributed object-oriented system support on top)J
108 291 :M
.377 .038(of OSF DCE\323, Distributed Systems Engineering, 1, pp. 112-125, 1993.)J
90 305 :M
-.076([Shapiro92])A
162 305 :M
2.753 .275(Shapiro, M., P. Dickman and D. Plainfosse, "SSP Chains: Robust, Distributed)J
108 317 :M
1.266 .127(References Supporting Acyclic Garbage Collection", Proc. of ACM Symp. on Principles of Dist.)J
108 329 :M
.357 .036(Computing, Vancouver, August 1992.)J
90 343 :M
-.093([Shrivastava94])A
162 343 :M
2.181 .218(Shrivastava, S.K. and D.L. McCue, "Structuring fault-tolerant object systems for)J
108 355 :M
.128 .013(modularity in a distributed environment", IEEE Trans. on Parallel and Distributed Systems Vol. 5, No.)J
108 367 :M
.541 .054(4, pp. 421-432, April 1994.)J
90 381 :M
-.147([Stroud93])A
162 381 :M
1.282 .128(Stroud, R. "Transparency and reflection in distributed systems",  Operating Systems)J
108 393 :M
.508 .051(Review, Vol. 27, pp. 99-103, April 1993.)J
90 407 :M
-.177([Tenma92])A
162 407 :M
.656 .066(Tenma, T., Y. Yokote and M. Tokoro, "Implementing persistent objects in the Apertos)J
108 419 :M
.2 .02(operating system", Proc. of 2nd IEEE Intl. Workshop on Object Orientation in Operating Systems, pp.)J
108 431 :M
-.007(66-79, Dourdan, France, September 1992.)A
endp
%%Trailer
end		% md
%%EOF
