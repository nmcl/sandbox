%!PS-Adobe-3.0
%%Title: (Dagstuhl/Spring)
%%Creator: (Word 5.1: LaserWriter 8 B1-8.2)
%%CreationDate: (11:33 am Wednesday, July 12, 1995)
%%For: (nsks)
%%Pages: 16
%%DocumentFonts: Times-Bold Times-BoldItalic Times-Italic Times-Roman Symbol Helvetica-Bold Helvetica Courier Courier-Oblique
%%DocumentNeededFonts: Times-Bold Times-BoldItalic Times-Italic Times-Roman Symbol Helvetica-Bold Helvetica Courier Courier-Oblique
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 595 842 0 () ()
%ADO_ImageableArea: 13 12 581 830
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Dagstuhl/Spring)def
/Creator(Word 5.1: LaserWriter 8 B1-8.2)def
/CreationDate(11:33 am Wednesday, July 12, 1995)def
/For(nsks)def
/Pages 1 def
end def end
/md 231 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
%%BeginFile: adobe_psp_dashes
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/:q/setdash ld
/:r{
np
:M
:L
stroke
}bd
/nodash[]def
/qdenddash
{
nodash 0 setdash
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize A4

    1 dict
    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put
        setpagedevice
        2 dict
    dup /PageSize [595 842] put
    dup /ImagingBBox null put
    setpagedevice
%%EndFeature
}featurecleanup
(nsks)setjob
/mT[1 0 0 -1 13 830]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Times-Italic
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Helvetica
%%IncludeFont: Courier
%%IncludeFont: Courier-Oblique
/f0_1/Times-Bold
:mre
/f0_14 f0_1 14 scf
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f1_1/Times-BoldItalic
:mre
/f1_14 f1_1 14 scf
/f1_10 f1_1 10 scf
/f2_1/Times-Italic
:mre
/f2_10 f2_1 10 scf
/f2_9 f2_1 9 scf
/f3_1/Times-Roman
:mre
/f3_12 f3_1 12 scf
/f3_10 f3_1 10 scf
/f3_9 f3_1 9 scf
/f4_1/Symbol
:bsr
240/apple pd
:esr
/f4_10 f4_1 10 scf
/f5_1/Helvetica-Bold
:mre
/f6_1 f5_1 1.04 scf
/f6_24 f6_1 24 scf
/f7_1/Helvetica
:mre
/f8_1 f7_1 1.04 scf
/f8_12 f8_1 12 scf
/f9_1/Courier
:mre
/f9_10 f9_1 10 scf
/f9_9 f9_1 9 scf
/f11_1/Courier-Oblique
:mre
/f11_10 f11_1 10 scf
/f11_9 f11_1 9 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(nsks; page: 1 of 16)setjob
%%EndPageSetup
gS 0 0 568 818 rC
130 144 :M
f0_14 sf
3.084 .308(Lessons Learned from Building and Using the)J
147 159 :M
f1_14 sf
.727(Arjuna)A
f0_14 sf
3.625 .362( Distributed Programming System)J
236 207 :M
f2_10 sf
.232 .023(Santosh K. Shrivastava)J
214 222 :M
.163 .016(Department of Computing Science)J
177 237 :M
.6 .06(University of Newcastle upon Tyne, NE1 7RU, UK)J
f0_10 sf
(.)S
136 271 :M
f0_14 sf
.509(Abstract)A
f3_9 sf
0 -3 rm
(*)S
0 3 rm
145 292 :M
f2_9 sf
.631(Arjuna)A
f3_9 sf
2.427 .243( is an object-oriented programming system implemented in C++ that)J
145 302 :M
3.56 .356(provides a set of tools for the construction of fault-tolerant distributed)J
145 312 :M
1.441 .144(applications. This paper reports on the experience gained by building and using)J
145 322 :M
.942 .094(the system. It then describes how in light of this experience, a new version of the)J
145 332 :M
1.115 .111(system is being designed.)J
109 366 :M
f0_14 sf
4.495 .45(1. Introduction)J
109 389 :M
f2_10 sf
.041(Arjuna)A
f3_10 sf
.154 .015( is an object-oriented programming system implemented in C++ that provides a)J
109 400 :M
2.343 .234(set of tools for the construction of fault-tolerant distributed applications. The)J
109 411 :M
-.011(computational model of )A
f2_10 sf
-.012(Arjuna)A
f3_10 sf
-.01( for constructing robust distributed applications is based)A
109 422 :M
2.147 .215(upon the concept of using nested atomic actions for controlling operations on)J
109 433 :M
1.133 .113(persistent objects. Atomic actions control sequences of operations upon \(local and)J
109 444 :M
.511 .051(remote\) objects, which are instances of C++ classes. Operations upon remote objects)J
109 455 :M
.445 .044(are invoked through the use of remote procedure calls \(RPCs\). )J
f2_10 sf
.132(Arjuna)A
f3_10 sf
.384 .038( objects can be)J
109 466 :M
.064 .006(replicated on distinct nodes for obtaining high availability. )J
f2_10 sf
.018(Arjuna)A
f3_10 sf
.065 .006( system software has)J
109 477 :M
1.631 .163(been freely available via anonymous ftp for research, development and teaching)J
109 488 :M
1.038 .104(purposes since 1992 \(http://)J
f2_10 sf
.251(Arjuna)A
f3_10 sf
1.125 .112(.ncl.ac.uk/\). )J
f2_10 sf
.251(Arjuna)A
f3_10 sf
.71 .071( has been used for building a)J
109 499 :M
.063 .006(number of distributed applications. In this paper we report on the experience gained by)J
109 510 :M
.245 .025(building and using the system. We will then describe how we intend to restructure the)J
109 521 :M
.243 .024(system in light of this experience.)J
109 532 :M
.243 .024(We wanted )J
f2_10 sf
.071(Arjuna)A
f3_10 sf
.206 .021( to be a widely available toolset, in the spirit of other UNIX related)J
109 543 :M
.076 .008(software \(e.g., the X window system\). Thus we have deliberately chosen not to modify)J
109 554 :M
1.015 .102(the language or the operating system. The )J
f2_10 sf
.279(ISIS)A
f3_10 sf
1.147 .115( system [Birman87, Birman93] is a)J
109 565 :M
.326 .033(well known example of a software system that has also taken the same approach. The)J
109 576 :M
1.878 .188(ISIS system provides a reliable group communications infrastructure. A careful)J
109 587 :M
.257 .026(examination of the underlying models of these systems \(virtual synchrony in ISIS and)J
109 598 :M
1.342 .134(serialisable transactions in )J
f2_10 sf
.339(Arjuna)A
f3_10 sf
1.068 .107(\) and their integration is an interesting topic for)J
109 609 :M
-.026(further research \(we will only briefly cover this topic towards the end of this paper\).)A
109 620 :M
.004 0(Designing and implementing a programming system capable of supporting 'objects and)J
109 631 :M
-.002(actions' based applications by utilising )A
f2_10 sf
(existing)S
f3_10 sf
-.003( programming languages and distributed)A
-4109 -4107 -1 1 -4107 -4107 1 -4109 -4108 @a
109 641.24 -.24 .24 252.24 641 .24 109 641 @a
127 665 :M
f3_9 sf
.456(*)A
f3_10 sf
0 3 rm
1.508 .151( This paper has been published in LNCS No. 938, July 1995, \322Theory and)J
0 -3 rm
145 683 :M
.043 .004(Practice in Distributed Systems\323.)J
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(nsks; page: 2 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
1.098 .11(system services is a challenging task. Firstly, despite their obvious potential, most)J
122 164 :M
.055 .006(widely used object-oriented languages have little or no direct support for programming)J
122 175 :M
1.114 .111(a distributed application. The primary reason for this focus is that existing object-)J
122 186 :M
.462 .046(oriented languages have been developed without the demands of distribution in mind)J
122 197 :M
.036 .004(and thus possess one or more features that are either impossible, or at least impractical,)J
122 208 :M
.219 .022(to support in a distributed execution environment. An example of such a feature being)J
122 219 :M
1.991 .199(the assumption that the application will execute within a single address space.)J
122 230 :M
-.001(Secondly, support for distributed computing on currently available systems varies from)A
122 241 :M
.14 .014(the provision of bare essential services, in the form of networking support for message)J
122 252 :M
1.37 .137(passing, to slightly more advanced services for interprocess communication \(e.g.,)J
122 263 :M
.158 .016(remote procedure calls\), naming and binding \(for locating named services\) and remote)J
122 274 :M
2.45 .245(file access. The challenge lies in integrating these services into an advanced)J
122 285 :M
1.668 .167(programming environment permitting existing languages to be used for building)J
122 296 :M
-.045(distributed applications.)A
122 330 :M
f0_14 sf
3.062 .306(2. Failure Assumptions and Computation Model)J
122 365 :M
f1_14 sf
1.667(2.1.)A
158 365 :M
4.776 .478(Failure assumptions)J
122 388 :M
f3_10 sf
.168 .017(It will be assumed that the hardware components of the system are computers \(nodes\),)J
122 399 :M
1.572 .157(connected by a communication subsystem. A node is assumed to work either as)J
122 410 :M
.399 .04(specified or simply to stop working \(crash\). After a crash, a node is repaired within a)J
122 421 :M
.963 .096(finite amount of time and made active again. A node may have both stable \(crash-)J
122 432 :M
-.003(proof\) and non-stable \(volatile\) storage or just non-stable storage. All of the data stored)A
122 443 :M
.1 .01(on volatile storage is assumed to be lost when a crash occurs; any data stored on stable)J
122 454 :M
1.891 .189(storage remains unaffected by a crash. Faults in the underlying communication)J
122 465 :M
.42 .042(subsystem may result in failures such as lost, duplicated or corrupted messages. Well)J
122 476 :M
(known network protocol techniques are available for coping with such failures, so their)S
122 487 :M
.992 .099(treatment will not be discussed further. More serious are network partition failures)J
122 498 :M
.151 .015(preventing functioning nodes from communicating with each other. Because not every)J
122 509 :M
1.191 .119(communication environment is subject to partitions, we categorise communication)J
122 520 :M
1.507 .151(environments into two types: \(i\) )J
f2_10 sf
2.899 .29(non-partitionable networks)J
f3_10 sf
1.274 .127(: in such a network,)J
122 531 :M
1.308 .131(functioning nodes are capable of communicating with each other, and judiciously)J
122 542 :M
.979 .098(chosen timeouts together with network level 'ping' mechanisms can act as accurate)J
122 553 :M
.292 .029(indication of node failures; and \(ii\) )J
f2_10 sf
.572 .057(partitionable networks)J
f3_10 sf
.4 .04(: here physical breakdowns)J
122 564 :M
-.04(\(e.g., a crash of a gateway node\) and/or network congestion can prevent communication)A
122 575 :M
1.738 .174(between functioning nodes; in such networks, timeouts and network level 'ping')J
122 586 :M
-.054(mechanisms cannot act as accurate indication of node failures \(they can only be used for)A
122 597 :M
f2_10 sf
.62(suspecting)A
f3_10 sf
2.174 .217( failures\). We assume that a partition in a partitionable network is)J
122 608 :M
-.126(eventually repaired.)A
122 642 :M
f1_14 sf
1.667(2.2.)A
158 642 :M
4.01 .401(Objects and actions)J
122 665 :M
f3_10 sf
.361 .036(As indicated, we are considering a computation model in which application programs)J
122 676 :M
.404 .04(manipulate persistent \(long-lived\) objects under the control of atomic actions \(atomic)J
122 687 :M
.904 .09(transactions\). Each object is an instance of some class. The class defines the set of)J
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(nsks; page: 3 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f2_10 sf
-.061(instance variables)A
f3_10 sf
-.058( each object will contain and the )A
f2_10 sf
-.064(operations)A
f3_10 sf
-.05( or )A
f2_10 sf
-.072(methods)A
f3_10 sf
-.064( that determine)A
122 164 :M
.295 .029(the externally visible behaviour of the object. The operations of an object have access)J
122 175 :M
.338 .034(to the instance variables and can thus modify the internal state of that object. We will)J
122 186 :M
.613 .061(consider an application program initiated on a node to be the )J
f2_10 sf
.179(root)A
f3_10 sf
.666 .067( of a computation.)J
122 197 :M
.996 .1(Distributed execution is achieved by invoking operations on objects which may be)J
122 208 :M
.468 .047(remote from the invoker. An operation invocation upon a remote object is performed)J
122 219 :M
.167 .017(via a remote procedure call \(RPC\). All operation invocations may be controlled by the)J
122 230 :M
.503 .05(use of atomic actions which have the well known properties of \(i\) )J
f2_10 sf
.129(serialisability)A
f3_10 sf
.405 .041(, \(ii\))J
122 241 :M
f2_10 sf
1.939 .194(failure atomicity)J
f3_10 sf
.74 .074(, and \(iii\) )J
f2_10 sf
1.339 .134(permanence of effect. )J
f3_10 sf
1.276 .128(Atomic actions can be nested. A)J
122 252 :M
.811 .081(commit protocol is used during the termination of an outermost atomic action \()J
f2_10 sf
.273(top-)A
122 263 :M
.853 .085(level action)J
f3_10 sf
.571 .057(\) to ensure that either all the objects updated within the action have their)J
122 274 :M
.503 .05(new states recorded on stable storage \(committed\), or, if the atomic action aborts, no)J
122 285 :M
-.033(updates get recorded. Typical failures causing a computation to be aborted include node)A
122 296 :M
.162 .016(crashes and continued loss of messages caused by a partition. It is assumed that, in the)J
122 307 :M
-.01(absence of failures and concurrency, the invocation of an operation produces consistent)A
122 318 :M
1.491 .149(\(class specific\) state changes to the object. Atomic actions then ensure that only)J
122 329 :M
-.049(consistent state changes to objects take place despite concurrent access and any failures.)A
122 340 :M
.259 .026(The object and atomic action model provides a natural framework for designing fault-)J
122 351 :M
.681 .068(tolerant systems with persistent objects. A persistent object not in use is assumed to)J
122 362 :M
.804 .08(be held in a )J
f2_10 sf
.367(passive)A
f3_10 sf
1.144 .114( state with its state residing in an object store \(a stable object)J
122 373 :M
.383 .038(repository\) and )J
f2_10 sf
.089(activated)A
f3_10 sf
.311 .031( on demand \(i.e., when an invocation is made\) by loading its)J
122 384 :M
.316 .032(state and methods from the object store to the volatile store, and associating an object)J
122 395 :M
-.006(server process for receiving RPC invocations.)A
122 406 :M
.986 .099(In the  model discussed above, a persistent object can become )J
f2_10 sf
.291(unavailable)A
f3_10 sf
.545 .054(  due to)J
122 417 :M
2.396 .24(failures such as a crash of the object server, or network partition preventing)J
122 428 :M
.695 .069(communications between clients and the server. The )J
f2_10 sf
.15(availability)A
f3_10 sf
.448 .045( of an object can be)J
122 439 :M
1.332 .133(increased by replicating it on several nodes. We will consider the case of )J
f2_10 sf
.475(strong)A
122 450 :M
.092(consistency)A
f3_10 sf
.295 .029( which requires that all replicas that are regarded as )J
f2_10 sf
.091(available)A
f3_10 sf
.354 .035( be mutually)J
122 461 :M
.138 .014(consistent \(so the persistent states of all available replicas are required to be identical\).)J
122 472 :M
1.024 .102(Object replicas must therefore be managed through appropriate replica-consistency)J
122 483 :M
1.762 .176(protocols to ensure strong consistency. To tolerate K replica failures, in a non-)J
122 494 :M
.821 .082(partitionable network, it is necessary to maintain at least K+1 replicas of an object,)J
122 505 :M
1.201 .12(whereas in a partitionable network, a minimum of 2K+1 replicas are necessary to)J
122 516 :M
.847 .085(maintain availability in the partition with access to the majority of the replicas \(the)J
122 527 :M
.075 .008(object becomes unavailable in all of the other partitions\).)J
122 561 :M
f0_14 sf
2.919 .292(3. An Overview of )J
f1_14 sf
1.251(Arjuna)A
122 584 :M
f3_10 sf
.423 .042(The )J
f2_10 sf
.152(Arjuna)A
f3_10 sf
.475 .048( research effort began in 1985. A brief overview of the system appears in)J
122 595 :M
.657 .066([Shrivastava91], while the use of C++ in building reliable distributed applications is)J
122 606 :M
.583 .058(examined in [Parrington90]. The overall architecture of )J
f2_10 sf
.152(Arjuna)A
f3_10 sf
.54 .054(, including its design,)J
122 617 :M
-.007(implementation and performance details are presented in [Parrington94]; more advance)A
122 628 :M
.056 .006(features concerned with the provision of object replication and clustering are described)J
122 639 :M
-.01(in [Little93, Little94 and Wheater94]\).)A
122 650 :M
1.762 .176(The design and implementation goal of )J
f2_10 sf
.501(Arjuna)A
f3_10 sf
1.224 .122( was to provide a state of the art)J
122 661 :M
-.007(programming system for constructing fault-tolerant distributed applications. In meeting)A
122 672 :M
-.013(this goal, three system properties were considered highly important:)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(nsks; page: 4 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
131 153 :M
f3_10 sf
.051 .005(\(i\) )J
158 153 :M
1.245 .124(Modularity: The system should be easy to install and run on a variety of)J
158 164 :M
.588 .059(hardware and software configurations. In particular, it should be possible to)J
158 175 :M
(replace a component of )S
f2_10 sf
(Arjuna)S
f3_10 sf
( by an equivalent component already present in)S
158 186 :M
.046 .005(the underlying system.)J
131 207 :M
-.071(\(ii\))A
158 207 :M
f2_10 sf
1.758 .176(Integration of mechanisms:)J
f3_10 sf
1.26 .126( A fault-tolerant distributed system requires a)J
158 218 :M
1.33 .133(variety of system functions for naming, locating and invoking operations)J
158 229 :M
-.049(upon local and remote objects, and for concurrency control, error detection and)A
158 240 :M
1.917 .192(recovery from failures, etc. These mechanisms must be provided in an)J
158 251 :M
-.027(integrated manner such that their use is easy and natural.)A
131 272 :M
(\(iii\))S
158 272 :M
f2_10 sf
.061(Flexibility:)A
f3_10 sf
.247 .025( These mechanisms should also be )J
f2_10 sf
.058(flexible,)A
f3_10 sf
.355 .036( permitting application)J
158 283 :M
-.067(specific enhancements, such as type-specific concurrency and recovery control,)A
158 294 :M
-.032(to be easily produced from the existing default ones.)A
122 305 :M
.119 .012(In )J
f2_10 sf
.062(Arjuna,)A
f3_10 sf
.209 .021( the first goal has been met by dividing the overall system functionality into)J
122 316 :M
1.09 .109(a number of modules which interact with each other through well defined )J
f2_10 sf
.416(narrow)A
122 327 :M
f3_10 sf
.921 .092(interfaces. This facilitates the task of implementing the architecture on a variety of)J
122 338 :M
2.417 .242(systems with differing support for distributed computing [Shrivastava94]. For)J
122 349 :M
1.53 .153(example, it is relatively easy to replace the default RPC module of )J
f2_10 sf
.497(Arjuna)A
f3_10 sf
.869 .087( by a)J
122 360 :M
.217 .022(different one. The remaining two goals have been met primarily through the provision)J
122 371 :M
1.16 .116(of a C++ class library; the classes in this library have been organised into a class)J
122 382 :M
.085 .008(hierarchy in a manner that will be familiar to the developers of more traditional \(single)J
122 393 :M
.674 .067(node\) centralised object-oriented systems. )J
f2_10 sf
.152(Arjuna)A
f3_10 sf
.486 .049( assumes that every major entity in)J
122 404 :M
.756 .076(the application is an object. This philosophy also applies to the internal structure of)J
122 415 :M
f2_10 sf
.88(Arjuna)A
f3_10 sf
2.217 .222( itself. Thus, )J
f2_10 sf
.88(Arjuna)A
f3_10 sf
3.061 .306( not only supports an object-oriented model of)J
122 426 :M
1.67 .167(computation, but its internal structure is also object-oriented. This approach has)J
122 437 :M
.669 .067(permitted the use of the )J
f2_10 sf
1.289 .129(type inheritance)J
f3_10 sf
.98 .098( mechanism of object-oriented systems for)J
122 448 :M
.679 .068(incorporating the properties of fault-tolerance and distribution in a very flexible and)J
122 459 :M
-.115(integrated manner.)A
122 470 :M
-.027( In this paper we will describe the overall features of )A
f2_10 sf
-.033(Arjuna)A
f3_10 sf
-.029( that are concerned with the)A
122 481 :M
1.942 .194(provision of atomic actions and persistent objects. We begin by describing the)J
122 492 :M
.094 .009(underlying client-server based model for accessing and manipulating persistent objects)J
122 503 :M
-.036(and then present the overall system architecture necessary for supporting the model.)A
122 514 :M
1.752 .175(We assume that for each persistent object there is one node  \(say )J
f4_10 sf
.831(a)A
f3_10 sf
1.816 .182(\) which, if)J
122 525 :M
.06 .006(functioning, is capable of running an )J
f2_10 sf
.089 .009(object server)J
f3_10 sf
.06 .006( which can execute the operations of)J
122 536 :M
.462 .046(that object \(in effect, this would require that )J
f4_10 sf
.209(a)A
f3_10 sf
.469 .047( has access to the executable binary of)J
122 547 :M
.318 .032(the code for the object's methods as well as the persistent state of the object stored on)J
122 558 :M
.972 .097(some, possibly remote object store\). Before a client can invoke an operation on an)J
122 569 :M
.134 .013(object, it must first be )J
f2_10 sf
.05(connected)A
f3_10 sf
.062 .006( or )J
f2_10 sf
.056(bound)A
f3_10 sf
.157 .016( to the object server managing that object. It)J
122 580 :M
.231 .023(will be the responsibility of a node, such as )J
f4_10 sf
.113(a)A
f3_10 sf
.262 .026(, to provide such a connection service to)J
122 591 :M
.878 .088(clients. If the object in question is in a passive state, then )J
f4_10 sf
.441(a)A
f3_10 sf
.998 .1( is also responsible for)J
122 602 :M
.499 .05(activating the object before connecting the requesting client to the server. In order to)J
122 613 :M
.432 .043(get a connection, an application program must be able to obtain )J
f2_10 sf
.12(location)A
f3_10 sf
.694 .069( information)J
122 624 :M
.437 .044(about the object \(such as the name of the node where the server for the object can be)J
122 635 :M
.963 .096(made available\). We assume that each persistent object possesses a unique, system)J
122 646 :M
1.482 .148(given identifier \(UID\). In our model an application program obtains the location)J
122 657 :M
.237 .024(information in two stages:)J
131 678 :M
.051 .005(\(i\) )J
158 678 :M
1.087 .109(By first presenting the application level name of the object \(a string\) to a)J
158 689 :M
.65 .065(globally accessible )J
f2_10 sf
.842 .084(naming service)J
f3_10 sf
.544 .054(; assuming the object has been registered)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(nsks; page: 5 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
158 153 :M
f3_10 sf
.727 .073(with the naming service, the naming service maps this string to the UID of)J
158 164 :M
.175 .017(the object.)J
131 185 :M
-.071(\(ii\))A
158 185 :M
1.001 .1(The application program then presents the UID of the object to a globally)J
158 196 :M
(accessible )S
f2_10 sf
(binding)S
f3_10 sf
( )S
f2_10 sf
(service)S
f3_10 sf
.013 .001( to obtain the location information.)J
122 207 :M
.472 .047(In practice, such services are often designed as a part of a single 'name server' which)J
122 218 :M
1.02 .102(becomes responsible for mapping user supplied names of objects to their locations)J
122 229 :M
.125 .012(\(indeed, this is the approach adopted in the current version of )J
f2_10 sf
.041(Arjuna)A
f3_10 sf
.172 .017(\). However, these)J
122 240 :M
.629 .063(two services provide logically distinct functions related to applications. Whereas the)J
122 251 :M
.773 .077(object name to UID mappings maintained by the naming service are expected to be)J
122 262 :M
.942 .094(static, the UID to location mappings maintained by the binding service can change)J
122 273 :M
1.015 .101(dynamically in a system supporting migration and replication. Once an application)J
122 284 :M
.611 .061(program \(client\) has obtained the location information about an object it can request)J
122 295 :M
1.4 .14(the relevant node to establish a connection \(binding\) to the server managing that)J
122 306 :M
.072 .007(object. The typical structure of an application level program is shown below:)J
259 317 :M
f2_10 sf
-.28(<create bindings>;)A
196 328 :M
.03 .003( <invoke operations from within atomic actions>;)J
260 339 :M
-.169( <break bindings>)A
122 350 :M
f3_10 sf
.021 .002(In our model, bindings are not stable \(they do not survive the real or suspected crash of)J
122 361 :M
1.27 .127(the client or server\). Bindings to servers are created as objects enter scope in the)J
122 372 :M
.059 .006(application program. If some bound server subsequently crashes \(or gets disconnected\))J
122 383 :M
.728 .073(then the corresponding binding is broken and not repaired within the lifetime of the)J
122 394 :M
.515 .052(program \(even if the server node is functioning again\); all the surviving bindings are)J
122 405 :M
.122 .012(explicitly broken as objects go out of the scope of the application program.)J
122 416 :M
.354 .035(The passive representation of an object in the object store may differ from its volatile)J
122 427 :M
.312 .031(store representation \(e.g., pointers may be represented as offsets or UIDs\). Our model)J
122 438 :M
.771 .077(assumes that an object is responsible for providing the relevant state transformation)J
122 449 :M
.814 .081(operations that enable its state to be stored and retrieved from the object store. The)J
122 460 :M
1.026 .103(server of an activated object can then use these operations during abort or commit)J
122 471 :M
2.223 .222(processing. Further, we assume that each object is responsible for performing)J
122 482 :M
-.015(appropriate concurrency control to ensure serialisability of atomic actions. In effect this)A
122 493 :M
.097 .01(means that each object will have a concurrency control object associated with it. In the)J
122 504 :M
1.168 .117(case of locking, each method of an object will have an operation for acquiring, if)J
122 515 :M
-.055(necessary, an appropriate lock from the associated lock manager object before accessing)A
122 526 :M
-.038(the object's state; the locks are released when the commit/abort operations are executed.)A
122 537 :M
.748 .075(We can now identify the main modules of )J
f2_10 sf
.244(Arjuna)A
f3_10 sf
.754 .075( and the services they provide for)J
122 548 :M
.222 .022(supporting persistent objects.)J
131 569 :M
-.217(\(i\))A
158 569 :M
f2_10 sf
3.063 .306(Atomic Action module:)J
f3_10 sf
2.378 .238( provides atomic action support to application)J
158 580 :M
1.334 .133(programs in the form of operations for starting, committing and aborting)J
158 591 :M
.078 .008(atomic actions;)J
131 612 :M
-.071(\(ii\))A
158 612 :M
f2_10 sf
.905 .09(RPC module:)J
f3_10 sf
.605 .06( provides facilities to clients for connecting \(disconnecting\) to)J
158 623 :M
-.01(object servers and invoking operations on objects;)A
131 644 :M
(\(iii\))S
158 644 :M
f2_10 sf
.522 .052(Naming and Binding module:)J
f3_10 sf
.408 .041( provides a mapping from user-given names of)J
158 655 :M
.729 .073(objects to UIDs, and a mapping from UIDs to location information such as)J
158 666 :M
-.028(the identity of the host where the server for the object can be made available;)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(nsks; page: 6 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
131 153 :M
f3_10 sf
-.145(\(iv\))A
158 153 :M
f2_10 sf
.894 .089(Object Store module:)J
f3_10 sf
.666 .067( provides a stable storage repository for objects; these)J
158 164 :M
-.051(objects are assigned unique identifiers \(UIDs\) for naming them.)A
122 175 :M
1.465 .146(The relationship amongst these modules is depicted in Fig. 1. Every node in the)J
122 186 :M
.191 .019(system will provide RPC and Atomic Action modules. Any node capable of providing)J
122 197 :M
.544 .054(stable object storage will in addition contain an Object Store module. Nodes without)J
122 208 :M
.247 .025(stable storage may access these services via their local RPC module. The Naming and)J
122 219 :M
.481 .048(Binding module is not necessary on every node since its services can also be utilised)J
122 230 :M
1.084 .108(through the services provided by the RPC module. This system structure is highly)J
122 241 :M
.807 .081(modular: by encapsulating the properties of persistence, recoverability, shareability,)J
122 252 :M
.327 .033(serialisability and failure atomicity in an Atomic Action module and defining narrow,)J
122 263 :M
.18 .018(well-defined interfaces to the supporting environment, we achieve a significant degree)J
122 274 :M
(of modularity as well as portability for )S
f2_10 sf
(Arjuna)S
f3_10 sf
( [Shrivastava94].)S
.5 G
124 286 388 224 rC
-12 250 -1 1 -10 250 1 -12 249 @a
-11 250 :M
% P2-v15 - Copyright 1988 Silicon Beach Software, Inc.
userdict/md known{currentdict md eq}{false}ifelse{bu}if currentdict/P2_d known not{/P2_b{P2_d
begin}bind def/P2_d 27 dict def userdict/md known{currentdict md eq}{false}ifelse P2_b dup dup
/mk exch def{md/pat known md/sg known md/gr known and and}{false}ifelse/pk exch def{md
/setTxMode known}{false}ifelse/sk exch def/b{bind def}bind def/sa{matrix currentmatrix P2_tp
concat aload pop}b/sb{matrix currentmatrix exch concat P2_tp matrix invertmatrix concat aload
pop}b/se{matrix astore setmatrix}b/bb{gsave P2_tp concat newpath moveto}b/bc{curveto}b/bl
{lineto}b/bx{closepath}b/bp{gsave eofill grestore}b/bf{scale 1 setlinewidth stroke}b/be
{grestore}b/p{/gf false def}b/g{/gf true def}b g pk{/_pat/pat load def/_gr/gr load def}{/_gr
{64.0 div setgray}b}ifelse sk{/_sTM/setTxMode load def}if/gx{/tg exch def}b 0 gx/x6{av 68 gt
{false}if}b end P2_b pk end{/pat{P2_b gf{end pop sg av 68 gt{pop}if}{/_pat load end exec}
ifelse}bind def}{/pat{P2_b pop _gr end}bind def}ifelse P2_b sk end{/setTxMode{P2_b/_sTM load
end exec P2_b tg/_gr load end exec}bind def}{/setTxMode{pop P2_b tg/_gr load end exec}bind
def}ifelse}if
124 285 :M
36 36 1 index neg 1 index neg matrix translate 3 1 roll
currentpoint 2 copy matrix translate 6 1 roll
512 510 :M
424 261 currentpoint 1 index 6 index sub 4 index 9 index sub div
1 index 6 index sub 4 index 9 index sub div
matrix scale 11 1 roll
[ 9 1 roll cleartomark
3 2 roll matrix concatmatrix
exch matrix concatmatrix
/P2_tp exch def P2_b mk end{bn}if
-12 250 -1 1 -10 250 1 -12 249 @a
.75 G
139 474 371 36 rF
0 G
139.5 474.5 370 35 rS
.75 G
172 438 127 28 rF
0 G
172.5 438.5 126 27 rS
.75 G
369 428 97 28 rF
0 G
369.5 428.5 96 27 rS
.75 G
205 351 235 55 rF
0 G
205.5 351.5 234 54 rS
.75 G
91 28 178.5 311 @j
0 G
90 27 178.5 311 @f
178 325 -1 1 260 351 1 178 324 @a
-1 -1 386 352 1 1 448 322 @b
-1 -1 476 475 1 1 475 323 @b
-1 -1 239 475 1 1 238 465 @b
-1 -1 424 474 1 1 423 455 @b
-1 -1 241 438 1 1 322 405 @b
394 406 -1 1 419 428 1 394 405 @a
394 405 :M
P2_b 0 gx x6 end 1 setTxMode
124 286 388 29 rC
152 312 :M
f3_12 sf
-.265(Application)A
gR
.75 G
gS 124 286 388 224 rC
91 28 285.5 310 @j
0 G
90 27 285.5 310 @f
-1 -1 287 352 1 1 286 324 @b
.75 G
91 28 466.5 310 @j
0 G
90 27 466.5 310 @f
286 324 :M
P2_b 0 gx x6 end 1 setTxMode
124 286 388 29 rC
258 312 :M
f3_12 sf
-.265(Application)A
312 312 :M
P2_b 0 gx x6 end 1 setTxMode
438 312 :M
-.265(Application)A
492 312 :M
P2_b 0 gx x6 end 1 setTxMode
gR
gS 124 286 388 96 rC
266 379 :M
0 G
f3_12 sf
-.23(Object and Action Module)A
389 379 :M
P2_b 0 gx x6 end 1 setTxMode
gR
gS 124 286 388 173 rC
224 456 :M
0 G
f3_12 sf
.161(RPC)A
247 456 :M
P2_b 0 gx x6 end 1 setTxMode
gR
gS 124 286 388 224 rC
390 445 :M
0 G
f3_12 sf
-.21(Object Store)A
448 445 :M
P2_b 0 gx x6 end 1 setTxMode
124 286 388 211 rC
277 494 :M
-.154(Operating System)A
gR
gS 124 286 388 224 rC
124 357 70 42 rF
0 G
124.5 357.5 69 41 rS
361 494 :M
P2_b 0 gx x6 end 1 setTxMode
139 379 :M
f3_12 sf
.122 .012(Naming,  )J
139 391 :M
-.112(Binding)A
193 377 -1 1 206 376 1 193 376 @a
193 376 :M
P2_b 0 gx x6 end 1 setTxMode
124 286 388 33 rC
363 312 :M
f6_24 sf
.098(...)A
gR
gS 13 12 568 818 rC
221 549 :M
0 G
f0_10 sf
3.046 .305(Fig. 1: Components of )J
f1_10 sf
1.148(Arjuna)A
122 571 :M
f3_10 sf
1.406 .141(We will now use a simple program to illustrate how these modules interact. The)J
122 582 :M
.759 .076(program shown below is accessing two existing persistent objects, )J
f9_10 sf
.265(A)A
f3_10 sf
.595 .059(, an instance of)J
122 593 :M
3.003 .3(class )J
f9_10 sf
1.314(O1)A
f3_10 sf
1.703 .17( and )J
f9_10 sf
1.314(B)A
f3_10 sf
2.549 .255(, an instance of class )J
f9_10 sf
1.314(O2)A
f3_10 sf
1.387 .139(. In )J
f2_10 sf
1.014(Arjuna)A
f3_10 sf
3.709 .371( a primitive operation)J
122 604 :M
f9_10 sf
.139(initiate\(...\))A
f9_9 sf
.125(,)A
f3_10 sf
.311 .031( provided by the RPC module is used for binding to an object. A)J
122 615 :M
1.909 .191(complementary operation, called )J
f9_10 sf
.531(terminate\(..\))A
f3_10 sf
1.234 .123(, is available for breaking a)J
122 626 :M
.503 .05(binding. Clients and servers have communication identifiers, CIDs \(UNIX sockets in)J
122 637 :M
.259 .026(the current implementation\), for sending and receiving messages. The RPC module of)J
122 648 :M
1.5 .15(each node has a connection manager process that is responsible for creating and)J
122 659 :M
1.178 .118(terminating bindings to local servers. The )J
f2_10 sf
.332(Arjuna)A
f3_10 sf
1.155 .115( stub generation system for C++)J
122 670 :M
.075 .008(generates the necessary client-server stub-codes for accessing remote objects via RPCs)J
122 681 :M
.12 .012(and also generates calls on )J
f9_10 sf
.051(initiate)A
f3_10 sf
.067 .007( and )J
f9_10 sf
.051(terminate)A
f3_10 sf
.114 .011( as an object comes and goes)J
122 692 :M
.109 .011(out of the scope of a computation [Parrington90].)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(nsks; page: 7 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
1.565 .156(To bind to )J
f9_10 sf
.871(A)A
f3_10 sf
1.613 .161(, a local instance of )J
f9_10 sf
.871(O1)A
f3_10 sf
1.498 .15( called )J
f9_10 sf
.871(objct1)A
f3_10 sf
1.868 .187( is created, passing to its)J
122 164 :M
-.004(constructor an instance of the )A
f2_10 sf
(Arjuna)S
f3_10 sf
-.004( naming class )A
f11_10 sf
(Arjuna)S
f9_10 sf
(Name)S
f3_10 sf
-.004( \(the details of which)A
122 175 :M
.087 .009(need not concern us here\) called )J
f9_10 sf
.037(Name-A)A
f3_10 sf
.101 .01( suitably initialised with information about )J
f9_10 sf
(A)S
122 186 :M
f3_10 sf
.626 .063(\(e.g., its UID, the location of the server node, etc.\); this enables the client side stub-)J
122 197 :M
1.192 .119(constructor to initiate )J
f9_10 sf
.439(A)A
f3_10 sf
.918 .092(, resulting in binding to the server for )J
f9_10 sf
.439(A)A
f3_10 sf
1.14 .114(. The Object Store)J
122 208 :M
.786 .079(module of )J
f2_10 sf
.252(Arjuna)A
f3_10 sf
.757 .076( enables a server to load the latest \(committed\) state of the object)J
122 219 :M
.033 .003(from the object store of a node. The state is loaded, where necessary, as a side effect of)J
122 230 :M
.225 .022(locking the object.)J
122 252 :M
f9_9 sf
({)S
144 262 :M
-.421(O1 objct1\(Name-A\); )A
279 262 :M
-.427(/* bind to A */)A
144 272 :M
-.421(O2 objct2\(Name-B\); )A
279 272 :M
-.427(/* bind to B */)A
144 282 :M
-.424(AtomicAction act;)A
144 292 :M
-.435(act.Begin\(\);)A
279 292 :M
-.412(/* start of atomic action act */)A
144 302 :M
-.427(objct1.op\(...\);)A
144 312 :M
-.427(objct2.op\(...\);)A
279 312 :M
-.419(/* invocations ....*/)A
144 322 :M
-.465(.......)A
144 332 :M
-.443(act.End\(\);)A
279 332 :M
-.424(/* act commits */)A
122 342 :M
-.797( })A
279 342 :M
-.412(/* break bindings to A and B */)A
122 353 :M
f3_10 sf
.09 .009( Assume that the client program is executing at node )J
f9_10 sf
(N)S
0 2 rm
(1)S
0 -2 rm
f3_10 sf
.074 .007( and the server node for )J
f9_10 sf
(A)S
f3_10 sf
.049 .005( is at)J
122 365 :M
f9_10 sf
.409(N)A
0 2 rm
.409(2)A
0 -2 rm
f3_10 sf
.825 .082( \(see Fig. 2\). The client process at node )J
f9_10 sf
.409(N)A
0 2 rm
.409(1)A
0 -2 rm
f3_10 sf
0 2 rm
.155 .015( )J
0 -2 rm
.968 .097(executing the stub for )J
f9_10 sf
.409(object1)A
f3_10 sf
.521 .052( is)J
122 377 :M
.54 .054(responsible for invoking the i)J
f9_10 sf
.193(nitiate)A
f9_9 sf
.158 .016( )J
f3_10 sf
.5 .05(operation of the local RPC module in order)J
122 388 :M
-.007(to send a connection request to the connection manager at )A
f9_10 sf
(N)S
0 2 rm
(2)S
0 -2 rm
f3_10 sf
-.008(. The connection manager)A
122 400 :M
.746 .075(locates the object sever for )J
f9_10 sf
.322(A)A
f3_10 sf
.588 .059( who then returns  the CID to the client at )J
f9_10 sf
.322(N)A
0 2 rm
.322(1)A
0 -2 rm
f3_10 sf
1.045 .104(, thereby)J
122 412 :M
.79 .079(terminating the invocation of )J
f9_10 sf
.279(initiate)A
f3_10 sf
.237 .024( at )J
f9_10 sf
.279(N)A
0 2 rm
.279(1)A
0 -2 rm
f3_10 sf
.69 .069(. The storage and retrieval of object)J
122 424 :M
.483 .048(states from an object store is managed by a )J
f2_10 sf
.895 .089(state daemon.)J
f3_10 sf
.518 .052( The object server uses the)J
122 435 :M
.59 .059(state demon for retrieving the state of an object from the object store. For efficiency)J
122 446 :M
.384 .038(reasons, an object server can \(and will\) directly access the object store, bypassing the)J
122 457 :M
.043 .004(daemon if the server and the store are on the same node. However, if the object store is)J
122 468 :M
.498 .05(remote, then it must contact the state demon of the remote node managing the object)J
122 479 :M
.013(store.)A
124 491 344 177 rC
-45 452 -1 1 -43 452 1 -45 451 @a
-44 452 :M
% P2-v15 - Copyright 1988 Silicon Beach Software, Inc.
userdict/md known{currentdict md eq}{false}ifelse{bu}if currentdict/P2_d known not{/P2_b{P2_d
begin}bind def/P2_d 27 dict def userdict/md known{currentdict md eq}{false}ifelse P2_b dup dup
/mk exch def{md/pat known md/sg known md/gr known and and}{false}ifelse/pk exch def{md
/setTxMode known}{false}ifelse/sk exch def/b{bind def}bind def/sa{matrix currentmatrix P2_tp
concat aload pop}b/sb{matrix currentmatrix exch concat P2_tp matrix invertmatrix concat aload
pop}b/se{matrix astore setmatrix}b/bb{gsave P2_tp concat newpath moveto}b/bc{curveto}b/bl
{lineto}b/bx{closepath}b/bp{gsave eofill grestore}b/bf{scale 1 setlinewidth stroke}b/be
{grestore}b/p{/gf false def}b/g{/gf true def}b g pk{/_pat/pat load def/_gr/gr load def}{/_gr
{64.0 div setgray}b}ifelse sk{/_sTM/setTxMode load def}if/gx{/tg exch def}b 0 gx/x6{av 68 gt
{false}if}b end P2_b pk end{/pat{P2_b gf{end pop sg av 68 gt{pop}if}{/_pat load end exec}
ifelse}bind def}{/pat{P2_b pop _gr end}bind def}ifelse P2_b sk end{/setTxMode{P2_b/_sTM load
end exec P2_b tg/_gr load end exec}bind def}{/setTxMode{pop P2_b tg/_gr load end exec}bind
def}ifelse}if
124 491 :M
69 40 1 index neg 1 index neg matrix translate 3 1 roll
currentpoint 2 copy matrix translate 6 1 roll
468 668 :M
413 217 currentpoint 1 index 6 index sub 4 index 9 index sub div
1 index 6 index sub 4 index 9 index sub div
matrix scale 11 1 roll
[ 9 1 roll cleartomark
3 2 roll matrix concatmatrix
exch matrix concatmatrix
/P2_tp exch def P2_b mk end{bn}if
-45 452 -1 1 -43 452 1 -45 451 @a
124.5 512.5 90 126 rS
296.5 514.5 101 122 rS
-44 452 :M
P2_b 0 gx x6 end 1 setTxMode
162 582 :M
f3_12 sf
-.266(Client)A
190 582 :M
P2_b 0 gx x6 end 1 setTxMode
124 491 344 132 rC
314 620 :M
-.24(State Daemon)A
379 620 :M
P2_b 0 gx x6 end 1 setTxMode
gR
gS 124 491 344 177 rC
338 575 :M
f3_12 sf
-.331(Object )A
338 587 :M
-.062(Server)A
:a
62<8000000008000000><808080000000000000000000080808000000000000000000>fg null
:b
47 19 176.5 578.5 @j
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg null
:b
46 18 176.5 578.5 @f
62<8000000008000000><808080000000000000000000080808000000000000000000>fg null
:b
80 25 347 615.5 @j
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg null
:b
79 24 347 615.5 @f
62<8000000008000000><808080000000000000000000080808000000000000000000>fg null
:b
54 37 352 576.5 @j
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg null
:b
53 36 352 576.5 @f
:e
0 G
47 12 444 565.5 @f
47 12 444 610.5 @f
-1 -1 420 612 1 1 419 566 @b
-1 -1 468 612 1 1 467 566 @b
-.25 -.25 169.25 667.25 .25 .25 169 638 @b
-.25 -.25 349.25 666.25 .25 .25 349 637 @b
349 637 :M
P2_b 0 gx x6 end 1 setTxMode
170 508 :M
f8_12 sf
.053(N1)A
186 508 :M
P2_b 0 gx x6 end 1 setTxMode
348 510 :M
.053(N2)A
198 583 -1 1 282 582 1 198 582 @a
-1 -1 274 598 1 1 281 582 @b
281 582 :M
P2_b 0 gx x6 end 1 setTxMode
323 531 :M
f3_12 sf
-.147(Connection)A
323 543 :M
-.205(  Manager)A
:a
62<8000000008000000><808080000000000000000000080808000000000000000000>fg null
:b
88 34 349 533 @j
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg null
:b
87 33 349 533 @f
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg bk
:b
[3
3
] 0 :q
416 613 416 613 :r
[] 0 :q
416 613 :M
psb
pse
[3
3
] 0 :q
352 561 349 549 :r
[] 0 :q
349 549 :M
psb
pse
[3
3
] 0 :q
445 526 445 526 :r
[] 0 :q
445 526 :M
psb
pse
[3
3
] 0 :q
413 579 413 579 :r
[] 0 :q
413 579 :M
psb
pse
P2_b p end
52<4422008844220088><444444222222000000888888444444222222000000888888>fg bk
:b
433 584 23 18 rF
413 579 :M
P2_b g end
:e
0 G
433.5 584.5 22 17 rS
:a
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg bk
:b
[3
3
] 0 :q
465 531 465 531 :r
[] 0 :q
465 531 :M
psb
pse
:e
0 G
131 668 -1 1 391 667 1 131 667 @a
-1 -1 201 577 1 1 269 528 @b
-1 -1 257 552 1 1 269 528 @b
-1 -1 258 551 1 1 306 534 @b
-1 -1 274 598 1 1 273 597 @b
-1 -1 274 599 1 1 326 580 @b
:a
0<FFFFFFFFFFFFFFFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>fg bk
:b
[3
3
] 0 :q
349 604 355 594 :r
[] 0 :q
355 594 :M
psb
pse
[3
3
] 0 :q
433 591 387 614 :r
[] 0 :q
387 614 :M
psb
pse
:e
0 G
397 585 -1 1 420 584 1 397 584 @a
gR
gS 13 12 568 818 rC
227 691 :M
f0_10 sf
3.516 .352(Fig. 2: Accessing an Object)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(nsks; page: 8 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 164 :M
f3_10 sf
.393 .039(To manipulate objects under the control of an atomic action, the client creates a local)J
122 175 :M
.783 .078(instance of an action \()J
f9_10 sf
.335(act)A
f3_10 sf
.658 .066(\) and invokes its )J
f9_9 sf
.302(Begin)A
f3_10 sf
.769 .077( operation. The )J
f9_9 sf
.302(End)A
f3_10 sf
.863 .086( operation is)J
122 186 :M
.485 .049(responsible for committing the atomic action \(using the two-phase commit protocol\).)J
122 197 :M
.144 .014(When an object goes out of scope, it is destroyed by executing its destructor. As a part)J
122 208 :M
.68 .068(of this, the client-side destructor \(e.g., the stub destructor for )J
f9_10 sf
.278(object1)A
f3_10 sf
.698 .07(\) breaks the)J
122 219 :M
.008 .001(binding with the object server at the remote node \(using the operation )J
f9_10 sf
(terminate)S
f3_10 sf
(\).)S
122 230 :M
.44 .044(The RPC has the following semantics: a normal termination will indicate that a reply)J
122 241 :M
.389 .039(message containing the results of the execution has been received from the server; an)J
122 252 :M
.408 .041(exceptional return will indicate that no such message was received, and the operation)J
122 263 :M
1.163 .116(may or may not have been executed. Once the execution of an action begins, any)J
122 274 :M
1.556 .156(failures preventing forward progress of the computation lead to the action being)J
122 285 :M
.889 .089(aborted, and any updates to objects undone. However, as establishing and breaking)J
122 296 :M
1.407 .141(bindings can be performed outside of the control of any application level atomic)J
122 307 :M
.574 .057(actions, it is instructive to enquire how any clean-up is performed if client, server or)J
122 318 :M
.293 .029(partition failures occur before \(after\) an application level action has started \(finished\).)J
122 329 :M
.191 .019(The simple case is the crash of a server node: this has the automatic effect of breaking)J
122 340 :M
.597 .06(the connection with all of its clients; if a client subsequently enters an atomic action)J
122 351 :M
.114 .011(and invokes an operation in the server, the invocation will return exceptionally and the)J
122 362 :M
.267 .027(action will be aborted; on the other hand, if the client is in the process of breaking the)J
122 373 :M
.851 .085(bindings then this has occurred already. More difficult is the case of a client crash.)J
122 384 :M
.318 .032(Suppose the client crashes after binding to a server. Then explicit steps must be taken)J
122 395 :M
.69 .069(to remove any state information kept for the )J
f2_10 sf
.231(orphaned)A
f3_10 sf
.698 .07( bindings; this requires that a)J
122 406 :M
.14 .014(server node must have a mechanism for breaking the binding if it suspects the crash of)J
122 417 :M
2.932 .293(a client. This mechanism will also cope with a partition that prevents any)J
122 428 :M
.398 .04(communication between a client and a server. The )J
f2_10 sf
.117(Arjuna)A
f3_10 sf
.353 .035( RPC level facilities for the)J
122 439 :M
1.835 .183(detection and killing of orphans [Panzieri88] is responsible for such a cleanup,)J
122 450 :M
1.431 .143(ensuring at the same time that an orphaned server \(a server with no bindings\) is)J
122 461 :M
-.126(terminated.)A
122 472 :M
.974 .097(The principal classes which make up the class hierarchy of )J
f2_10 sf
.302(Arjuna)A
f3_10 sf
1.228 .123( Atomic Action)J
122 483 :M
-.14(module are depicted below.)A
122 505 :M
f9_9 sf
-.435(StateManager)A
257 505 :M
-.41(// Naming, persistence and recovery)A
144 515 :M
-.439(LockManager)A
257 515 :M
-.409(// Two-phase locking concurrency control)A
167 525 :M
f11_9 sf
-.42(User-Defined Classes)A
144 535 :M
f9_9 sf
-.532(Lock)A
257 535 :M
-.409(// Standard lock type for reading/writing)A
144 545 :M
-.435(AtomicAction)A
257 545 :M
-.41(// atomic action control abstraction)A
144 555 :M
-.429(AbstractRecord)A
257 555 :M
-.415(// Important utility class)A
167 565 :M
-.429(RecoveryRecord)A
257 565 :M
-.415(// handles object recovery)A
167 575 :M
-.443(LockRecord)A
257 575 :M
-.415(// handles object locking)A
167 585 :M
-.443(RecordList)A
257 585 :M
-.422(// Intentions list)A
167 595 :M
-.413(other management record types)A
122 606 :M
f3_10 sf
3.443 .344(To make use of atomic actions in an application, instances of the class,)J
122 617 :M
f9_10 sf
.042(AtomicAction)A
f3_10 sf
.107 .011( must be declared by the programmer in the application as illustrated)J
122 628 :M
.461 .046(earlier; the operations this class provides \()J
f9_10 sf
.172(Begin)A
f3_10 sf
.119 .012(, )J
f9_10 sf
.172(Abort)A
f3_10 sf
.119 .012(, )J
f9_10 sf
.172(End)A
f3_10 sf
.338 .034(\) can then be used to)J
122 639 :M
.295 .03(structure atomic actions \(including nested actions\). The only objects controlled by the)J
122 650 :M
.314 .031(resulting atomic actions are those objects which are either instances of )J
f2_10 sf
.094(Arjuna)A
f3_10 sf
.36 .036( classes)J
122 661 :M
-.021(or are user-defined classes derived from )A
f9_10 sf
-.031(LockManager)A
f3_10 sf
-.023( and hence are members of the)A
122 672 :M
2.571 .257(hierarchy shown above. Most )J
f2_10 sf
.67(Arjuna)A
f3_10 sf
2.076 .208( classes are derived from the base class)J
122 683 :M
f9_10 sf
.714(StateManager)A
f3_10 sf
2.213 .221(, which provides primitive facilities necessary for managing)J
122 694 :M
-.046(persistent and recoverable objects. These facilities include support for the activation and)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(nsks; page: 9 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
.524 .052(de-activation of objects, and state-based object recovery. Thus, instances of the class)J
122 164 :M
f9_10 sf
.751(StateManager)A
f3_10 sf
1.733 .173( are the principal users of the object store service. The class)J
122 175 :M
f9_10 sf
.102(LockManager)A
f3_10 sf
.195 .02( uses the facilities of )J
f9_10 sf
.102(StateManager)A
f3_10 sf
.302 .03( and provides the concurrency)J
122 186 :M
.515 .051(control \(two-phase locking in the current implementation\) required for implementing)J
122 197 :M
1.066 .107(the serialisability property of atomic actions. The implementation of atomic action)J
122 208 :M
-.039(facilities for recovery, persistence management and concurrency control is supported by)A
122 219 :M
.456 .046(a collection of object classes derived from the class )J
f9_10 sf
.189(AbstractRecord)A
f3_10 sf
.357 .036( which is in)J
122 230 :M
.771 .077(turn derived from )J
f9_10 sf
.304(StateManager)A
f3_10 sf
.716 .072(. For example, instances of )J
f9_10 sf
.304(LockRecord)A
f3_10 sf
.66 .066( and)J
122 241 :M
f9_10 sf
.201(RecoveryRecord)A
f3_10 sf
.533 .053( record recovery information for )J
f9_9 sf
.181(Lock)A
f3_10 sf
.623 .062( and user-defined objects)J
122 252 :M
.192 .019(respectively. The )J
f9_10 sf
.061(AtomicAction)A
f3_10 sf
.159 .016( class manages instances of these classes \(using an)J
122 263 :M
.527 .053(instance of the class )J
f9_10 sf
.237(RecordList)A
f3_10 sf
.547 .055( which corresponds to the )J
f2_10 sf
.856 .086(intentions list)J
f3_10 sf
.349 .035(  used in)J
122 274 :M
-.012(traditional transaction systems\) and is responsible for performing aborts and commits.)A
122 308 :M
f0_14 sf
2.5(4.)A
149 308 :M
2.164 .216(A Look at Some )J
f1_14 sf
.822(Arjuna)A
f0_14 sf
4.291 .429( Applications)J
122 331 :M
f2_10 sf
.085(Arjuna)A
f3_10 sf
.23 .023( has proved to be a useful research tool. It has shown that it is possible to build)J
122 342 :M
2.001 .2(a viable reliable distributed applications toolkit without modifying language or)J
122 353 :M
.764 .076(underlying system. A major benefit of this approach is that application builders can)J
122 364 :M
.674 .067(use )J
f2_10 sf
.276(Arjuna)A
f3_10 sf
.936 .094( in conjunction with other existing tools. For example, to construct user)J
122 375 :M
-.012(interface to )A
f2_10 sf
-.015(Arjuna)A
f3_10 sf
-.013( applications, we often make use of the publicly available Interviews)A
122 386 :M
.81 .081(Toolkit. )J
f2_10 sf
.795 .08(Arjuna )J
f3_10 sf
.725 .072(has been used regularly by us for teaching distributed computing to)J
122 397 :M
.011 .001(undergraduate and graduate students. In addition, it has been used for a variety of other)J
122 408 :M
.013 .001(purposes. We briefly describe some of the uses to which )J
f2_10 sf
(Arjuna)S
f3_10 sf
( has been put.)S
122 419 :M
f2_10 sf
1.781 .178(\(i\) Object oriented distributed database system)J
f3_10 sf
.404 .04(: )J
f2_10 sf
.425(Arjuna)A
f3_10 sf
1.224 .122( has used for building an)J
122 430 :M
-.02(experimental distributed database system called )A
f2_10 sf
-.018(Stabilis)A
f3_10 sf
-.02( [Buzato92]. Stabilis in turn has)A
122 441 :M
(been used in one experiment as an information base for a run-time management system)S
122 452 :M
-.003(for distributed applications [Buzato94] and in an another experiment as a repository for)A
122 463 :M
-.039(Internet information discovery tool [Calsvara95].)A
122 474 :M
f2_10 sf
.594 .059(\(ii\) A Student Registration system)J
f3_10 sf
.564 .056(: The management information services unit of our)J
122 485 :M
2.389 .239(University, responsible for computerisation of University's administration, has)J
122 496 :M
.634 .063(collaborated with us for building a student registration system [Snow95]. Previously)J
122 507 :M
.961 .096(all students went to a central registration office for registering themselves with the)J
122 518 :M
2.003 .2(University. In the new system, admission and registration is carried out at the)J
122 529 :M
1.269 .127(departments of the students. The system has a very high availability requirement:)J
122 540 :M
1.115 .112(admissions tutors and secretaries )J
f2_10 sf
.291(must)A
f3_10 sf
.875 .088( be able to access and create student records)J
122 551 :M
.799 .08(\(particularly at the start of a new academic year when new students arrive\). )J
f2_10 sf
.303(Arjuna)A
122 562 :M
f3_10 sf
.49 .049(offers the right set of facilities for this application, enabling the University to exploit)J
122 573 :M
-.029(the existing campus network and workstation clusters for providing transactional access)A
122 584 :M
1.024 .102(to data; further, this data can be made highly available by replication over distinct)J
122 595 :M
-.047(workstations, thereby obviating the need for any specialised fault tolerant hardware.)A
122 606 :M
.423 .042(The system configuration is shown in fig. 3. It uses a number of \(currently five\) high)J
122 617 :M
.742 .074(performance workstations \(the processing cluster\) that together serve about hundred)J
122 628 :M
(user terminals scattered around the campus. A triplicated objectstore acts as the student)S
122 639 :M
-.014(database, storing information about students, courses on offer etc.)A
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(nsks; page: 10 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 144 357 154 rC
146 255 -1 1 479 254 1 146 254 @a
.75 G
152 213 21 14 rF
0 G
152.5 213.5 20 13 rS
.75 G
183 213 21 14 rF
0 G
183.5 213.5 20 13 rS
.75 G
230 213 21 14 rF
0 G
230.5 213.5 20 13 rS
.75 G
212 273 21 14 rF
0 G
212.5 273.5 20 13 rS
.75 G
245 273 21 14 rF
0 G
245.5 273.5 20 13 rS
.75 G
289 273 21 14 rF
0 G
289.5 273.5 20 13 rS
.75 G
351 214 21 14 rF
0 G
351.5 214.5 20 13 rS
.75 G
384 214 21 14 rF
0 G
384.5 214.5 20 13 rS
.75 G
417 214 21 14 rF
0 G
417.5 214.5 20 13 rS
-1 -1 164 255 1 1 163 226 @b
-1 -1 195 255 1 1 194 226 @b
-1 -1 242 255 1 1 241 226 @b
-1 -1 363 255 1 1 362 227 @b
-1 -1 396 255 1 1 395 227 @b
-1 -1 429 255 1 1 428 227 @b
-1 -1 224 274 1 1 223 254 @b
-1 -1 257 274 1 1 256 254 @b
-1 -1 301 274 1 1 300 254 @b
127 31 261 281 @f
:a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
421 194 432 209 3 @q
:e
0 G
421.5 194.5 431.5 208.5 2.5 @s
:a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
388 194 399 209 3 @q
:e
0 G
388.5 194.5 398.5 208.5 2.5 @s
:a
32<AAAAAAAAAAAAAAAA><AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>fg bk
:b
355 194 366 209 3 @q
:e
0 G
355.5 194.5 365.5 208.5 2.5 @s
-1 -1 361 215 1 1 360 208 @b
-1 -1 394 216 1 1 393 207 @b
-1 -1 427 215 1 1 426 208 @b
140 65 396.5 213 @f
180 285 :M
f3_12 sf
(g1)S
208 222 :M
(....)S
272 282 :M
(...)S
151 202 :M
-.082(User terminals \(PCs/MACs\))A
336 179 :M
-.182(Objectstore cluster)A
328 286 :M
-.057(Processing cluster)A
428 266 :M
-.066(Campus)A
428 278 :M
(Network)S
313 224 :M
f3_10 sf
(g2)S
gR
gS 13 12 568 818 rC
222 318 :M
f0_10 sf
.722 .072(Fig. 3: )J
f3_10 sf
1.609 .161(Student registration system)J
122 340 :M
.166 .017(A processing cluster machine serves a subset of the user terminals. To ensure integrity)J
122 351 :M
1.297 .13(of the stored student data, a user \(admissions tutor\) accesses and manipulates the)J
122 362 :M
1.413 .141(student data under the control of atomic transactions. A user will open a session)J
122 373 :M
1.526 .153(connection with a cluster machine, initiate a few transactions and then close the)J
122 384 :M
.092 .009(session. If a cluster machine crashes, then any ongoing transactions using this machine)J
122 395 :M
.503 .05(are aborted and the relevant sessions are broken; the terminal handling software then)J
122 406 :M
-.01(opens a fresh connection with a new cluster machine.)A
122 417 :M
f2_10 sf
.435 .044(\(iii\) Provision of atomic transactions to an existing programming system)J
f3_10 sf
.386 .039(: A software)J
122 428 :M
.492 .049(company that specialises in providing data management software to companies in oil)J
122 439 :M
.218 .022(and financial sectors is integrating )J
f2_10 sf
.063(Arjuna)A
f3_10 sf
.209 .021( class libraries into its own software product)J
122 450 :M
.475 .047(for obtaining atomic action functionality. This exercise involves using essentially the)J
122 461 :M
.456 .046(atomic action module and replacing the default RPC mechanism of )J
f2_10 sf
.128(Arjuna)A
f3_10 sf
.282 .028( by that of)J
122 472 :M
.258 .026(DCE and the existing object store by a commercial object store that is used within the)J
122 483 :M
-.052(company's product.)A
122 494 :M
f2_10 sf
-.03(\(iv\) Fault-tolerant Parallel programming over network of workstations)A
f3_10 sf
-.033(: Use of network)A
122 505 :M
.268 .027(of workstations for obtaining speedups by running parallel versions of programs \(e.g.,)J
122 516 :M
1.801 .18(floating point matrix calculations, computational fluid dynamics calculations\) is)J
122 527 :M
1.965 .197(gaining widespread popularity amongst scientists. Many such scientific parallel)J
122 538 :M
.625 .062(programming applications need to manage large quantities of data \(requiring several)J
122 549 :M
.811 .081(megabytes of storage\) and parallel calculations may last a long time \(from hours to)J
122 560 :M
.357 .036(days\). Such applications could benefit from adequate support for data persistence and)J
122 571 :M
.434 .043(fault-tolerance. We have explored the use of )J
f2_10 sf
.128(Arjuna)A
f3_10 sf
.389 .039( for this type of applications, and)J
122 582 :M
-.01(have been encouraged from our initial results [Smith95].)A
122 616 :M
f0_14 sf
2.78 .278(5. An Assessment of )J
f1_14 sf
1.124(Arjuna)A
122 639 :M
f3_10 sf
.184 .018(We now take a critical look at )J
f2_10 sf
.07(Arjuna)A
f3_10 sf
.247 .025(, examining in turn its modularity, integration of)J
122 650 :M
-.031(mechanism and flexibility features.)A
122 661 :M
f1_10 sf
.77(Modularity)A
f0_10 sf
.811 .081(: )J
f3_10 sf
3.383 .338(By encapsulating the properties of persistence, recoverability,)J
122 672 :M
1.317 .132(shareability, serialisability and failure atomicity in an Atomic Action module and)J
122 683 :M
.623 .062(defining narrow, well-defined interfaces to the supporting environment, )J
f2_10 sf
.152(Arjuna)A
f3_10 sf
.487 .049( does)J
122 694 :M
.036 .004(achieve a significant degree of modularity. The structure of )J
f2_10 sf
.011(Arjuna)A
f3_10 sf
.031 .003( makes it is possible)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(nsks; page: 11 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
.154 .015(to replace default RPC, Object Store, Naming and Binding modules by the modules of)J
122 164 :M
.983 .098(the host system. This makes the system quite portable [Shrivastava94]. One of our)J
122 175 :M
.576 .058(ports has been on to the ANSAware distributed computing platform [ANSA91]. The)J
122 186 :M
.624 .062(platform provides RPC, object servers \(known as )J
f2_10 sf
.159(capsules)A
f3_10 sf
.602 .06(\) and naming and binding)J
122 197 :M
.924 .092(service via a subsystem known as the )J
f2_10 sf
.301(Trader)A
f3_10 sf
1.014 .101(. This porting has been performed by)J
122 208 :M
1.693 .169(mapping the RPC operations \()J
f9_10 sf
.57(initiate)A
f3_10 sf
.396 .04(, )J
f9_10 sf
.57(terminate)A
f3_10 sf
.739 .074( and )J
f9_10 sf
.57(call)A
f3_10 sf
1.447 .145(\) onto those)J
122 219 :M
2.775 .277(provided by ANSAware. Application \(iii\) mentioned above actually requires)J
122 230 :M
.127 .013(simultaneously discarding all of the three default modules of )J
f2_10 sf
.036(Arjuna)A
f3_10 sf
.099 .01( in favour of those)J
122 241 :M
.17 .017(of the host environment. We have performed a feasibility study to ascertain that this is)J
122 252 :M
-.095(indeed possible.)A
122 263 :M
.221 .022(The current design for )J
f2_10 sf
.07(Arjuna)A
f3_10 sf
.233 .023(, while elegantly sorting out the functions of the Atomic)J
122 274 :M
.429 .043(Action module into classes, nevertheless fails to cleanly separate the interfaces to the)J
122 285 :M
.663 .066(supporting environment. Some components are responsible for too many things. For)J
122 296 :M
.256 .026(example, the )J
f9_10 sf
.095(StateManager)A
f3_10 sf
.237 .024( class maintains not only state information but also the)J
122 307 :M
.065 .007(unique identifier of the object. The present RPC facility, while supporting the interface)J
122 318 :M
-.043(discussed, is also responsible for the creation of object servers, and failure detection and)A
122 329 :M
1.338 .134(cleanup. These three facilities should have been separated. Notwithstanding these)J
122 340 :M
.118 .012(observations, we believe that on the whole, )J
f2_10 sf
.137 .014(Arjuna )J
f3_10 sf
.12 .012(has met the goal of modularity.)J
122 351 :M
f1_10 sf
2.796 .28(Integration of Mechanisms)J
f0_10 sf
.544 .054(: )J
f3_10 sf
2.377 .238(Although )J
f2_10 sf
.519(Arjuna)A
f3_10 sf
1.556 .156( does make it relatively easy for)J
122 362 :M
1.454 .145(programmers to build distributed applications using objects and actions, in many)J
122 373 :M
.68 .068(respects the programmer still has to be aware of several additional complexities, for)J
122 384 :M
1.297 .13(example, writing )J
f9_10 sf
.41(save_state)A
f3_10 sf
.531 .053( and )J
f9_10 sf
2.39 .239(restore_state )J
f3_10 sf
1.199 .12(routines and setting the)J
122 395 :M
.243 .024(appropriate locks in operations. Experience has shown that users have not found these)J
122 406 :M
1.71 .171(complexities as insurmountable problems. These latter problems can be actually)J
122 417 :M
1.477 .148(alleviated by enhancement of the stub generation system. Furthermore, sufficient)J
122 428 :M
.228 .023(syntactic information already exists in the declaration of a member function \(so called)J
122 439 :M
f2_10 sf
.364 .036(const member functions)J
f3_10 sf
.221 .022(\) to determine whether a read or write lock is needed. Thus by)J
122 450 :M
1.715 .172(relatively minor enhancements the programmer's burden can be reduced further,)J
122 461 :M
.929 .093(provided that the default behaviour provided by the system is acceptable. If such a)J
122 472 :M
.219 .022(scheme is implemented, mechanisms to suppress it will also be needed for those cases)J
122 483 :M
-.054(where the programmer wishes to override the default actions.)A
122 494 :M
f1_10 sf
.454(Flexibility)A
f0_10 sf
.574 .057(: )J
f3_10 sf
2.003 .2(We have learned our)J
f0_10 sf
.269 .027( )J
f3_10 sf
1.836 .184(biggest lessons in the area of flexible system)J
122 505 :M
.803 .08(structuring. When we began the design of )J
f2_10 sf
.244(Arjuna)A
f3_10 sf
.744 .074(, we took 'flexibility' to mean that)J
122 516 :M
(application builders should be able to perform application specific enhancements to the)S
122 527 :M
f2_10 sf
-.039(class hierarchy)A
f3_10 sf
-.039(, permitting for example, type-specific concurrency and recovery control)A
122 538 :M
.542 .054(to be easily produced from the existing default ones. Although the single inheritance)J
122 549 :M
.891 .089(hierarchy is somewhat constraining in what is achievable, )J
f2_10 sf
.244(Arjuna)A
f3_10 sf
.804 .08( does permit such)J
122 560 :M
1.862 .186(enhancements to be performed. Experience from helping users building )J
f2_10 sf
.57(Arjuna)A
122 571 :M
f3_10 sf
1.53 .153(applications has taught us that this is however not sufficient; serious application)J
122 582 :M
.499 .05(builders need )J
f2_10 sf
.781 .078(controlled access)J
f3_10 sf
.393 .039(  to the deepest internals of the system! The reason in)J
122 593 :M
1.534 .153(most cases is for tuning the system behaviour for obtaining higher performance;)J
122 604 :M
2.127 .213(sometimes this is also because users have some system structuring constraints)J
122 615 :M
.871 .087(imposed by existing applications \(e.g., where to place object servers and a limit on)J
122 626 :M
.455 .046(their numbers\), that can only be satisfied by modifications to the internals of )J
f2_10 sf
.144(Arjuna)A
f3_10 sf
(.)S
122 637 :M
(We give a few representative examples which we hope will be of interest to the readers)S
122 648 :M
.158 .016(of this paper.)J
131 669 :M
f2_10 sf
-.217(\(i\))A
158 669 :M
2.035 .204(Transport mechanism for RPC)J
f3_10 sf
1.537 .154(: For efficiency reasons, the default RPC)J
158 680 :M
3.969 .397(mechanism of )J
f2_10 sf
1.03(Arjuna)A
f3_10 sf
3.768 .377(, like several other RPC mechanisms, uses)J
158 691 :M
.339 .034(connectionless datagrams \(UDP\) for transporting RPC messages, performing)J
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(nsks; page: 12 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
158 153 :M
f3_10 sf
.018 .002(its own fragmentation and reassembly of packets. This has proved adequate in)J
158 164 :M
2.053 .205(all the applications we have encountered, except application \(iv\). This)J
158 175 :M
.516 .052(application frequently requires RPC messages to carry several megabytes of)J
158 186 :M
-.021(data, for which the existing protocol proved inadequate \(as it was not designed)A
158 197 :M
2.158 .216(for bulk data transfer\). We changed )J
f2_10 sf
.663(Arjuna)A
f3_10 sf
1.528 .153( RPC to enable it to use a)J
158 208 :M
.17 .017(connection based transport layer \(TCP\) where needed. What is required is for)J
158 219 :M
.831 .083(RPC to be able to choose the most appropriate transport mechanism at run)J
158 230 :M
.182(time.)A
131 251 :M
-.071(\(ii\))A
158 251 :M
f2_10 sf
.98 .098(Server management)J
f3_10 sf
.146 .015(: )J
f2_10 sf
.154(Arjuna)A
f3_10 sf
.554 .055( employs a simple scheme for accessing remote)J
158 262 :M
.362 .036(objects: clients access remote objects through independent servers. Although)J
158 273 :M
.232 .023(we knew that this will not be an adequate policy under all circumstances, our)J
158 284 :M
.413 .041(experience has indicated that no single policy is adequate. Most applications)J
158 295 :M
.934 .093(require some control over object to server binding, including enabling and)J
158 306 :M
1.721 .172(disabling of caching of objects at clients. For example, application \(iii\))J
158 317 :M
.677 .068(requires caching of )J
f2_10 sf
.185(read-only)A
f3_10 sf
.629 .063( objects; we have met this by making specific)J
158 328 :M
.198 .02(changes to )J
f2_10 sf
.063(Arjuna)A
f3_10 sf
.248 .025(. The database application, Stabilis, routinely handles large)J
158 339 :M
.229 .023(numbers of objects, and therefore for performance reasons needs to minimise)J
158 350 :M
2.988 .299(the number of servers. The designers of Stablis have done this by)J
158 361 :M
1.345 .134(implementing their own server multiplexing scheme, a complication they)J
158 372 :M
-.084(would have preferred the system to handle.)A
131 393 :M
(\(iii\))S
158 393 :M
f2_10 sf
-.061(Concurrency control)A
f3_10 sf
-.054(: The current design of )A
f2_10 sf
-.064(Arjuna)A
f3_10 sf
-.057( constraints the concurrency)A
158 404 :M
1.242 .124(controller of an object to be co-located with the servers. A more flexible)J
158 415 :M
.925 .093(scheme would permit the concurrency controller of an object to be remote)J
158 426 :M
.655 .066(from the activated copies of the object. Such a scheme can then be used by)J
158 437 :M
.077 .008(clients of application \(iii\) for more flexible form of object caching, permitting)J
158 448 :M
.119 .012(multiple copies of an object for read access and a single copy for write access)J
158 459 :M
.775 .078(that is allowed to invalidate the remaining copies. In the absence of such a)J
158 470 :M
1.573 .157(facility, the builders of Stabilis database system implemented there own)J
158 481 :M
.009 .001(object caching scheme on top of )J
f2_10 sf
(Arjuna)S
f3_10 sf
(.)S
122 515 :M
f0_14 sf
3.694 .369(6. Towards Flexible System Structuring)J
122 538 :M
f3_10 sf
.1 .01(We are in the process of redesigning )J
f2_10 sf
.033(Arjuna)A
f3_10 sf
.108 .011(. In light of the experience reported above,)J
122 549 :M
1.454 .145(we describe here how we intend to restructure the system. The discussion in the)J
122 560 :M
2.615 .262(previous two sections indicates that users have managed to build non-trivial)J
122 571 :M
1.115 .111(applications using )J
f2_10 sf
.268(Arjuna)A
f3_10 sf
1.145 .114(. Occasionally, meeting their requirements have required)J
122 582 :M
.337 .034(making changes to )J
f2_10 sf
.097(Arjuna)A
f3_10 sf
.257 .026(. It is an indication of the sound design of the system that it)J
122 593 :M
2.631 .263(permits such changes to be made. Nevertheless, such changes have required)J
122 604 :M
.064 .006(intervention of the designers of the system. Ideally, a system should provide controlled)J
122 615 :M
2.938 .294(access to its internals in a manner that will permit users to customise the)J
122 626 :M
1.117 .112(implementation to suit the specific needs of their applications. This view however)J
122 637 :M
1.051 .105(appears to conflict with the \324traditional\325  view of system structuring that promotes)J
122 648 :M
.813 .081(construction of layers of abstractions that hide implementation details. Kiczales has)J
122 659 :M
.334 .033(nicely analysed this discrepancy and has come to the conclusion that a way of system)J
122 670 :M
2.439 .244(structuring is required in which abstractions do expose their implementations)J
122 681 :M
.46 .046([Kiczales92]. Kiczales goes on to make a case for \322open implementations\323  with two)J
122 692 :M
.284 .028(interfaces per implementation: the \324traditional\325 interface and an \324adjustment\325 interface)J
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(nsks; page: 13 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
2.836 .284(\(the meta-level interface\) that provides a way of tuning or customising the)J
122 164 :M
-.071(implementation \(see also [stroud93] for related ideas\).)A
122 175 :M
.537 .054( The basic approach to structuring that we are adopting has some resemblance to the)J
122 186 :M
.958 .096(open implementation approach suggested above. We also intend to provide a clean)J
122 197 :M
.182 .018(separation between the interface of a class and its implementation, permitting multiple)J
122 208 :M
2.27 .227(implementations for a given interface, with the selection of the most suitable)J
122 219 :M
1.548 .155(implementation being left as a run time decision. Each implementation will also)J
122 230 :M
-.063(provide a )A
f2_10 sf
-.062(control interface)A
f3_10 sf
-.065( \(the adjustment interface\) for customisation [Wheater95]. An)A
122 241 :M
3.606 .361(immediately useful application of this will be to support more than one)J
122 252 :M
-.018(implementation for RPCs, a need that we identified earlier.)A
122 263 :M
.679 .068(In the present version of )J
f2_10 sf
.24(Arjuna)A
f3_10 sf
.875 .087(, the object support infrastructure employed is very)J
122 274 :M
.898 .09(simple, enabling clients to access remote objects through independent servers. This)J
122 285 :M
-.017(simple scheme has the important advantage of providing isolation between independent)A
122 296 :M
-.034(actions, but is inefficient for frequently shared objects. As observed earlier, applications)A
122 307 :M
1.54 .154(often require some control over object to server binding, including enabling and)J
122 318 :M
1.086 .109(disabling of caching of objects at clients. A better approach therefore would be to)J
122 329 :M
(provide a more comprehensive object support infrastructure for managing objects, with)S
122 340 :M
.061 .006(support for caching and migration, and permitting a server to be shared, and capable of)J
122 351 :M
.49 .049(managing more than one object. With this view in mind, we have designed an object)J
122 362 :M
1.138 .114(support system that permits control over object servers and also permits clients to)J
122 373 :M
1.139 .114(create, copy and exchange references to objects. In this system, a client holding a)J
122 384 :M
.64 .064(reference is able to invoke operations on that object even if the object has moved to)J
122 395 :M
1.96 .196(some other location [Caughey93, Caughey94]. Our design scales to systems of)J
122 406 :M
.158 .016(arbitrary size and is portable since it only requires a few standard capabilities from the)J
122 417 :M
-.013(underlying operating system.)A
122 428 :M
.589 .059(Finally, we examine the need for group management support in )J
f2_10 sf
.171(Arjuna)A
f3_10 sf
.606 .061(. We identify)J
122 439 :M
.039 .004(two aspects of group management: provision of a membership service and provision of)J
122 450 :M
1.467 .147(reliable multicast delivery services with possibly some ordering constraints \(e.g.,)J
122 461 :M
.519 .052(causal, total\). In a recent paper [Cheriton93], Cheriton and Skeen have examined the)J
122 472 :M
2.306 .231(need for causally and totally ordered communication support \(CATOCS\) in a)J
122 483 :M
.133 .013(distributed system. After considering a number of application scenarios, they conclude)J
122 494 :M
1.693 .169(that quite adequate solutions are obtainable from systems without CATOCS but)J
122 505 :M
2.54 .254(including support for transactions operating on objects. Papers from Cornell,)J
122 516 :M
3.048 .305(disagreeing with the Cheriton and Skeen view, claiming that implementing)J
122 527 :M
1.635 .163(applications on systems without CATOCS would be very hard indeed have also)J
122 538 :M
.327 .033(appeared [Cornell94]. Our own view, expressed in [Shrivastava94] is that although, it)J
122 549 :M
1.357 .136(is possible to build realistic systems without CATOCS - the )J
f2_10 sf
.416(Arjuna)A
f3_10 sf
2.076 .208( applications)J
122 560 :M
2.421 .242(discussed in this paper have not used CATOCS - there is a place for group)J
122 571 :M
1.838 .184(management support \(of which CATOCs is but one aspect\) in persistent object)J
122 582 :M
1.11 .111(systems. We discuss below how )J
f2_10 sf
.314(Arjuna)A
f3_10 sf
1.279 .128( can profitably exploit group management)J
122 593 :M
.072(support.)A
122 604 :M
1.406 .141(Our system is intended to be used in a variety of communications environments,)J
122 615 :M
.156 .016(including those that may well be subject to \(real or virtual\) partitions caused by events)J
122 626 :M
.288 .029(such as physical breakdowns, radio interference/blackouts and network congestion. In)J
122 637 :M
.114 .011(general therefore, it will not be possible to place bounds on communication delays and)J
122 648 :M
.312 .031(relative speeds of processes. Unfortunately, accurate failure detection is impossible in)J
122 659 :M
.404 .04(such an asynchronous environment, as it is not possible to distinguish slow processes)J
122 670 :M
.458 .046(from crashed ones. As a consequence, there is always a possibility that a process can)J
122 681 :M
.695 .07(appear as failed to one process and functioning to another. Such a situation must be)J
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(nsks; page: 14 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
-.084(avoided in all those cases where distributed processes are required to have common view)A
122 164 :M
-.106(on \324failed\325 processes.)A
122 175 :M
.725 .072(Imagine that it is required to implement an automatic load balancing facility for the)J
122 186 :M
1.42 .142(processing cluster shown in fig. 3. Specifically, it is required that the processing)J
122 197 :M
.128 .013(cluster machines should equally share the number of user terminals amongst them; if a)J
122 208 :M
.624 .062(machine crashes, or a new machine is introduced in the cluster, then the functioning)J
122 219 :M
.65 .065(machines should redistribute the terminal sessions amongst them. For such a system)J
122 230 :M
2.162 .216(to work properly, it is necessary that the functioning machines have mutually)J
122 241 :M
.891 .089(consistent view of the membership of the cluster. A group membership service can)J
122 252 :M
.475 .047(play a very useful role here. The processing cluster can be organised as a group. The)J
122 263 :M
(membership service can then be tuned to make judicious use of timeouts for )S
f2_10 sf
(suspecting)S
122 274 :M
f3_10 sf
1.726 .173(the absence of one or more members, in which case, it will execute the inbuilt)J
122 285 :M
.798 .08(membership protocol with other members of the group to reach agreement on these)J
122 296 :M
1.683 .168(suspicions, which if confirmed lead to an update of membership view, with the)J
122 307 :M
.429 .043(suspecting machines removed from the view. This enables the mutually unsuspecting)J
122 318 :M
.03 .003(machines to maintain identical membership views.)J
122 329 :M
.69 .069(Our earlier work [Little90] identified the need for reliable group communication for)J
122 340 :M
1.052 .105(supporting active replication of objects \(where more than one copy of an object is)J
122 351 :M
.156 .016(activated on distinct nodes and all activated copies perform processing\). An advantage)J
122 362 :M
.22 .022(of active replication is that it can mask a finite number of replica failures, without any)J
122 373 :M
.819 .082(need for the current atomic action to abort. The current version of )J
f2_10 sf
.269(Arjuna)A
f3_10 sf
1.261 .126( however)J
122 384 :M
1.749 .175(employs a simple form of passive replication scheme which entails maintaining)J
122 395 :M
.902 .09(multiple copies of persistent states but only a single copy \(primary\) is activated; at)J
122 406 :M
.243 .024(commit time, the activated copy checkpoints its state to all the object stores where the)J
122 417 :M
.16 .016(states reside. The advantages of this form of passive replication over active replication)J
122 428 :M
.576 .058(is that it can be implemented without recourse to any group communication \(as only)J
122 439 :M
1.251 .125(one replica is activated at any time\); however, its performance in the presence of)J
122 450 :M
.731 .073(primary failure is substantially poorer than under no failures, because such a failure)J
122 461 :M
-.018(causes the action to abort; retrying the action can lead to forward progress as a different)A
122 472 :M
.726 .073(copy gets activated. In general therefore no single replication scheme is satisfactory)J
122 483 :M
.582 .058(under all circumstances, so a fault tolerant system should be capable of supporting a)J
122 494 :M
.671 .067(number of replication schemes. For this reason, we have implemented the necessary)J
122 505 :M
.372 .037(infrastructure within )J
f2_10 sf
.086(Arjuna)A
f3_10 sf
.268 .027( to enable it to support both active and passive replication)J
122 516 :M
.199 .02(of objects [Little 94].)J
122 527 :M
1.41 .141(Using the single interface - multiple implementation strategy outlined earlier, we)J
122 538 :M
1.52 .152(expect to be able to exploit a variety of suitable group management systems for)J
122 549 :M
1.014 .101(supporting functionalities such as object replication and load balancing as outlined)J
122 560 :M
-.075(above.)A
122 594 :M
f0_14 sf
.677(Acknowledgements)A
122 617 :M
f3_10 sf
.286 .029(The work reported here has been supported in part by grants from the UK Ministry of)J
122 628 :M
2.228 .223(Defence, Engineering and Physical Sciences Research Council \(Grant Number)J
122 639 :M
1.17 .117(GR/H81078\) and ESPRIT project BROADCAST \(Basic Research Project Number)J
122 650 :M
1.117 .112(6360\). Acknowledgement is due to colleagues G.D. Parrington, S.M. Wheater and)J
122 661 :M
.166 .017(M.C. Little who have played key roles in building the )J
f2_10 sf
.055(Arjuna)A
f3_10 sf
.227 .023( system.)J
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(nsks; page: 15 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
265 153 :M
f0_12 sf
.672(References)A
122 176 :M
f3_10 sf
-.125([ANSA91])A
176 176 :M
.32 .032(ANSA Reference Manual, Cambridge, UK, 1991. \(Available from APM)J
176 187 :M
-.007(Ltd., Poseiden House, Cambridge, UK.\))A
122 198 :M
-.183([Birman87])A
176 198 :M
.79 .079(Birman, K. and T. Joseph, \322Exploiting virtual synchrony in distributed)J
176 209 :M
1.294 .129(systems\323, in 11th Symposium on Operating System Principles, ACM)J
176 220 :M
.33 .033(SIGOPS, November 1987.)J
122 231 :M
-.183([Birman93])A
176 231 :M
2.032 .203(Birman, K. , "The process group approach to reliable computing",)J
176 242 :M
.426 .043(CACM , 36, 12, pp. 37-53, December 1993.)J
122 253 :M
-.22([Buzato92])A
176 253 :M
1.654 .165(Buzato, L.E., and A. Calsavara, \322Stabilis: A Case Study in Writing)J
176 264 :M
2.471 .247(Fault-Tolerant Distributed Applications Using Persistent Objects,\323)J
176 275 :M
3.497 .35(Proceedings of the Fifth Int. Workshop on Persistent Objects,)J
176 286 :M
.376 .038(SanMiniato, Italy, September 1-4, 1992.)J
122 297 :M
-.22([Buzato94])A
176 297 :M
-.006(Buzato, L.E., \322Management of Object-Oriented Action-Based Distributed)A
176 308 :M
1.123 .112(Programs\323, PhD Thesis,  October 1994, Dept. of Computing Science,)J
176 319 :M
.039 .004(University of Newcastle upon Tyne, UK.)J
122 330 :M
-.149([Calsvara95])A
194 330 :M
-.014(Calsvara, A., Doctoral research work in progress.)A
122 341 :M
-.12([Caughey93])A
194 341 :M
.614 .061(Caughey, S.J., G.D. Parrington and S.K. Shrivastava, "SHADOWS)J
176 352 :M
.584 .058(- A Flexible Support System for Objects in Distributed Systems", Proc.)J
176 363 :M
.17 .017(of 3rd IEEE Intl. Workshop on Object Orientation in Operating Systems,)J
176 374 :M
.182 .018(pp. 73-82, Asheville, North Carolina, December 1993.)J
122 385 :M
-.12([Caughey94])A
194 385 :M
1.742 .174(Caughey, S.J., and S.K. Shrivastava, "Architectural Support for)J
176 396 :M
2.021 .202(Mobile Objects\322, BROADCAST Project deliverable report, Vol. 3,)J
176 407 :M
.129 .013(October 1994 \(available from Dept. of Computing Science, University of)J
176 418 :M
-.019(Newcastle upon Tyne, UK\).)A
122 429 :M
-.059([Cheriton93])A
194 429 :M
1.227 .123(Cheriton, D.R., and D. Skeen, "Understanding the Limitations of)J
176 440 :M
1.646 .165(Causally and Totally Ordered Communication", Proc. of 14th ACM)J
176 451 :M
.48 .048(Symp. on Operating Systems Principles, Operating Systems Review, 27)J
176 462 :M
.136 .014(\(5\), pp. 44-57, December 1993.)J
122 473 :M
-.065([Cornell94])A
176 473 :M
1.646 .165(Rebuttals from Cornell, Operating Systems Review, 28 \(1\), January)J
176 484 :M
.125(1994.)A
122 495 :M
-.189([Kiczales92])A
176 495 :M
2.378 .238(Kiczales, G., \322Towards a New Model of Abstraction in Software)J
176 506 :M
1.329 .133(Engineering\323, Proc. of Intl. Workshop on Reflection and Meta-Level)J
176 517 :M
.048 .005(Architecture, Tama-City, Tokyo, November 1992.)J
122 528 :M
-.035([Little93])A
176 528 :M
2.336 .234(Little, M. C., D. L. McCue, and S. K. Shrivastava, \322Maintaining)J
176 539 :M
2.868 .287(Information about Persistent Replicated Objects in a Distributed)J
176 550 :M
3.108 .311(System,\323 Proceedings of Thirteenth International Conference on)J
176 561 :M
.518 .052(Distributed Computing Systems, Pittsburgh, May 1993.)J
122 572 :M
.092 .009([Little 94])J
176 572 :M
1.32 .132(Little, M. C. and S. K. Shrivastava, \322Object Replication in )J
f2_10 sf
.414(Arjuna)A
f3_10 sf
.621<2CD3>A
176 583 :M
-.019(BROADCAST Project deliverable report, Vol. 2, October 1994 \(available)A
176 594 :M
.576 .058(from Dept. of Computing Science, University of Newcastle upon Tyne,)J
176 605 :M
-.089(UK\).)A
122 616 :M
-.129([Panzieri88])A
176 616 :M
1.032 .103(Panzieri, F. and S.K. Shrivastava, \322Rajdoot: a Remote Procedure Call)J
176 627 :M
.327 .033(Mechanism Supporting Orphan Detection and Killing\323\325  IEEE Trans. on)J
176 638 :M
.341 .034(Software Eng. 14, 1, pp. 30-37, January 1988.)J
122 649 :M
-.067([Parrington90])A
194 649 :M
.599 .06(Parrington, G. D., \322Reliable Distributed Programming in C++: The)J
176 660 :M
f2_10 sf
.396(Arjuna)A
f3_10 sf
1.546 .155( Approach,\323 Second Usenix C++ Conference, pp. 37-50, San)J
176 671 :M
.384 .038(Fransisco, April 1990.)J
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(nsks; page: 16 of 16)setjob
%%EndPageSetup
-13 -12 :T
gS 13 12 568 818 rC
122 153 :M
f3_10 sf
-.067([Parrington94])A
194 153 :M
.761 .076(Parrington, G.D., S.K. Shrivastava, S.M. Wheater and M.C. Little,)J
176 164 :M
1.239 .124(\323The Design and Implementation of )J
f2_10 sf
.328(Arjuna)A
f3_10 sf
1.832 .183(\323, BROADCAST Project)J
176 175 :M
2.298 .23(deliverable report, Vol. 4, October 1994 \(available from Dept. of)J
176 186 :M
.111 .011(Computing Science, University of Newcastle upon Tyne, UK\).)J
122 197 :M
-.147([Stroud93])A
176 197 :M
2.399 .24(Stroud, R. "Transparency and Reflection in Distributed Systems",)J
176 208 :M
.417 .042(Operating Systems Review, Vol. 27, pp. 99-103, April 1993.)J
122 219 :M
-.093([Shrivastava91])A
194 219 :M
2.573 .257(Shrivastava, S. K., G. N. Dixon, and G. D. Parrington, \322An)J
176 230 :M
.888 .089(Overview of )J
f2_10 sf
.249(Arjuna)A
f3_10 sf
1.013 .101(: A Programming System for Reliable Distributed)J
176 241 :M
.405 .04(Computing,\323 IEEE Software, Vol. 8, No. 1, pp. 63-73, January 1991.)J
122 252 :M
-.093([Shrivastava94])A
194 252 :M
2.318 .232(Shrivastava, S. K., and D. McCue, \322Structuring Fault-tolerant)J
176 263 :M
1.414 .141(Object Systems for Modularity in a Distributed Environment,\323 IEEE)J
176 274 :M
.605 .061(Trans. on Parallel and Distributed Systems, Vol. 5, No. 4, pp. 421-432,)J
176 285 :M
.448 .045(April 1994.)J
122 296 :M
-.093([Shrivastava94])A
194 296 :M
1.902 .19(Shrivastava, S. K., \322To Catocs or not to Catocs, that is the...\323)J
176 307 :M
.334 .033(Operating Systems Review, Vol. 28, pp. 11-14, October 1994.)J
122 318 :M
.056([Smith95])A
176 318 :M
2.691 .269(Smith, J. A. and S.K. Shrivastava, \322Fault Tolerant Execution of)J
176 329 :M
2.133 .213(Computationally and Storage Intensive Programs on a Network of)J
176 340 :M
1.413 .141(Workstations: a Case Study\323, Technical Report, Dept. of Computing)J
176 351 :M
.102 .01(Science, University of Newcastle upon Tyne, UK, 1995.)J
122 362 :M
-.062([Snow95])A
176 362 :M
.793 .079(Snow, C.R., M.C. Little and S.M. Wheater, \322An experiment in the use)J
176 373 :M
(of )S
f2_10 sf
.019(Arjuna)A
f3_10 sf
.073 .007(: the Student Registration System\323, paper in preparation.)J
122 384 :M
-.252([Wheater94])A
176 384 :M
.333 .033(Wheater, S. M. and  S. K. Shrivastava, \322Exercising Application Specific)J
176 395 :M
1.206 .121(Run-time Control over Clustering of Objects,\323 Proc. of IEEE Second)J
176 406 :M
1.864 .186(Intl. Workshop on Configurable Distributed Systems, March, 1994,)J
176 417 :M
.747 .075(Pittsburgh, pp. 72-81.)J
122 428 :M
-.252([Wheater95])A
176 428 :M
.718 .072(Wheater, S.M., and M.C. Little,\323The Design and Implementation of an)J
176 439 :M
.296 .03(Extensible Software Development Framework\323, Technical Report, Dept.)J
176 450 :M
.188 .019(of Computing Science, University of Newcastle upon Tyne, UK, 1995.)J
endp
%%Trailer
end
%%EOF

