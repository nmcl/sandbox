ESPRIT Proposal Notes
David Ingham, Steve Caughey
Department of Computing Science,
University of Newcastle upon Tyne
Newcastle upon Tyne, NE1 7RU,
United Kingdom
5th February 1996.
Introduction
The advent of the World-Wide Web (the Web) has sparked a massive growth in large-scale electronic publishing; the Web is now the most popular technique for information dissemination over the Internet. The popularity of the Web can be partially attributed to its simple design, based on a simple, stateless communication protocol (HTTP) requiring the minimum of infrastructural support. Browsing through the Web's distributed hypertext has proven to be attractive to users, requiring little computing experience to benefit from the large quantity of the available information. Similarly, becoming a Web publisher is also straight-forward allowing users from all professions to participate, resulting in the huge diversity of the information currently available. These factors coupled with free web software with cross-platform support have helped the Web gain critical mass.
The Web is primarily populated with read-only, static, file-based, document-like resources which are glued together via the hypertext links embedded within the Web's native HTML resources. The Web has been extremely successful in serving such resources freely within the public domain. However, the Web currently gives the impression of being focused on quantity rather than quality. Publishers enjoy the freedom of lack of responsibility in terms of their requirements for maintaining correctness and consistency. This has resulted in poor quality of information. In particular, one highly visible problem is that of broken links between resources, caused by the lack of referential integrity within the current hypertext implementation. With the predicted growth in the number of resources, this problem will increase in significance, and the web will become more difficult to use and manage.
Another important issue is the incorporation of more sophisticated resources. Although techniques currently exist for extending the Web beyond documentation based resources, i.e. through the use of the Common Gateway Interface (CGI), this provides a rather unwieldy programming model, providing little support for the development of complex applications. Furthermore no architectural support is provided for implementing frequently required functionality such as shopping trolleys for example.
Service providers want to offer services which are frequently more than passive documentation. For example they will want to be able to provide multi-media services, such as video-on-demand and electronic newspapers, interactive services such as at-home-learning and banking systems. Above all service providers want to be able to charge users for their services. This requires a means of exchanging payment but more importantly needs mechanisms for security and authentication to prevent free access and therefore provide a rationale for charging. In return for payment, service providers accept obligations such as prescribed availability, performance and correctness of the service. All of this requires that the Web be capable of extension in the interfaces via which users (and administrators) interact with services.
In summary, while suitable for academic institutions and publishers of other free information, it is clear that the current Web environment is inappropriate for commercial based. However, the Web is ubiquitous and therefore providing Web access to a particular service unleashes a massive potential customer base. Most large organisations have realised that they cannot ignore the Web and many are beginning to create their Web presence albeit primarily from a plain advertising perspective. In order to allow more complex Web-based applications, especially those involving commerce, it is clear that substantial work is required in improving the support for service provision. To illustrate the kinds of requirements that are likely to occur, consider the following example of an electronic newspaper.
Electronic Newspaper Illustration
As an example consider a service such as an electronic newspaper, which would allow users to access pages of information linked in a complex mesh, describing the current news. The paper could provide links to external information sources, which interested readers could follow to obtain more detailed knowledge, and to earlier articles for background and historical perspective. Such a paper could be updated dynamically as news breaks, provide multi-media presentations, and offer readers views to match their particular interests, i.e., personalized newspapers. Implementing this service poses many challenges. Secure protocols are required for charging purposes, multiple pages need to be updated atomically so that users do not obtain inconsistent information, certain pages may require high availability e.g., the financial news, mechanisms are required for archiving old news and for monitoring access to the most popular pages, journalists require write access to pages (potentially from their personal mobile computers), readers may require write access to letter pages, etc. The demands on the service will vary from page to page, minute to minute, demanding an extremely dynamic response from the provider. We believe that the high performance and flexibility required by such a service are beyond the scope of the current static, documentation-based Web infrastructure but that these demands can be met through the use of an object-oriented infrastructure under development at Newcastle, known as The W3Objects System.
W3Objects
Within the distributed systems group at Newcastle University the object-oriented approach is accepted as an appropriate model for communication between distributed resources, and as a programming methodology which encourages the reuse of software interfaces and implementations. Such an understanding has been gained through the group's considerable experience in the implementation of distributed systems, the most well-known being the Arjuna distributed programming platform [Parrington95].
For this reason we have been investigating the use of the object-oriented paradigm within the Web and have developed an object-oriented system, which allows Web resources to be implemented as objects; W3Objects in our terminology [Ingham95]. In our model, Web resources are represented as W3Objects, which are encapsulated resources possessing internal state and a well defined behavior, rather than the traditional file-based entities. The model supports abstraction since clients interact with W3Objects only through well-defined published interfaces. The objects themselves are responsible for managing their own state transitions and properties, in response to method invocations.
W3Objects may support a number of distinct interfaces, obtained via interface inheritance. Common interfaces may be shared thereby enabling polymorphic access, for example, many W3Objects conform to the HTTP interface which includes methods such as GET. The specific implementation of the methods may differ between the different classes of object. For example, an HTML W3Object may simply return some static HTML state in response to a GET request, whereas a bank account object may return some dynamically generated HTML reflecting the current status of the account. Behavioral inheritance is used to provide desirable properties such as persistence and concurrency control.
Contexts, which are themselves W3Objects, are used as naming domains, within which W3Objects are uniquely named relative to that context. Contexts may be nested and therefore W3Objects may be identified using compound names. Servers can represent contexts providing network access to W3Objects. Addressing is achieved using first-class referencing objects, W3References, which contain the location of a particular object in terms of the Internet address of the server and the compound name, correct at the time of the last access.
The W3Object referencing model provides referential integrity for W3Objects; that is objects continue to persist for as long as W3References to them exist. This problem is complicated by the fact that failures may occur and that W3Objects tend to move around. Our approach uses a cheap default scheme for achieving basic referential integrity which may be enhanced on a per-object basis by additional techniques such as nameservers and call-back to achieve higher levels of performance and fault-tolerance.
Our initial prototype implementations have adopted an evolutionary approach, in that our system runs in parallel to the existing Web browsers and servers without any detrimental effects, but users who wish to introduce new resources may design them as W3Objects, or may transform existing resources into W3Objects. W3Objects support multiple interfaces so whilst they may be accessed through traditional Web browsers, they can also provide a rich new set of functionality.
The WebKernel (TM)
While the W3Object model provides the necessary extensibility characteristics to allow the incorporation of advanced resources into the Web, additional support is required to facilitate the development of commercial-strength applications which manipulate W3Objects. We term this collection of software components The WebKernel. 
Support for Legacy Resources
Most commercial organisations have major investment in legacy computing systems, such as documentation systems and order processing systems. Providing Web-based interfaces to this variety of information systems can be seen to have many advantages. Private, enterprise-wide Webs can be used to improve productivity by providing a uniform interface to the disparate systems while some services may be published externally, for example, charging customers to view certain documentation resources. 
For whatever reason, it is clear there will be a requirement to provide Web-based access to existing information systems. However, there is inevitably an impedance mismatch between the Web and these legacy applications. Object-oriented technology provides a natural model for addressing this problem. An existing resource or service may be encapsulated within an objects which provide the functional interface to the service while hiding the implementation and the interactions with the existing applications. Applications written to manipulate such resources need not be concerned with the underlying implementation, rather they are able to make invocations on the abstract object interface. Furthermore, the polymorphic nature of the object-oriented model allows objects of different classes, which conform to a common interface, to be manipulated by an application without concern for the internals of the particular object class.
Transactions
From a commercial viewpoint, one of the major limitations of the current Web is the lack of support for transactions. In particular, electronic commerce is one area where transactional support is extremely desirable. Electronic payment protocols require updates to be performed on a number of (possibly distributed) databases in an atomic manner, ensuring that payment and service provision occur together. This is a difficult problem that requires robust and secure solutions.
Another requirement for transactions is the update of information repositories. The maintenance of Web sites often requires the manipulation of a number of separate entities. Clearly, it is desirable for such updates to be performed atomically, thereby preventing browsing users from traversing incomplete or broken information repositories. Currently, Web site maintainers must rely on ad-hoc solutions to complete these updates. A general purpose transactional update mechanism is desirable to facilitate such updates, including provision for replicated resources which clearly involve distributed transactions.
[Note: I see some problems with traditional 2-phase commit protocols. Clearly, some problems can be overcome by making servers co-ordinate actions but it is not appropriate to block Web-based transactions for long periods. Are non-blocking or 3-phase protocols more appropriate?]
Replication
Popular Web resources have the potential to cripple the machine on which they reside and the networks which provide their connectivity. Some recent examples of this 'flash flood' effect [ref] include the Winter Olympics pages and new releases of the Netscape Navigator Web browser. In order to counteract these kinds of problems, information providers have taken to replicating certain resources to balance the load between the copies. However, the current architecture provides no support for managing such replicated resources. Since only read-only resources (from a Web-perspective) are currently replicated, this lack of support has not proved to be too serious a problem. However, as the nature of resources change to include more read/write entities, and more highly volatile resources, such as financial data, underlying support for replicated resources will become an necessary requirement. Furthermore, replication will become essential in order for information providers to guarantee sufficiently high levels of availability to their customers.
[Notes: No one replication scheme suitable for all resources; trade-offs between centralised name-server approach and distributed quorum-consensus techniques. Object-oriented approach should allow multiple schemes to operate in parallel using common interfaces (?)]
Interoperability Support
Support for interoperability is considered to be essential in our design. The object-oriented underpinnings of the W3Object design mean that it the objects themselves that are responsible for the manipulation of their internal state and properties. Coupled with support for multiple protocols, W3Objects may therefore be accessed via a number of different client types. Examples include HTML forms/CGI-based access, JAVA applets and dedicated bespoke applications, communicating with an object via RPC.
The ubiquitous availability of Web browser software and the existing investment in existing legacy information systems necessitates the development of appropriate gateway software to map resources between alternative representations. Furthermore, generic gateways are required to allow our advanced object-oriented services to be accessed via conventional browsers.
Such gateways require the ability to map between the stateless, text-based HTTP/CGI protocol to method invocations on objects, perhaps as part of a stateful interaction. There are two main issues here, firstly, in order to remove the requirement for the gateway to possess client-stub code for all of the services that it interacts with, a dynamic interface to objects is required. Our underlying object system, Shadows, can support such an interface, similar to that specified in CORBA Dynamic Invocation Interface specification. The second issue is presentation. Legacy objects will not have been implemented with HTML rendering in mind, therefore some mapping is required. Special presentation objects are envisaged for this purpose, allowing the separation of the functional aspects of the object from particular rendering options.
Referencing
We have already expended considerable research effort in developing suitable referencing schemes for W3Objects [Ingham96]. Our approach, based on the Shadows distributed object system [Caughey95], is to provide simple guarantees for all W3Objects in order to maintain the overall integrity of the system, and flexible mechanisms which allow users to obtain additional guarantees concerning their personal relationship with chosen W3Objects. Users of W3Objects are guaranteed that,  for as long as they hold a reference to it, the W3Object continues to be accessible, despite migrations (a common occurrence for Web resources) and communication or node failures (a common occurrence on the Internet). Maintaining this guarantee provides a solution to the frustrating problem of 'broken links' which any Web user will be familiar with, and allows the automatic garbage collection of W3Objects which are no longer referenced.
Our mechanisms provide a user-centered view of the Web, making it easy for users to create individualized name spaces for the W3Objects in which they have an interest, for groups of users to share such spaces, and for users to specify appropriate levels of availability, performance and fault-tolerance for each W3Object, independent of the requirements of others.
Standards Adherence
Our previous prototype implementations of the W3Objects architecture have been constructed using home grown distributed object technology which pre-date CORBA. However, it is widely accepted that the CORBA object model [OMG93] will become the industrial standard for distributed object systems. Therefore, we aim to move our development to a CORBA-compliant system, either by modifying our existing implementations or by adopting an existing CORBA platform such as ORBIX.
References
[Caughey95] S. J. Caughey and S. K. Shrivastava, "Architectural Support for Mobile Objects in Large Scale Distributed Systems," In The Proceedings of the 4th IEEE International Workshop on Object Orientation in Operating Systems (IWOOOS), Lund, Sweden, August 1995. 
URL: http://arjuna.ncl.ac.uk:80/arjuna/papers/shadows-iwooos95.ps
[Ingham95] D. B. Ingham, M. C. Little, S. J. Caughey, and S. K. Shrivastava, "W3Objects: Bringing Object-Oriented Technology To The Web," The Web Journal, Vol. 1, No. 1, pp. 89-105,  Proceedings of the 4th International World Wide Web Conference, Boston, USA, December 1995.
URL: http://www.w3.org/pub/Conferences/WWW4/Papers2/141/
[Ingham96] D. B. Ingham, S. J. Caughey, and M. C. Little, "Fixing the 'Broken-Link' Problem: The W3Objects Approach," January 1996.
URL: http://arjuna.ncl.ac.uk/w3objects/papers/www5/Overview.html
[OMG93] Object Management Group Inc, "The Common Object Request Broker: Architecture and Specification, Revision 1.2", OMG Document Number 93.12.43, December 1993.
URL: ftp://ftp.omg.org/pub/docs/93-12-43.ps
[Parrington95] G. D. Parrington et al, "The Design and Implementation of Arjuna," USENIX Computing Systems Journal, Vol. 8, No. 3, 1995.
URL: http://arjuna.ncl.ac.uk/arjuna/arjunadesign-usenix.ps

